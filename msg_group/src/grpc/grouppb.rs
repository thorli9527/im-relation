// This file is @generated by prost-build.
/// 成员引用
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MemberRef {
    #[prost(int64, tag = "1")]
    pub user_id: i64,
    /// 为空表示无别名
    #[prost(string, tag = "2")]
    pub alias: ::prost::alloc::string::String,
    #[prost(enumeration = "GroupRoleType", tag = "3")]
    pub role: i32,
}
/// 群信息（查询返回）
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GroupInfo {
    #[prost(int64, tag = "1")]
    pub id: i64,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub avatar: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub description: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub notice: ::prost::alloc::string::String,
    #[prost(enumeration = "JoinPermission", tag = "6")]
    pub join_permission: i32,
    #[prost(int64, tag = "7")]
    pub owner_id: i64,
    #[prost(enumeration = "GroupType", tag = "8")]
    pub group_type: i32,
    #[prost(bool, tag = "9")]
    pub allow_search: bool,
    #[prost(bool, tag = "10")]
    pub enable: bool,
    /// 毫秒时间戳
    #[prost(int64, tag = "11")]
    pub created_at: i64,
    /// 毫秒时间戳
    #[prost(int64, tag = "12")]
    pub updated_at: i64,
    #[prost(uint32, tag = "13")]
    pub member_count: u32,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateGroupReq {
    #[prost(int64, tag = "1")]
    pub creator_id: i64,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    /// 初始成员（不含自己）
    #[prost(int64, repeated, tag = "3")]
    pub members: ::prost::alloc::vec::Vec<i64>,
    #[prost(string, tag = "4")]
    pub avatar: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub intro: ::prost::alloc::string::String,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CreateGroupResp {
    #[prost(int64, tag = "1")]
    pub group_id: i64,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateGroupProfileReq {
    #[prost(int64, tag = "1")]
    pub operator_id: i64,
    #[prost(int64, tag = "2")]
    pub group_id: i64,
    #[prost(string, tag = "3")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub avatar: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub intro: ::prost::alloc::string::String,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DismissGroupReq {
    /// 需为群主
    #[prost(int64, tag = "1")]
    pub operator_id: i64,
    #[prost(int64, tag = "2")]
    pub group_id: i64,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct JoinGroupReq {
    #[prost(int64, tag = "1")]
    pub group_id: i64,
    #[prost(int64, tag = "2")]
    pub user_id: i64,
    #[prost(string, tag = "3")]
    pub extra: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub join_source: ::prost::alloc::string::String,
    /// 若被邀请
    #[prost(int64, tag = "5")]
    pub inviter_id: i64,
    #[prost(string, tag = "6")]
    pub inviter_extra: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub inviter_join_source: ::prost::alloc::string::String,
    /// 毫秒
    #[prost(int64, tag = "8")]
    pub join_time_ms: i64,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LeaveGroupReq {
    #[prost(int64, tag = "1")]
    pub group_id: i64,
    #[prost(int64, tag = "2")]
    pub user_id: i64,
    #[prost(string, tag = "3")]
    pub reason: ::prost::alloc::string::String,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApproveJoinReq {
    #[prost(int64, tag = "1")]
    pub group_id: i64,
    #[prost(int64, tag = "2")]
    pub operator_id: i64,
    #[prost(int64, tag = "3")]
    pub applicant_id: i64,
    #[prost(bool, tag = "4")]
    pub accept: bool,
    #[prost(string, tag = "5")]
    pub remark: ::prost::alloc::string::String,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InviteMembersReq {
    #[prost(int64, tag = "1")]
    pub group_id: i64,
    #[prost(int64, tag = "2")]
    pub operator_id: i64,
    #[prost(int64, repeated, tag = "3")]
    pub invitee_ids: ::prost::alloc::vec::Vec<i64>,
    #[prost(string, tag = "4")]
    pub extra: ::prost::alloc::string::String,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct KickMemberReq {
    #[prost(int64, tag = "1")]
    pub group_id: i64,
    #[prost(int64, tag = "2")]
    pub operator_id: i64,
    #[prost(int64, tag = "3")]
    pub target_id: i64,
    #[prost(string, tag = "4")]
    pub reason: ::prost::alloc::string::String,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateMemberAliasReq {
    #[prost(int64, tag = "1")]
    pub group_id: i64,
    #[prost(int64, tag = "2")]
    pub operator_id: i64,
    #[prost(int64, tag = "3")]
    pub target_id: i64,
    /// 空串 => 清空
    #[prost(string, tag = "4")]
    pub alias: ::prost::alloc::string::String,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChangeMemberRoleReq {
    #[prost(int64, tag = "1")]
    pub group_id: i64,
    #[prost(int64, tag = "2")]
    pub operator_id: i64,
    #[prost(int64, tag = "3")]
    pub target_id: i64,
    #[prost(enumeration = "GroupRoleType", tag = "4")]
    pub role: i32,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetGroupReq {
    #[prost(int64, tag = "1")]
    pub group_id: i64,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetMembersReq {
    #[prost(int64, tag = "1")]
    pub group_id: i64,
    /// 从 1 开始
    #[prost(uint32, tag = "2")]
    pub page: u32,
    /// 建议 1..=100
    #[prost(uint32, tag = "3")]
    pub page_size: u32,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMembersResp {
    #[prost(message, repeated, tag = "1")]
    pub members: ::prost::alloc::vec::Vec<MemberRef>,
    /// 可选填充
    #[prost(uint64, tag = "2")]
    pub total: u64,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CountMembersReq {
    #[prost(int64, tag = "1")]
    pub group_id: i64,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CountMembersResp {
    #[prost(uint64, tag = "1")]
    pub count: u64,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UserGroupsReq {
    #[prost(int64, tag = "1")]
    pub user_id: i64,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserGroupsResp {
    #[prost(int64, repeated, tag = "1")]
    pub group_ids: ::prost::alloc::vec::Vec<i64>,
}
/// 群成员角色
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum GroupRoleType {
    /// 群主
    GrtOwner = 0,
    /// 管理员
    GrtAdmin = 1,
    /// 普通成员
    GrtMember = 2,
}
impl GroupRoleType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::GrtOwner => "GRT_OWNER",
            Self::GrtAdmin => "GRT_ADMIN",
            Self::GrtMember => "GRT_MEMBER",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "GRT_OWNER" => Some(Self::GrtOwner),
            "GRT_ADMIN" => Some(Self::GrtAdmin),
            "GRT_MEMBER" => Some(Self::GrtMember),
            _ => None,
        }
    }
}
/// 加群权限
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum JoinPermission {
    /// 任何人可加入
    JpAnyone = 0,
    /// 需审批
    JpNeedApproval = 1,
    /// 仅邀请
    JpInviteOnly = 2,
    /// 关闭加入
    JpClosed = 3,
}
impl JoinPermission {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::JpAnyone => "JP_ANYONE",
            Self::JpNeedApproval => "JP_NEED_APPROVAL",
            Self::JpInviteOnly => "JP_INVITE_ONLY",
            Self::JpClosed => "JP_CLOSED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "JP_ANYONE" => Some(Self::JpAnyone),
            "JP_NEED_APPROVAL" => Some(Self::JpNeedApproval),
            "JP_INVITE_ONLY" => Some(Self::JpInviteOnly),
            "JP_CLOSED" => Some(Self::JpClosed),
            _ => None,
        }
    }
}
/// 群组类型
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum GroupType {
    GtUnknown = 0,
    GtNormal = 1,
    GtSuper = 2,
    GtSystem = 3,
}
impl GroupType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::GtUnknown => "GT_UNKNOWN",
            Self::GtNormal => "GT_NORMAL",
            Self::GtSuper => "GT_SUPER",
            Self::GtSystem => "GT_SYSTEM",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "GT_UNKNOWN" => Some(Self::GtUnknown),
            "GT_NORMAL" => Some(Self::GtNormal),
            "GT_SUPER" => Some(Self::GtSuper),
            "GT_SYSTEM" => Some(Self::GtSystem),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod group_biz_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value
    )]
    use tonic::codegen::http::Uri;
    use tonic::codegen::*;
    /// ===============
    /// 服务
    /// ===============
    #[derive(Debug, Clone)]
    pub struct GroupBizServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl GroupBizServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> GroupBizServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> GroupBizServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<http::Request<tonic::body::Body>>>::Error:
                Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            GroupBizServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// 管理
        pub async fn create_group(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateGroupReq>,
        ) -> std::result::Result<tonic::Response<super::CreateGroupResp>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/grouppb.GroupBizService/CreateGroup");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("grouppb.GroupBizService", "CreateGroup"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn update_group_profile(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateGroupProfileReq>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path =
                http::uri::PathAndQuery::from_static("/grouppb.GroupBizService/UpdateGroupProfile");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "grouppb.GroupBizService",
                "UpdateGroupProfile",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn dismiss_group(
            &mut self,
            request: impl tonic::IntoRequest<super::DismissGroupReq>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path =
                http::uri::PathAndQuery::from_static("/grouppb.GroupBizService/DismissGroup");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("grouppb.GroupBizService", "DismissGroup"));
            self.inner.unary(req, path, codec).await
        }
        /// 成员
        pub async fn join_group(
            &mut self,
            request: impl tonic::IntoRequest<super::JoinGroupReq>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/grouppb.GroupBizService/JoinGroup");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("grouppb.GroupBizService", "JoinGroup"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn leave_group(
            &mut self,
            request: impl tonic::IntoRequest<super::LeaveGroupReq>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/grouppb.GroupBizService/LeaveGroup");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("grouppb.GroupBizService", "LeaveGroup"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn approve_join(
            &mut self,
            request: impl tonic::IntoRequest<super::ApproveJoinReq>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/grouppb.GroupBizService/ApproveJoin");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("grouppb.GroupBizService", "ApproveJoin"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn invite_members(
            &mut self,
            request: impl tonic::IntoRequest<super::InviteMembersReq>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path =
                http::uri::PathAndQuery::from_static("/grouppb.GroupBizService/InviteMembers");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("grouppb.GroupBizService", "InviteMembers"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn kick_member(
            &mut self,
            request: impl tonic::IntoRequest<super::KickMemberReq>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/grouppb.GroupBizService/KickMember");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("grouppb.GroupBizService", "KickMember"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn update_member_alias(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateMemberAliasReq>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path =
                http::uri::PathAndQuery::from_static("/grouppb.GroupBizService/UpdateMemberAlias");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "grouppb.GroupBizService",
                "UpdateMemberAlias",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn change_member_role(
            &mut self,
            request: impl tonic::IntoRequest<super::ChangeMemberRoleReq>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path =
                http::uri::PathAndQuery::from_static("/grouppb.GroupBizService/ChangeMemberRole");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "grouppb.GroupBizService",
                "ChangeMemberRole",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// 查询
        pub async fn get_group(
            &mut self,
            request: impl tonic::IntoRequest<super::GetGroupReq>,
        ) -> std::result::Result<tonic::Response<super::GroupInfo>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/grouppb.GroupBizService/GetGroup");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("grouppb.GroupBizService", "GetGroup"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_members(
            &mut self,
            request: impl tonic::IntoRequest<super::GetMembersReq>,
        ) -> std::result::Result<tonic::Response<super::GetMembersResp>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/grouppb.GroupBizService/GetMembers");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("grouppb.GroupBizService", "GetMembers"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn count_members(
            &mut self,
            request: impl tonic::IntoRequest<super::CountMembersReq>,
        ) -> std::result::Result<tonic::Response<super::CountMembersResp>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path =
                http::uri::PathAndQuery::from_static("/grouppb.GroupBizService/CountMembers");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("grouppb.GroupBizService", "CountMembers"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn user_groups(
            &mut self,
            request: impl tonic::IntoRequest<super::UserGroupsReq>,
        ) -> std::result::Result<tonic::Response<super::UserGroupsResp>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/grouppb.GroupBizService/UserGroups");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("grouppb.GroupBizService", "UserGroups"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod group_biz_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with GroupBizServiceServer.
    #[async_trait]
    pub trait GroupBizService: std::marker::Send + std::marker::Sync + 'static {
        /// 管理
        async fn create_group(
            &self,
            request: tonic::Request<super::CreateGroupReq>,
        ) -> std::result::Result<tonic::Response<super::CreateGroupResp>, tonic::Status>;
        async fn update_group_profile(
            &self,
            request: tonic::Request<super::UpdateGroupProfileReq>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        async fn dismiss_group(
            &self,
            request: tonic::Request<super::DismissGroupReq>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        /// 成员
        async fn join_group(
            &self,
            request: tonic::Request<super::JoinGroupReq>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        async fn leave_group(
            &self,
            request: tonic::Request<super::LeaveGroupReq>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        async fn approve_join(
            &self,
            request: tonic::Request<super::ApproveJoinReq>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        async fn invite_members(
            &self,
            request: tonic::Request<super::InviteMembersReq>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        async fn kick_member(
            &self,
            request: tonic::Request<super::KickMemberReq>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        async fn update_member_alias(
            &self,
            request: tonic::Request<super::UpdateMemberAliasReq>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        async fn change_member_role(
            &self,
            request: tonic::Request<super::ChangeMemberRoleReq>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        /// 查询
        async fn get_group(
            &self,
            request: tonic::Request<super::GetGroupReq>,
        ) -> std::result::Result<tonic::Response<super::GroupInfo>, tonic::Status>;
        async fn get_members(
            &self,
            request: tonic::Request<super::GetMembersReq>,
        ) -> std::result::Result<tonic::Response<super::GetMembersResp>, tonic::Status>;
        async fn count_members(
            &self,
            request: tonic::Request<super::CountMembersReq>,
        ) -> std::result::Result<tonic::Response<super::CountMembersResp>, tonic::Status>;
        async fn user_groups(
            &self,
            request: tonic::Request<super::UserGroupsReq>,
        ) -> std::result::Result<tonic::Response<super::UserGroupsResp>, tonic::Status>;
    }
    /// ===============
    /// 服务
    /// ===============
    #[derive(Debug)]
    pub struct GroupBizServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> GroupBizServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(inner: T, interceptor: F) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for GroupBizServiceServer<T>
    where
        T: GroupBizService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/grouppb.GroupBizService/CreateGroup" => {
                    #[allow(non_camel_case_types)]
                    struct CreateGroupSvc<T: GroupBizService>(pub Arc<T>);
                    impl<T: GroupBizService> tonic::server::UnaryService<super::CreateGroupReq> for CreateGroupSvc<T> {
                        type Response = super::CreateGroupResp;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateGroupReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as GroupBizService>::create_group(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateGroupSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/grouppb.GroupBizService/UpdateGroupProfile" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateGroupProfileSvc<T: GroupBizService>(pub Arc<T>);
                    impl<T: GroupBizService>
                        tonic::server::UnaryService<super::UpdateGroupProfileReq>
                        for UpdateGroupProfileSvc<T>
                    {
                        type Response = ();
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpdateGroupProfileReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as GroupBizService>::update_group_profile(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateGroupProfileSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/grouppb.GroupBizService/DismissGroup" => {
                    #[allow(non_camel_case_types)]
                    struct DismissGroupSvc<T: GroupBizService>(pub Arc<T>);
                    impl<T: GroupBizService> tonic::server::UnaryService<super::DismissGroupReq>
                        for DismissGroupSvc<T>
                    {
                        type Response = ();
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::DismissGroupReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as GroupBizService>::dismiss_group(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DismissGroupSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/grouppb.GroupBizService/JoinGroup" => {
                    #[allow(non_camel_case_types)]
                    struct JoinGroupSvc<T: GroupBizService>(pub Arc<T>);
                    impl<T: GroupBizService> tonic::server::UnaryService<super::JoinGroupReq> for JoinGroupSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::JoinGroupReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as GroupBizService>::join_group(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = JoinGroupSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/grouppb.GroupBizService/LeaveGroup" => {
                    #[allow(non_camel_case_types)]
                    struct LeaveGroupSvc<T: GroupBizService>(pub Arc<T>);
                    impl<T: GroupBizService> tonic::server::UnaryService<super::LeaveGroupReq> for LeaveGroupSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::LeaveGroupReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as GroupBizService>::leave_group(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = LeaveGroupSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/grouppb.GroupBizService/ApproveJoin" => {
                    #[allow(non_camel_case_types)]
                    struct ApproveJoinSvc<T: GroupBizService>(pub Arc<T>);
                    impl<T: GroupBizService> tonic::server::UnaryService<super::ApproveJoinReq> for ApproveJoinSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ApproveJoinReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as GroupBizService>::approve_join(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ApproveJoinSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/grouppb.GroupBizService/InviteMembers" => {
                    #[allow(non_camel_case_types)]
                    struct InviteMembersSvc<T: GroupBizService>(pub Arc<T>);
                    impl<T: GroupBizService> tonic::server::UnaryService<super::InviteMembersReq>
                        for InviteMembersSvc<T>
                    {
                        type Response = ();
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::InviteMembersReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as GroupBizService>::invite_members(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = InviteMembersSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/grouppb.GroupBizService/KickMember" => {
                    #[allow(non_camel_case_types)]
                    struct KickMemberSvc<T: GroupBizService>(pub Arc<T>);
                    impl<T: GroupBizService> tonic::server::UnaryService<super::KickMemberReq> for KickMemberSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::KickMemberReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as GroupBizService>::kick_member(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = KickMemberSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/grouppb.GroupBizService/UpdateMemberAlias" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateMemberAliasSvc<T: GroupBizService>(pub Arc<T>);
                    impl<T: GroupBizService>
                        tonic::server::UnaryService<super::UpdateMemberAliasReq>
                        for UpdateMemberAliasSvc<T>
                    {
                        type Response = ();
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpdateMemberAliasReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as GroupBizService>::update_member_alias(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateMemberAliasSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/grouppb.GroupBizService/ChangeMemberRole" => {
                    #[allow(non_camel_case_types)]
                    struct ChangeMemberRoleSvc<T: GroupBizService>(pub Arc<T>);
                    impl<T: GroupBizService> tonic::server::UnaryService<super::ChangeMemberRoleReq>
                        for ChangeMemberRoleSvc<T>
                    {
                        type Response = ();
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ChangeMemberRoleReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as GroupBizService>::change_member_role(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ChangeMemberRoleSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/grouppb.GroupBizService/GetGroup" => {
                    #[allow(non_camel_case_types)]
                    struct GetGroupSvc<T: GroupBizService>(pub Arc<T>);
                    impl<T: GroupBizService> tonic::server::UnaryService<super::GetGroupReq> for GetGroupSvc<T> {
                        type Response = super::GroupInfo;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetGroupReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as GroupBizService>::get_group(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetGroupSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/grouppb.GroupBizService/GetMembers" => {
                    #[allow(non_camel_case_types)]
                    struct GetMembersSvc<T: GroupBizService>(pub Arc<T>);
                    impl<T: GroupBizService> tonic::server::UnaryService<super::GetMembersReq> for GetMembersSvc<T> {
                        type Response = super::GetMembersResp;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetMembersReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as GroupBizService>::get_members(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetMembersSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/grouppb.GroupBizService/CountMembers" => {
                    #[allow(non_camel_case_types)]
                    struct CountMembersSvc<T: GroupBizService>(pub Arc<T>);
                    impl<T: GroupBizService> tonic::server::UnaryService<super::CountMembersReq>
                        for CountMembersSvc<T>
                    {
                        type Response = super::CountMembersResp;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CountMembersReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as GroupBizService>::count_members(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CountMembersSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/grouppb.GroupBizService/UserGroups" => {
                    #[allow(non_camel_case_types)]
                    struct UserGroupsSvc<T: GroupBizService>(pub Arc<T>);
                    impl<T: GroupBizService> tonic::server::UnaryService<super::UserGroupsReq> for UserGroupsSvc<T> {
                        type Response = super::UserGroupsResp;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UserGroupsReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as GroupBizService>::user_groups(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UserGroupsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => Box::pin(async move {
                    let mut response = http::Response::new(tonic::body::Body::default());
                    let headers = response.headers_mut();
                    headers.insert(
                        tonic::Status::GRPC_STATUS,
                        (tonic::Code::Unimplemented as i32).into(),
                    );
                    headers.insert(
                        http::header::CONTENT_TYPE,
                        tonic::metadata::GRPC_CONTENT_TYPE,
                    );
                    Ok(response)
                }),
            }
        }
    }
    impl<T> Clone for GroupBizServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "grouppb.GroupBizService";
    impl<T> tonic::server::NamedService for GroupBizServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
