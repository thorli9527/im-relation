// This file is @generated by prost-build.
/// 构建注册验证码（手机/邮箱等渠道）。
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BuildRegisterCodeRequest {
    /// 唯一用户名，例如手机号、邮箱或登录名。
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// 注册时提交的明文密码。
    #[prost(string, tag = "2")]
    pub password: ::prost::alloc::string::String,
    /// 注册介质，对应服务层的 `UserRegType` 枚举。
    #[prost(int32, tag = "3")]
    pub reg_type: i32,
    /// 发送目标，如手机号或邮箱地址。
    #[prost(string, tag = "4")]
    pub target: ::prost::alloc::string::String,
}
/// 注册验证码接口返回值。
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BuildRegisterCodeResponse {
    /// 注册流程 ID；当 reg_type=LoginName 时为空。
    #[prost(string, tag = "1")]
    pub reg_id: ::prost::alloc::string::String,
    /// 登录名注册时返回新用户 UID（同步创建路径）。
    #[prost(int64, tag = "2")]
    pub uid: i64,
}
/// 用户输入验证码时提交的参数。
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VerifyRegisterCodeRequest {
    #[prost(string, tag = "1")]
    pub reg_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub code: ::prost::alloc::string::String,
}
/// 验证码校验结果。
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct VerifyRegisterCodeResponse {
    /// 验证是否成功。
    #[prost(bool, tag = "1")]
    pub ok: bool,
}
/// 通用登录请求；`target` 表示登录标识（手机号/邮箱等）。
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LoginRequest {
    /// 登录渠道类型，对应 `UserLogType`。
    #[prost(int32, tag = "1")]
    pub login_type: i32,
    #[prost(string, tag = "2")]
    pub password: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub target: ::prost::alloc::string::String,
    /// 设备类型，对应 hot_online 的 DeviceType 枚举。
    #[prost(int32, tag = "4")]
    pub device_type: i32,
    /// 设备唯一标识，用于多端登录策略。
    #[prost(string, tag = "5")]
    pub device_id: ::prost::alloc::string::String,
}
/// 登录成功后返回的会话信息。
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LoginResponse {
    /// 会话 token，下游服务与 socket 握手使用。
    #[prost(string, tag = "1")]
    pub token: ::prost::alloc::string::String,
    /// token 失效时间（毫秒时间戳）。
    #[prost(uint64, tag = "2")]
    pub expires_at: u64,
    /// 按 arb 哈希得到的 socket 入口地址（host:port）。无节点时为空字符串。
    #[prost(string, tag = "3")]
    pub socket_addr: ::prost::alloc::string::String,
}
/// 验证 session_token 是否有效。
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ValidateSessionTokenRequest {
    #[prost(string, tag = "1")]
    pub session_token: ::prost::alloc::string::String,
}
/// token 验证结果返回值。
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ValidateSessionTokenResponse {
    #[prost(bool, tag = "1")]
    pub ok: bool,
    #[prost(int64, tag = "2")]
    pub user_id: i64,
    /// token 失效时间（毫秒时间戳）。当 ok=false 时为 0。
    #[prost(uint64, tag = "3")]
    pub expires_at: u64,
    /// 若验证成功，返回一个新的 session token。
    #[prost(string, tag = "4")]
    pub token: ::prost::alloc::string::String,
}
/// 使用当前会话修改密码。
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangePasswordRequest {
    #[prost(string, tag = "1")]
    pub session_token: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub old_password: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub new_password: ::prost::alloc::string::String,
}
/// 修改密码操作的反馈。
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChangePasswordResponse {
    #[prost(bool, tag = "1")]
    pub ok: bool,
}
/// 修改绑定手机号；可选旧验证码用于双重验证。
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangePhoneRequest {
    #[prost(string, tag = "1")]
    pub session_token: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub new_phone: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "3")]
    pub old_phone_code: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, tag = "4")]
    pub new_phone_code: ::prost::alloc::string::String,
}
/// 修改手机号操作的反馈。
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangePhoneResponse {
    #[prost(bool, tag = "1")]
    pub ok: bool,
    #[prost(string, tag = "2")]
    pub phone: ::prost::alloc::string::String,
}
/// 修改绑定邮箱。
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangeEmailRequest {
    #[prost(string, tag = "1")]
    pub session_token: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub new_email: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "3")]
    pub old_email_code: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, tag = "4")]
    pub new_email_code: ::prost::alloc::string::String,
}
/// 修改邮箱操作的反馈。
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangeEmailResponse {
    #[prost(bool, tag = "1")]
    pub ok: bool,
    #[prost(string, tag = "2")]
    pub email: ::prost::alloc::string::String,
}
/// 更新基础资料字段。
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateProfileRequest {
    #[prost(string, tag = "1")]
    pub session_token: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "2")]
    pub avatar: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "3")]
    pub gender: ::core::option::Option<i32>,
}
/// 更新资料操作的反馈。
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UpdateProfileResponse {
    #[prost(bool, tag = "1")]
    pub ok: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchUserRequest {
    #[prost(enumeration = "UserSearchType", tag = "1")]
    pub search_type: i32,
    #[prost(string, tag = "2")]
    pub query: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserProfile {
    #[prost(int64, tag = "1")]
    pub user_id: i64,
    #[prost(string, tag = "2")]
    pub username: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub avatar: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "4")]
    pub email: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub phone: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "6")]
    pub signature: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "7")]
    pub region: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(enumeration = "AddFriendPolicy", tag = "8")]
    pub add_friend_policy: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchUserResponse {
    #[prost(message, optional, tag = "1")]
    pub user: ::core::option::Option<UserProfile>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FriendSummary {
    #[prost(int64, tag = "1")]
    pub friend_id: i64,
    #[prost(string, tag = "2")]
    pub nickname: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub avatar: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "4")]
    pub remark: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFriendListRequest {
    #[prost(string, tag = "1")]
    pub session_token: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub page: u32,
    #[prost(uint32, tag = "3")]
    pub page_size: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFriendListResponse {
    #[prost(message, repeated, tag = "1")]
    pub friends: ::prost::alloc::vec::Vec<FriendSummary>,
    #[prost(uint32, tag = "2")]
    pub page: u32,
    #[prost(uint32, tag = "3")]
    pub page_size: u32,
    #[prost(bool, tag = "4")]
    pub has_more: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GroupMemberSummary {
    #[prost(int64, tag = "1")]
    pub group_id: i64,
    #[prost(int64, tag = "2")]
    pub member_id: i64,
    #[prost(string, tag = "3")]
    pub nickname: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub avatar: ::prost::alloc::string::String,
    #[prost(int32, tag = "5")]
    pub role: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetGroupMembersRequest {
    #[prost(string, tag = "1")]
    pub session_token: ::prost::alloc::string::String,
    #[prost(int64, tag = "2")]
    pub group_id: i64,
    #[prost(uint32, tag = "3")]
    pub page: u32,
    #[prost(uint32, tag = "4")]
    pub page_size: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetGroupMembersResponse {
    #[prost(message, repeated, tag = "1")]
    pub members: ::prost::alloc::vec::Vec<GroupMemberSummary>,
    #[prost(uint32, tag = "2")]
    pub page: u32,
    #[prost(uint32, tag = "3")]
    pub page_size: u32,
    #[prost(bool, tag = "4")]
    pub has_more: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetGroupMemberDetailRequest {
    #[prost(string, tag = "1")]
    pub session_token: ::prost::alloc::string::String,
    #[prost(int64, tag = "2")]
    pub group_id: i64,
    #[prost(int64, tag = "3")]
    pub member_id: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetGroupMemberDetailResponse {
    #[prost(message, optional, tag = "1")]
    pub member: ::core::option::Option<GroupMemberSummary>,
    #[prost(bool, tag = "2")]
    pub is_friend: bool,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum UserSearchType {
    UserSearchUnknown = 0,
    UserSearchUserId = 1,
    UserSearchUsername = 2,
    UserSearchEmail = 3,
    UserSearchPhone = 4,
}
impl UserSearchType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::UserSearchUnknown => "USER_SEARCH_UNKNOWN",
            Self::UserSearchUserId => "USER_SEARCH_USER_ID",
            Self::UserSearchUsername => "USER_SEARCH_USERNAME",
            Self::UserSearchEmail => "USER_SEARCH_EMAIL",
            Self::UserSearchPhone => "USER_SEARCH_PHONE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "USER_SEARCH_UNKNOWN" => Some(Self::UserSearchUnknown),
            "USER_SEARCH_USER_ID" => Some(Self::UserSearchUserId),
            "USER_SEARCH_USERNAME" => Some(Self::UserSearchUsername),
            "USER_SEARCH_EMAIL" => Some(Self::UserSearchEmail),
            "USER_SEARCH_PHONE" => Some(Self::UserSearchPhone),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AddFriendPolicy {
    AddFriendUnspecified = 0,
    Anyone = 1,
    RequireVerify = 2,
    PhoneOnly = 3,
}
impl AddFriendPolicy {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::AddFriendUnspecified => "ADD_FRIEND_UNSPECIFIED",
            Self::Anyone => "ANYONE",
            Self::RequireVerify => "REQUIRE_VERIFY",
            Self::PhoneOnly => "PHONE_ONLY",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ADD_FRIEND_UNSPECIFIED" => Some(Self::AddFriendUnspecified),
            "ANYONE" => Some(Self::Anyone),
            "REQUIRE_VERIFY" => Some(Self::RequireVerify),
            "PHONE_ONLY" => Some(Self::PhoneOnly),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod api_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// 对外 API 服务，兼顾注册、登录与账号管理接口。
    #[derive(Debug, Clone)]
    pub struct ApiServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl ApiServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> ApiServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> ApiServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            ApiServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// 生成注册验证码：手机/邮箱注册场景需调用。
        pub async fn build_register_code(
            &mut self,
            request: impl tonic::IntoRequest<super::BuildRegisterCodeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::BuildRegisterCodeResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/api.ApiService/BuildRegisterCode",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("api.ApiService", "BuildRegisterCode"));
            self.inner.unary(req, path, codec).await
        }
        /// 校验注册验证码：用户输入验证码后触发。
        pub async fn verify_register_code(
            &mut self,
            request: impl tonic::IntoRequest<super::VerifyRegisterCodeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::VerifyRegisterCodeResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/api.ApiService/VerifyRegisterCode",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("api.ApiService", "VerifyRegisterCode"));
            self.inner.unary(req, path, codec).await
        }
        /// 执行登录流程：校验账号密码并下发会话信息。
        pub async fn login(
            &mut self,
            request: impl tonic::IntoRequest<super::LoginRequest>,
        ) -> std::result::Result<tonic::Response<super::LoginResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/api.ApiService/Login");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("api.ApiService", "Login"));
            self.inner.unary(req, path, codec).await
        }
        /// 校验 session_token 有效性，并返回关联用户信息。
        pub async fn validate_session_token(
            &mut self,
            request: impl tonic::IntoRequest<super::ValidateSessionTokenRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ValidateSessionTokenResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/api.ApiService/ValidateSessionToken",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("api.ApiService", "ValidateSessionToken"));
            self.inner.unary(req, path, codec).await
        }
        /// 修改当前账号密码。
        pub async fn change_password(
            &mut self,
            request: impl tonic::IntoRequest<super::ChangePasswordRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ChangePasswordResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/api.ApiService/ChangePassword",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("api.ApiService", "ChangePassword"));
            self.inner.unary(req, path, codec).await
        }
        /// 替换绑定手机号。
        pub async fn change_phone(
            &mut self,
            request: impl tonic::IntoRequest<super::ChangePhoneRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ChangePhoneResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/api.ApiService/ChangePhone",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("api.ApiService", "ChangePhone"));
            self.inner.unary(req, path, codec).await
        }
        /// 替换绑定邮箱。
        pub async fn change_email(
            &mut self,
            request: impl tonic::IntoRequest<super::ChangeEmailRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ChangeEmailResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/api.ApiService/ChangeEmail",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("api.ApiService", "ChangeEmail"));
            self.inner.unary(req, path, codec).await
        }
        /// 更新昵称、头像等基础资料。
        pub async fn update_profile(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateProfileRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UpdateProfileResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/api.ApiService/UpdateProfile",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("api.ApiService", "UpdateProfile"));
            self.inner.unary(req, path, codec).await
        }
        /// 获取当前用户好友列表
        pub async fn get_friend_list(
            &mut self,
            request: impl tonic::IntoRequest<super::GetFriendListRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetFriendListResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/api.ApiService/GetFriendList",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("api.ApiService", "GetFriendList"));
            self.inner.unary(req, path, codec).await
        }
        /// 获取指定群的成员列表
        pub async fn get_group_members(
            &mut self,
            request: impl tonic::IntoRequest<super::GetGroupMembersRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetGroupMembersResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/api.ApiService/GetGroupMembers",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("api.ApiService", "GetGroupMembers"));
            self.inner.unary(req, path, codec).await
        }
        /// 获取群成员详情，同时返回是否为好友
        pub async fn get_group_member_detail(
            &mut self,
            request: impl tonic::IntoRequest<super::GetGroupMemberDetailRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetGroupMemberDetailResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/api.ApiService/GetGroupMemberDetail",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("api.ApiService", "GetGroupMemberDetail"));
            self.inner.unary(req, path, codec).await
        }
        /// 搜索单个用户信息
        pub async fn search_user(
            &mut self,
            request: impl tonic::IntoRequest<super::SearchUserRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SearchUserResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/api.ApiService/SearchUser",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("api.ApiService", "SearchUser"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod api_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with ApiServiceServer.
    #[async_trait]
    pub trait ApiService: std::marker::Send + std::marker::Sync + 'static {
        /// 生成注册验证码：手机/邮箱注册场景需调用。
        async fn build_register_code(
            &self,
            request: tonic::Request<super::BuildRegisterCodeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::BuildRegisterCodeResponse>,
            tonic::Status,
        >;
        /// 校验注册验证码：用户输入验证码后触发。
        async fn verify_register_code(
            &self,
            request: tonic::Request<super::VerifyRegisterCodeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::VerifyRegisterCodeResponse>,
            tonic::Status,
        >;
        /// 执行登录流程：校验账号密码并下发会话信息。
        async fn login(
            &self,
            request: tonic::Request<super::LoginRequest>,
        ) -> std::result::Result<tonic::Response<super::LoginResponse>, tonic::Status>;
        /// 校验 session_token 有效性，并返回关联用户信息。
        async fn validate_session_token(
            &self,
            request: tonic::Request<super::ValidateSessionTokenRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ValidateSessionTokenResponse>,
            tonic::Status,
        >;
        /// 修改当前账号密码。
        async fn change_password(
            &self,
            request: tonic::Request<super::ChangePasswordRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ChangePasswordResponse>,
            tonic::Status,
        >;
        /// 替换绑定手机号。
        async fn change_phone(
            &self,
            request: tonic::Request<super::ChangePhoneRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ChangePhoneResponse>,
            tonic::Status,
        >;
        /// 替换绑定邮箱。
        async fn change_email(
            &self,
            request: tonic::Request<super::ChangeEmailRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ChangeEmailResponse>,
            tonic::Status,
        >;
        /// 更新昵称、头像等基础资料。
        async fn update_profile(
            &self,
            request: tonic::Request<super::UpdateProfileRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UpdateProfileResponse>,
            tonic::Status,
        >;
        /// 获取当前用户好友列表
        async fn get_friend_list(
            &self,
            request: tonic::Request<super::GetFriendListRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetFriendListResponse>,
            tonic::Status,
        >;
        /// 获取指定群的成员列表
        async fn get_group_members(
            &self,
            request: tonic::Request<super::GetGroupMembersRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetGroupMembersResponse>,
            tonic::Status,
        >;
        /// 获取群成员详情，同时返回是否为好友
        async fn get_group_member_detail(
            &self,
            request: tonic::Request<super::GetGroupMemberDetailRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetGroupMemberDetailResponse>,
            tonic::Status,
        >;
        /// 搜索单个用户信息
        async fn search_user(
            &self,
            request: tonic::Request<super::SearchUserRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SearchUserResponse>,
            tonic::Status,
        >;
    }
    /// 对外 API 服务，兼顾注册、登录与账号管理接口。
    #[derive(Debug)]
    pub struct ApiServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> ApiServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for ApiServiceServer<T>
    where
        T: ApiService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/api.ApiService/BuildRegisterCode" => {
                    #[allow(non_camel_case_types)]
                    struct BuildRegisterCodeSvc<T: ApiService>(pub Arc<T>);
                    impl<
                        T: ApiService,
                    > tonic::server::UnaryService<super::BuildRegisterCodeRequest>
                    for BuildRegisterCodeSvc<T> {
                        type Response = super::BuildRegisterCodeResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::BuildRegisterCodeRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ApiService>::build_register_code(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = BuildRegisterCodeSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/api.ApiService/VerifyRegisterCode" => {
                    #[allow(non_camel_case_types)]
                    struct VerifyRegisterCodeSvc<T: ApiService>(pub Arc<T>);
                    impl<
                        T: ApiService,
                    > tonic::server::UnaryService<super::VerifyRegisterCodeRequest>
                    for VerifyRegisterCodeSvc<T> {
                        type Response = super::VerifyRegisterCodeResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::VerifyRegisterCodeRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ApiService>::verify_register_code(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = VerifyRegisterCodeSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/api.ApiService/Login" => {
                    #[allow(non_camel_case_types)]
                    struct LoginSvc<T: ApiService>(pub Arc<T>);
                    impl<T: ApiService> tonic::server::UnaryService<super::LoginRequest>
                    for LoginSvc<T> {
                        type Response = super::LoginResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::LoginRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ApiService>::login(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = LoginSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/api.ApiService/ValidateSessionToken" => {
                    #[allow(non_camel_case_types)]
                    struct ValidateSessionTokenSvc<T: ApiService>(pub Arc<T>);
                    impl<
                        T: ApiService,
                    > tonic::server::UnaryService<super::ValidateSessionTokenRequest>
                    for ValidateSessionTokenSvc<T> {
                        type Response = super::ValidateSessionTokenResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ValidateSessionTokenRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ApiService>::validate_session_token(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ValidateSessionTokenSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/api.ApiService/ChangePassword" => {
                    #[allow(non_camel_case_types)]
                    struct ChangePasswordSvc<T: ApiService>(pub Arc<T>);
                    impl<
                        T: ApiService,
                    > tonic::server::UnaryService<super::ChangePasswordRequest>
                    for ChangePasswordSvc<T> {
                        type Response = super::ChangePasswordResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ChangePasswordRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ApiService>::change_password(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ChangePasswordSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/api.ApiService/ChangePhone" => {
                    #[allow(non_camel_case_types)]
                    struct ChangePhoneSvc<T: ApiService>(pub Arc<T>);
                    impl<
                        T: ApiService,
                    > tonic::server::UnaryService<super::ChangePhoneRequest>
                    for ChangePhoneSvc<T> {
                        type Response = super::ChangePhoneResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ChangePhoneRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ApiService>::change_phone(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ChangePhoneSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/api.ApiService/ChangeEmail" => {
                    #[allow(non_camel_case_types)]
                    struct ChangeEmailSvc<T: ApiService>(pub Arc<T>);
                    impl<
                        T: ApiService,
                    > tonic::server::UnaryService<super::ChangeEmailRequest>
                    for ChangeEmailSvc<T> {
                        type Response = super::ChangeEmailResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ChangeEmailRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ApiService>::change_email(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ChangeEmailSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/api.ApiService/UpdateProfile" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateProfileSvc<T: ApiService>(pub Arc<T>);
                    impl<
                        T: ApiService,
                    > tonic::server::UnaryService<super::UpdateProfileRequest>
                    for UpdateProfileSvc<T> {
                        type Response = super::UpdateProfileResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpdateProfileRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ApiService>::update_profile(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateProfileSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/api.ApiService/GetFriendList" => {
                    #[allow(non_camel_case_types)]
                    struct GetFriendListSvc<T: ApiService>(pub Arc<T>);
                    impl<
                        T: ApiService,
                    > tonic::server::UnaryService<super::GetFriendListRequest>
                    for GetFriendListSvc<T> {
                        type Response = super::GetFriendListResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetFriendListRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ApiService>::get_friend_list(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetFriendListSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/api.ApiService/GetGroupMembers" => {
                    #[allow(non_camel_case_types)]
                    struct GetGroupMembersSvc<T: ApiService>(pub Arc<T>);
                    impl<
                        T: ApiService,
                    > tonic::server::UnaryService<super::GetGroupMembersRequest>
                    for GetGroupMembersSvc<T> {
                        type Response = super::GetGroupMembersResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetGroupMembersRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ApiService>::get_group_members(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetGroupMembersSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/api.ApiService/GetGroupMemberDetail" => {
                    #[allow(non_camel_case_types)]
                    struct GetGroupMemberDetailSvc<T: ApiService>(pub Arc<T>);
                    impl<
                        T: ApiService,
                    > tonic::server::UnaryService<super::GetGroupMemberDetailRequest>
                    for GetGroupMemberDetailSvc<T> {
                        type Response = super::GetGroupMemberDetailResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetGroupMemberDetailRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ApiService>::get_group_member_detail(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetGroupMemberDetailSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/api.ApiService/SearchUser" => {
                    #[allow(non_camel_case_types)]
                    struct SearchUserSvc<T: ApiService>(pub Arc<T>);
                    impl<
                        T: ApiService,
                    > tonic::server::UnaryService<super::SearchUserRequest>
                    for SearchUserSvc<T> {
                        type Response = super::SearchUserResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SearchUserRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ApiService>::search_user(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SearchUserSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for ApiServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "api.ApiService";
    impl<T> tonic::server::NamedService for ApiServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
