// This file is @generated by prost-build.
/// ================================
/// 📦 登录
/// ================================
/// 登录请求
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LoginReqMsg {
    /// 当前消息的唯一 ID，用于追踪、ACK 等
    #[prost(int64, tag = "1")]
    pub id: i64,
    /// 登录方式 邮箱或 电话
    #[prost(enumeration = "AuthType", tag = "2")]
    pub auth_type: i32,
    /// 登录内容 邮箱或/电话
    #[prost(string, tag = "3")]
    pub auth_content: ::prost::alloc::string::String,
    /// 密码（明文或加密）
    #[prost(string, tag = "4")]
    pub password: ::prost::alloc::string::String,
    /// 登录设备类型（枚举，如 iOS/Android/Web）
    #[prost(enumeration = "DeviceType", tag = "5")]
    pub device_type: i32,
}
/// ================================
/// 📦 登录返回
/// ================================
/// 登录返回
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LoginRespMsg {
    /// 当前消息的唯一 ID，用于追踪、ACK 等
    #[prost(int64, tag = "1")]
    pub id: i64,
    /// 刷新凭证
    #[prost(string, tag = "2")]
    pub token: ::prost::alloc::string::String,
    /// 过期时间
    #[prost(uint64, tag = "3")]
    pub expires_at: u64,
    /// 是否成功
    #[prost(bool, tag = "4")]
    pub success: bool,
    #[prost(string, tag = "5")]
    pub msg: ::prost::alloc::string::String,
    #[prost(int64, tag = "6")]
    pub uid: i64,
    #[prost(string, tag = "7")]
    pub nickname: ::prost::alloc::string::String,
    #[prost(string, tag = "8")]
    pub avatar: ::prost::alloc::string::String,
}
/// ========================================
///   退出请求
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LogoutReqMsg {
    /// 当前消息的唯一 ID，用于追踪、ACK 等
    #[prost(int64, tag = "1")]
    pub id: i64,
}
/// 退出返回
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LogoutRespMsg {
    #[prost(int64, tag = "1")]
    pub id: i64,
}
/// ========================================
/// 📩 发送验证码请求
/// ========================================
/// 客户端请求发送验证码（短信、邮件等）用于登录或注册
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SendVerificationCodeReqMsg {
    /// 当前消息的唯一 ID，用于追踪、ACK 等
    #[prost(int64, tag = "1")]
    pub id: i64,
    /// 接收目标（手机号或邮箱）：验证码发送的目标
    #[prost(string, tag = "2")]
    pub receiver: ::prost::alloc::string::String,
    /// 渠道类型（如 sms / email / voice）：验证码发送渠道
    #[prost(string, tag = "3")]
    pub channel: ::prost::alloc::string::String,
    /// 场景标识（如 login / register / reset_pwd）：验证码使用场景
    #[prost(string, tag = "4")]
    pub scene: ::prost::alloc::string::String,
    /// 客户端 ID 或设备标识（可用于风控）：请求方标识
    #[prost(int64, tag = "5")]
    pub uid: i64,
}
/// ========================================
/// ✅ 发送验证码响应
/// ========================================
/// 服务端对验证码发送请求的响应
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SendVerificationCodeRepMsg {
    /// 与请求一致的 ID：对应请求的消息ID
    #[prost(int64, tag = "1")]
    pub id: i64,
    /// 是否发送成功：true表示验证码已发送，false表示发送失败
    #[prost(bool, tag = "2")]
    pub success: bool,
    /// 附加消息，如错误提示：详细的响应信息
    #[prost(string, tag = "3")]
    pub message: ::prost::alloc::string::String,
    /// 有效期（秒）：验证码的有效期，单位秒
    #[prost(int64, tag = "4")]
    pub expired_in: i64,
}
/// =======================================
/// 🟢 用户上线消息（OnlineStatus）
/// =======================================
/// 表示某个用户刚刚上线，服务端可用于广播通知。
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct OnlineStatusMsg {
    /// 当前消息的唯一 ID，用于追踪、ACK 等
    #[prost(int64, tag = "1")]
    pub id: i64,
    /// 上线用户 ID：上线用户的唯一标识
    #[prost(int64, tag = "2")]
    pub uid: i64,
    /// 上线设备类型（如 mobile/web/pc）：用户使用的设备类型
    #[prost(enumeration = "DeviceType", tag = "3")]
    pub device_type: i32,
    /// 客户端实例 ID（可用于多端区分）：客户端唯一标识
    #[prost(int64, tag = "4")]
    pub client_id: i64,
    /// 上线时间戳（毫秒）：用户上线的时间
    #[prost(int64, tag = "5")]
    pub login_time: i64,
}
/// =======================================
/// 🔴 用户下线消息（OfflineStatus）
/// =======================================
/// 表示某个用户从某设备下线，服务端可用于状态同步或通知。
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OfflineStatueMsg {
    /// 当前消息的唯一 ID，用于追踪、ACK 等
    #[prost(int64, tag = "1")]
    pub id: i64,
    /// 下线用户 ID：下线用户的唯一标识
    #[prost(string, tag = "2")]
    pub uid: ::prost::alloc::string::String,
    /// 下线设备类型（如 mobile/web/pc）：用户使用的设备类型
    #[prost(enumeration = "DeviceType", tag = "3")]
    pub device_type: i32,
    /// 客户端实例 ID（可用于多端区分）：客户端唯一标识
    #[prost(int64, tag = "4")]
    pub client_id: i64,
    /// 下线时间戳（毫秒）：用户下线的时间
    #[prost(int64, tag = "5")]
    pub logout_time: i64,
    /// 可选：下线原因，如超时、手动退出、被踢等：下线原因说明
    #[prost(string, tag = "6")]
    pub reason: ::prost::alloc::string::String,
}
/// ================================
/// 📦 设备类型枚举
/// ================================
/// 用于标识客户端的来源类型，有助于服务端区分平台特性、限流策略等
#[derive(
    serde::Serialize,
    serde::Deserialize,
    utoipa::ToSchema,
    Clone,
    Copy,
    Debug,
    PartialEq,
    Eq,
    Hash,
    PartialOrd,
    Ord,
    ::prost::Enumeration,
)]
#[repr(i32)]
pub enum DeviceType {
    Unknown = 0,
    Mobile = 1,
    Web = 3,
    Pc = 4,
}
impl DeviceType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown => "UNKNOWN",
            Self::Mobile => "MOBILE",
            Self::Web => "WEB",
            Self::Pc => "PC",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNKNOWN" => Some(Self::Unknown),
            "MOBILE" => Some(Self::Mobile),
            "WEB" => Some(Self::Web),
            "PC" => Some(Self::Pc),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AuthType {
    Unknown = 0,
    Email = 1,
    Phone = 2,
    Username = 3,
}
impl AuthType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown => "AUTH_TYPE_UNKNOWN",
            Self::Email => "AUTH_TYPE_EMAIL",
            Self::Phone => "AUTH_TYPE_PHONE",
            Self::Username => "AUTH_TYPE_USERNAME",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "AUTH_TYPE_UNKNOWN" => Some(Self::Unknown),
            "AUTH_TYPE_EMAIL" => Some(Self::Email),
            "AUTH_TYPE_PHONE" => Some(Self::Phone),
            "AUTH_TYPE_USERNAME" => Some(Self::Username),
            _ => None,
        }
    }
}
