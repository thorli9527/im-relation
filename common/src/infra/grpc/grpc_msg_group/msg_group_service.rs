// This file is @generated by prost-build.
/// -----------------------------------------------------------------------------
/// 成员引用（轻量成员视图）
/// - 在成员列表、事件通知、Socket 推送中广泛使用；
/// - alias 可为空；role 必填；
/// -----------------------------------------------------------------------------
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MemberRef {
    /// 成员用户唯一 ID（必填）
    #[prost(int64, tag = "1")]
    pub id: i64,
    /// 群内别名；缺省或空串表示不设置别名
    #[prost(string, optional, tag = "2")]
    pub alias: ::core::option::Option<::prost::alloc::string::String>,
    /// 角色（OWNER/ADMIN/MEMBER）
    #[prost(enumeration = "GroupRoleType", tag = "3")]
    pub role: i32,
}
/// -----------------------------------------------------------------------------
/// 群信息（对外查询返回）
/// - 所有时间戳单位为毫秒；member_cnt 为近实时统计，可能略有延迟；
/// - allow_search=true 表示允许通过搜索/公开入口被发现；enable=false 视为冻结/不可用；
/// -----------------------------------------------------------------------------
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GroupInfo {
    /// 群 ID（全局唯一）
    #[prost(int64, tag = "1")]
    pub id: i64,
    /// 群名称（1~64 字；服务端需做敏感词/非法字符校验）
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    /// 群头像 URL（建议 https；服务端可代管上传）
    #[prost(string, tag = "3")]
    pub avatar: ::prost::alloc::string::String,
    /// 群简介/描述（0~256 字）
    #[prost(string, tag = "4")]
    pub description: ::prost::alloc::string::String,
    /// 群公告/置顶通知（0~1024 字）
    #[prost(string, tag = "5")]
    pub notice: ::prost::alloc::string::String,
    /// 加群权限（ANYONE/NEED_APPROVAL/INVITE_ONLY/CLOSED）
    #[prost(enumeration = "JoinPermission", tag = "6")]
    pub join_permission: i32,
    /// 群主 UID
    #[prost(int64, tag = "7")]
    pub owner_id: i64,
    /// 群类型（NORMAL/SUPER/SYSTEM）
    #[prost(enumeration = "GroupType", tag = "8")]
    pub group_type: i32,
    /// 是否允许被搜索到（公开属性）
    #[prost(bool, tag = "9")]
    pub allow_search: bool,
    /// 是否启用（false 表示被封禁/冻结）
    #[prost(bool, tag = "10")]
    pub enable: bool,
    /// 创建时间（毫秒）
    #[prost(uint64, tag = "11")]
    pub create_time: u64,
    /// 最近一次资料更新时间（毫秒）
    #[prost(uint64, tag = "12")]
    pub update_time: u64,
    /// 成员数量（近实时）
    #[prost(uint32, tag = "13")]
    pub member_cnt: u32,
}
/// -----------------------------------------------------------------------------
/// 创建群请求
/// - creator_id 必须为当前登录用户；members 不含自己；
/// - name/intro/avatar 存在内容安全与长度限制；
/// - 返回 group_id；建议服务端在创建成功后发送系统欢迎消息（可选）；
/// -----------------------------------------------------------------------------
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateGroupReq {
    /// 群创建者 UID（=调用者）
    #[prost(int64, tag = "1")]
    pub creator_id: i64,
    /// 群名称（1~64 字）
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    /// 初始成员列表（不含 creator_id；长度上限由产品策略决定）
    #[prost(int64, repeated, tag = "3")]
    pub members: ::prost::alloc::vec::Vec<i64>,
    /// 头像 URL（可空）
    #[prost(string, tag = "4")]
    pub avatar: ::prost::alloc::string::String,
    /// 群简介（可空；0~256 字）
    #[prost(string, tag = "5")]
    pub intro: ::prost::alloc::string::String,
}
/// -----------------------------------------------------------------------------
/// 创建群返回
/// -----------------------------------------------------------------------------
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CreateGroupResp {
    /// 新建群的 ID
    #[prost(int64, tag = "1")]
    pub group_id: i64,
}
/// -----------------------------------------------------------------------------
/// 更新群资料
/// - 允许更新 name/avatar/intro；operator_id 必须具备权限（OWNER/ADMIN）；
/// - 空串不代表“清空”，而是“将该字段更新为空串”；如果想“不修改”，请勿下发该字段（proto3 默认空值）；
/// -----------------------------------------------------------------------------
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateGroupProfileReq {
    /// 操作者 UID（=调用者）
    #[prost(int64, tag = "1")]
    pub operator_id: i64,
    /// 目标群 ID
    #[prost(int64, tag = "2")]
    pub group_id: i64,
    /// 新名称（可选；若不修改请勿下发）
    #[prost(string, tag = "3")]
    pub name: ::prost::alloc::string::String,
    /// 新头像（可选）
    #[prost(string, tag = "4")]
    pub avatar: ::prost::alloc::string::String,
    /// 新简介（可选）
    #[prost(string, tag = "5")]
    pub intro: ::prost::alloc::string::String,
}
/// -----------------------------------------------------------------------------
/// 解散群（仅群主）
/// - 解散后应解除所有成员关系，写回执与历史消息保留策略按后端配置；
/// -----------------------------------------------------------------------------
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DismissGroupReq {
    /// 操作者 UID（必须为群主）
    #[prost(int64, tag = "1")]
    pub operator_id: i64,
    /// 目标群 ID
    #[prost(int64, tag = "2")]
    pub group_id: i64,
}
/// -----------------------------------------------------------------------------
/// 加群请求
/// - 支持自主加入或携带邀请信息；
/// - inviter_* 字段仅在被邀请场景下填写；join_time_ms 为客户端触发时间（毫秒）；
/// - extra/join_source 用于业务扩展（如来源渠道、备注等）；
/// -----------------------------------------------------------------------------
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct JoinGroupReq {
    /// 目标群 ID
    #[prost(int64, tag = "1")]
    pub group_id: i64,
    /// 申请人 UID（=调用者）
    #[prost(int64, tag = "2")]
    pub user_id: i64,
    /// 申请附言（可空，0~256 字）
    #[prost(string, tag = "3")]
    pub extra: ::prost::alloc::string::String,
    /// 申请来源（如 qrcode/search/share_link…）
    #[prost(string, tag = "4")]
    pub join_source: ::prost::alloc::string::String,
    /// 邀请人 UID（若为被邀请入群场景）
    #[prost(int64, tag = "5")]
    pub inviter_id: i64,
    /// 邀请附言（可空）
    #[prost(string, tag = "6")]
    pub inviter_extra: ::prost::alloc::string::String,
    /// 邀请来源（如 member_invite/admin_invite）
    #[prost(string, tag = "7")]
    pub inviter_join_source: ::prost::alloc::string::String,
    /// 客户端记录的申请时间（ms；可用于去重/风控）
    #[prost(int64, tag = "8")]
    pub join_time_ms: i64,
}
/// -----------------------------------------------------------------------------
/// 主动退群
/// - user_id 必须等于调用者；群主退群需转让群主或拒绝；
/// -----------------------------------------------------------------------------
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LeaveGroupReq {
    /// 目标群 ID
    #[prost(int64, tag = "1")]
    pub group_id: i64,
    /// 退群用户 UID（=调用者）
    #[prost(int64, tag = "2")]
    pub user_id: i64,
    /// 退群原因（可空；用于审计/画像）
    #[prost(string, tag = "3")]
    pub reason: ::prost::alloc::string::String,
}
/// -----------------------------------------------------------------------------
/// 审批加群
/// - operator_id 必须具备审批权限（OWNER/ADMIN）；accept=true 通过，否则拒绝；
/// - remark 为审批备注；建议写入 Join 审批流水；
/// -----------------------------------------------------------------------------
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApproveJoinReq {
    /// 目标群 ID
    #[prost(int64, tag = "1")]
    pub group_id: i64,
    /// 审批人 UID（=调用者）
    #[prost(int64, tag = "2")]
    pub operator_id: i64,
    /// 申请人 UID
    #[prost(int64, tag = "3")]
    pub applicant_id: i64,
    /// true=通过；false=拒绝
    #[prost(bool, tag = "4")]
    pub accept: bool,
    /// 审批备注（可空）
    #[prost(string, tag = "5")]
    pub remark: ::prost::alloc::string::String,
}
/// -----------------------------------------------------------------------------
/// 邀请成员
/// - operator_id 必须具备邀请权限；invitee_ids 不得包含已在群内的用户（服务端需去重/过滤）；
/// - extra 可记录批次号/来源；
/// -----------------------------------------------------------------------------
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InviteMembersReq {
    /// 目标群 ID
    #[prost(int64, tag = "1")]
    pub group_id: i64,
    /// 邀请发起人 UID（=调用者）
    #[prost(int64, tag = "2")]
    pub operator_id: i64,
    /// 被邀请用户 UID 列表（去重）
    #[prost(int64, repeated, tag = "3")]
    pub invitee_ids: ::prost::alloc::vec::Vec<i64>,
    /// 扩展信息（可空）
    #[prost(string, tag = "4")]
    pub extra: ::prost::alloc::string::String,
}
/// -----------------------------------------------------------------------------
/// 踢出成员
/// - operator_id 必须具备权限；不可踢 OWNER；ADMIN 之间互踢策略按产品定义（通常不允许）；
/// -----------------------------------------------------------------------------
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct KickMemberReq {
    /// 目标群 ID
    #[prost(int64, tag = "1")]
    pub group_id: i64,
    /// 操作者 UID（=调用者）
    #[prost(int64, tag = "2")]
    pub operator_id: i64,
    /// 被移除用户 UID
    #[prost(int64, tag = "3")]
    pub target_id: i64,
    /// 原因（可空；用于审计）
    #[prost(string, tag = "4")]
    pub reason: ::prost::alloc::string::String,
}
/// -----------------------------------------------------------------------------
/// 更新群名片/别名
/// - operator 可更新自己或（ADMIN/OWNER）更新他人别名；空串表示清空；
/// -----------------------------------------------------------------------------
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateMemberAliasReq {
    /// 目标群 ID
    #[prost(int64, tag = "1")]
    pub group_id: i64,
    /// 操作者 UID（=调用者）
    #[prost(int64, tag = "2")]
    pub operator_id: i64,
    /// 目标用户 UID（可=operator_id）
    #[prost(int64, tag = "3")]
    pub target_id: i64,
    /// 新别名；空串表示清空；长度建议 0~32 字
    #[prost(string, tag = "4")]
    pub alias: ::prost::alloc::string::String,
}
/// -----------------------------------------------------------------------------
/// 调整成员角色
/// - 仅群主可调用；不可将自己直接降为 MEMBER 而无人接任 OWNER（需走转让流程）；
/// -----------------------------------------------------------------------------
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChangeMemberRoleReq {
    /// 目标群 ID
    #[prost(int64, tag = "1")]
    pub group_id: i64,
    /// 操作者 UID（必须为群主）
    #[prost(int64, tag = "2")]
    pub operator_id: i64,
    /// 目标成员 UID
    #[prost(int64, tag = "3")]
    pub target_id: i64,
    /// 新角色（ADMIN/MEMBER；OWNER 转让需单独流程或在后端校验）
    #[prost(enumeration = "GroupRoleType", tag = "4")]
    pub role: i32,
}
/// -----------------------------------------------------------------------------
/// 查询群资料
/// - 返回 GroupInfo；若群被冻结/解散，服务端可返回 NOT_FOUND 或 enable=false；
/// -----------------------------------------------------------------------------
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetGroupReq {
    /// 群 ID
    #[prost(int64, tag = "1")]
    pub group_id: i64,
}
/// -----------------------------------------------------------------------------
/// 分页查询群成员
/// - page 从 1 开始；page_size 建议 1..=100；
/// - 返回 MemberRef 列表与可选 total；total 获取可能影响性能，默认不强制计算；
/// -----------------------------------------------------------------------------
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetMembersReq {
    /// 群 ID
    #[prost(int64, tag = "1")]
    pub group_id: i64,
    /// 页码（从 1 开始）
    #[prost(uint32, tag = "2")]
    pub page: u32,
    /// 每页大小（建议 1..=100）
    #[prost(uint32, tag = "3")]
    pub page_size: u32,
}
/// -----------------------------------------------------------------------------
/// 成员分页返回
/// -----------------------------------------------------------------------------
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMembersResp {
    /// 成员轻量视图列表
    #[prost(message, repeated, tag = "1")]
    pub members: ::prost::alloc::vec::Vec<MemberRef>,
    /// 成员总数（可选填充；未填充表示未计算）
    #[prost(uint64, tag = "2")]
    pub total: u64,
}
/// -----------------------------------------------------------------------------
/// 统计成员数量
/// - 返回 count；与 GroupInfo.member_cnt 可能略有差异（强一致 vs 近实时缓存）；
/// -----------------------------------------------------------------------------
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CountMembersReq {
    /// 群 ID
    #[prost(int64, tag = "1")]
    pub group_id: i64,
}
/// -----------------------------------------------------------------------------
/// 成员数量返回
/// -----------------------------------------------------------------------------
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CountMembersResp {
    /// 成员数
    #[prost(uint64, tag = "1")]
    pub count: u64,
}
/// -----------------------------------------------------------------------------
/// 查询用户参与的所有群
/// - 用于“我的群列表”初始化；返回 group_ids（可分页扩展）；
/// -----------------------------------------------------------------------------
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UserGroupsReq {
    /// 用户 UID
    #[prost(int64, tag = "1")]
    pub user_id: i64,
}
/// -----------------------------------------------------------------------------
/// 用户群列表返回
/// -----------------------------------------------------------------------------
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserGroupsResp {
    /// 群 ID 列表
    #[prost(int64, repeated, tag = "1")]
    pub group_ids: ::prost::alloc::vec::Vec<i64>,
}
/// -----------------------------------------------------------------------------
/// 入群申请通知（发给审批人/群主/管理员）
/// - 包含申请/邀请的关键上下文，用于前端渲染审批页；
/// -----------------------------------------------------------------------------
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct JoinRequestNotice {
    /// 目标群 ID
    #[prost(int64, tag = "1")]
    pub group_id: i64,
    /// 群名称快照（避免名称变更引发的前端闪烁）
    #[prost(string, tag = "2")]
    pub group_name: ::prost::alloc::string::String,
    /// 申请人 UID
    #[prost(int64, tag = "3")]
    pub applicant_id: i64,
    /// 申请附言
    #[prost(string, tag = "4")]
    pub extra: ::prost::alloc::string::String,
    /// 申请来源
    #[prost(string, tag = "5")]
    pub join_source: ::prost::alloc::string::String,
    /// 邀请人 UID（若有）
    #[prost(int64, tag = "6")]
    pub inviter_id: i64,
    /// 邀请附言
    #[prost(string, tag = "7")]
    pub inviter_extra: ::prost::alloc::string::String,
    /// 申请时间（毫秒）
    #[prost(int64, tag = "8")]
    pub request_time: i64,
}
/// -----------------------------------------------------------------------------
/// 入群申请处理结果通知（发给申请人/相关管理员）
/// -----------------------------------------------------------------------------
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct JoinRequestHandledNotice {
    /// 目标群 ID
    #[prost(int64, tag = "1")]
    pub group_id: i64,
    /// 申请人 UID
    #[prost(int64, tag = "2")]
    pub applicant_id: i64,
    /// 审批人 UID
    #[prost(int64, tag = "3")]
    pub operator_id: i64,
    /// 审批结果（true=通过 / false=拒绝）
    #[prost(bool, tag = "4")]
    pub accepted: bool,
    /// 审批备注
    #[prost(string, tag = "5")]
    pub remark: ::prost::alloc::string::String,
    /// 审批时间（毫秒）
    #[prost(int64, tag = "6")]
    pub handled_at: i64,
}
/// -----------------------------------------------------------------------------
/// 群成员变更通知（入群/退群/踢人/改角色/改别名等）
/// - reason 示例：auto / approval / invite / kick / leave / role_change / alias_change；
/// -----------------------------------------------------------------------------
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GroupMemberChangeNotice {
    /// 群 ID
    #[prost(int64, tag = "1")]
    pub group_id: i64,
    /// 操作者 UID（系统自动为 0 或特定保留值）
    #[prost(int64, tag = "2")]
    pub operator_id: i64,
    /// 变动成员信息（含 id/alias/role）
    #[prost(message, optional, tag = "3")]
    pub member: ::core::option::Option<MemberRef>,
    /// 业务原因（字符串，便于前端展示与埋点统计）
    #[prost(string, tag = "4")]
    pub reason: ::prost::alloc::string::String,
    /// 事件时间（毫秒）
    #[prost(int64, tag = "5")]
    pub event_time: i64,
}
/// -----------------------------------------------------------------------------
/// 群成员角色类型（与数据库/内存中的角色编码严格对齐）
/// - 角色决定可执行的管理操作范围（审批、邀请、踢人、改别名、改角色等）；
/// - 角色升级/降级需满足业务约束（仅群主可设为 ADMIN/转让 OWNER）；
/// -----------------------------------------------------------------------------
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum GroupRoleType {
    /// 群主（最高权限；可解散群、转让群主、设/撤管理员、踢人）
    Owner = 0,
    /// 管理员（可审批、邀请、踢人；不可解散群、不可转让群主）
    Admin = 1,
    /// 普通成员（仅参与聊天、可退群、可更新自己的别名）
    Member = 2,
}
impl GroupRoleType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Owner => "OWNER",
            Self::Admin => "ADMIN",
            Self::Member => "MEMBER",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "OWNER" => Some(Self::Owner),
            "ADMIN" => Some(Self::Admin),
            "MEMBER" => Some(Self::Member),
            _ => None,
        }
    }
}
/// -----------------------------------------------------------------------------
/// 加群权限控制
/// - 用于 GetGroup 查询与前端入群入口显隐；
/// - 修改该配置应触发缓存刷新与事件通知（可选）；
/// -----------------------------------------------------------------------------
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum JoinPermission {
    /// 任何人可直接加入（不走审批流）
    Anyone = 0,
    /// 申请后需群主或管理员审批
    NeedApproval = 1,
    /// 仅允许邀请加入（成员/管理员发起邀请）
    InviteOnly = 2,
    /// 完全关闭加入能力（仅保留当前成员）
    Closed = 3,
}
impl JoinPermission {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Anyone => "ANYONE",
            Self::NeedApproval => "NEED_APPROVAL",
            Self::InviteOnly => "INVITE_ONLY",
            Self::Closed => "CLOSED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ANYONE" => Some(Self::Anyone),
            "NEED_APPROVAL" => Some(Self::NeedApproval),
            "INVITE_ONLY" => Some(Self::InviteOnly),
            "CLOSED" => Some(Self::Closed),
            _ => None,
        }
    }
}
/// -----------------------------------------------------------------------------
/// 群组类型
/// - NORMAL：常规上限；SUPER：更高人数上限/特殊路由；SYSTEM：系统内置（公告/客服）；
/// - 不同类型在服务端可能走不同配额/限流策略；
/// -----------------------------------------------------------------------------
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum GroupType {
    /// 未知（保底值；不应在正常业务流出现）
    UnknownGroupType = 0,
    /// 普通群组
    NormalGroup = 1,
    /// 超级群组（高并发/高上限）
    SuperGroup = 2,
    /// 系统群组（内置用途，不对外创建）
    SystemGroup = 3,
}
impl GroupType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::UnknownGroupType => "UNKNOWN_GROUP_TYPE",
            Self::NormalGroup => "NORMAL_GROUP",
            Self::SuperGroup => "SUPER_GROUP",
            Self::SystemGroup => "SYSTEM_GROUP",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNKNOWN_GROUP_TYPE" => Some(Self::UnknownGroupType),
            "NORMAL_GROUP" => Some(Self::NormalGroup),
            "SUPER_GROUP" => Some(Self::SuperGroup),
            "SYSTEM_GROUP" => Some(Self::SystemGroup),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod group_biz_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value
    )]
    use tonic::codegen::http::Uri;
    use tonic::codegen::*;
    /// -----------------------------------------------------------------------------
    /// 群业务编排服务（Biz）
    /// - 所有写操作需鉴权与权限校验；返回 Empty 表示仅代表“受理成功”或“无返回体”的成功；
    /// - 失败返回标准 gRPC 错误码（如 INVALID_ARGUMENT / PERMISSION_DENIED / NOT_FOUND / ALREADY_EXISTS）；
    /// -----------------------------------------------------------------------------
    #[derive(Debug, Clone)]
    pub struct GroupBizServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl GroupBizServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> GroupBizServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> GroupBizServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<http::Request<tonic::body::Body>>>::Error:
                Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            GroupBizServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// 创建群（幂等：可用 creator_id+name+时间窗 去重）
        pub async fn create_group(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateGroupReq>,
        ) -> std::result::Result<tonic::Response<super::CreateGroupResp>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/msg_group_service.GroupBizService/CreateGroup",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "msg_group_service.GroupBizService",
                "CreateGroup",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// 更新群资料（需 OWNER/ADMIN 权限）
        pub async fn update_group_profile(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateGroupProfileReq>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/msg_group_service.GroupBizService/UpdateGroupProfile",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "msg_group_service.GroupBizService",
                "UpdateGroupProfile",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// 解散群（仅群主；解散后不可恢复）
        pub async fn dismiss_group(
            &mut self,
            request: impl tonic::IntoRequest<super::DismissGroupReq>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/msg_group_service.GroupBizService/DismissGroup",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "msg_group_service.GroupBizService",
                "DismissGroup",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// 申请/邀请入群（根据 JoinPermission 与 inviter_* 分支处理）
        pub async fn join_group(
            &mut self,
            request: impl tonic::IntoRequest<super::JoinGroupReq>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/msg_group_service.GroupBizService/JoinGroup",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "msg_group_service.GroupBizService",
                "JoinGroup",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// 主动退群（群主需先转让）
        pub async fn leave_group(
            &mut self,
            request: impl tonic::IntoRequest<super::LeaveGroupReq>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/msg_group_service.GroupBizService/LeaveGroup",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "msg_group_service.GroupBizService",
                "LeaveGroup",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// 审批入群（OWNER/ADMIN）
        pub async fn approve_join(
            &mut self,
            request: impl tonic::IntoRequest<super::ApproveJoinReq>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/msg_group_service.GroupBizService/ApproveJoin",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "msg_group_service.GroupBizService",
                "ApproveJoin",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// 邀请成员（OWNER/ADMIN，或成员在 INVITE_ONLY 策略下具备的邀请权）
        pub async fn invite_members(
            &mut self,
            request: impl tonic::IntoRequest<super::InviteMembersReq>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/msg_group_service.GroupBizService/InviteMembers",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "msg_group_service.GroupBizService",
                "InviteMembers",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// 踢出成员（OWNER/ADMIN）
        pub async fn kick_member(
            &mut self,
            request: impl tonic::IntoRequest<super::KickMemberReq>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/msg_group_service.GroupBizService/KickMember",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "msg_group_service.GroupBizService",
                "KickMember",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// 更新群内别名（自改或管理员改）
        pub async fn update_member_alias(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateMemberAliasReq>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/msg_group_service.GroupBizService/UpdateMemberAlias",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "msg_group_service.GroupBizService",
                "UpdateMemberAlias",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// 调整角色（仅群主；升级/降级）
        pub async fn change_member_role(
            &mut self,
            request: impl tonic::IntoRequest<super::ChangeMemberRoleReq>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/msg_group_service.GroupBizService/ChangeMemberRole",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "msg_group_service.GroupBizService",
                "ChangeMemberRole",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// 查询群资料（含成员数、权限等）
        pub async fn get_group(
            &mut self,
            request: impl tonic::IntoRequest<super::GetGroupReq>,
        ) -> std::result::Result<tonic::Response<super::GroupInfo>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path =
                http::uri::PathAndQuery::from_static("/msg_group_service.GroupBizService/GetGroup");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "msg_group_service.GroupBizService",
                "GetGroup",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// 分页查询群成员（轻量列表）
        pub async fn get_members(
            &mut self,
            request: impl tonic::IntoRequest<super::GetMembersReq>,
        ) -> std::result::Result<tonic::Response<super::GetMembersResp>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/msg_group_service.GroupBizService/GetMembers",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "msg_group_service.GroupBizService",
                "GetMembers",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// 成员数量统计（强一致/准实时，取决于实现）
        pub async fn count_members(
            &mut self,
            request: impl tonic::IntoRequest<super::CountMembersReq>,
        ) -> std::result::Result<tonic::Response<super::CountMembersResp>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/msg_group_service.GroupBizService/CountMembers",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "msg_group_service.GroupBizService",
                "CountMembers",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// 查询用户参与的群 ID 列表
        pub async fn user_groups(
            &mut self,
            request: impl tonic::IntoRequest<super::UserGroupsReq>,
        ) -> std::result::Result<tonic::Response<super::UserGroupsResp>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/msg_group_service.GroupBizService/UserGroups",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "msg_group_service.GroupBizService",
                "UserGroups",
            ));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated client implementations.
pub mod group_msg_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value
    )]
    use tonic::codegen::http::Uri;
    use tonic::codegen::*;
    /// -----------------------------------------------------------------------------
    /// 群消息服务（Msg）
    /// - SendMessage 仅负责写入/透传 socket；服务端应追加服务端时间与顺序号；
    /// - 回执接口用于可靠送达/已读链路，便于状态回放与多端同步；
    /// -----------------------------------------------------------------------------
    #[derive(Debug, Clone)]
    pub struct GroupMsgServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl GroupMsgServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> GroupMsgServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> GroupMsgServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<http::Request<tonic::body::Body>>>::Error:
                Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            GroupMsgServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// 发送群消息（幂等：建议按 sender_id + client_msg_id/message_id 去重）
        pub async fn send_message(
            &mut self,
            request: impl tonic::IntoRequest<crate::infra::grpc::message::Content>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/msg_group_service.GroupMsgService/SendMessage",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "msg_group_service.GroupMsgService",
                "SendMessage",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// 上报已读（用户读到某消息，服务端可折叠成“读到 N”）
        pub async fn report_msg_read(
            &mut self,
            request: impl tonic::IntoRequest<crate::infra::grpc::message::MsgRead>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/msg_group_service.GroupMsgService/ReportMsgRead",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "msg_group_service.GroupMsgService",
                "ReportMsgRead",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// 已送达回执（网络层/客户端确认）
        pub async fn ack_msg_delivered(
            &mut self,
            request: impl tonic::IntoRequest<crate::infra::grpc::message::MsgDeliveredAck>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/msg_group_service.GroupMsgService/AckMsgDelivered",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "msg_group_service.GroupMsgService",
                "AckMsgDelivered",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// 已读回执确认（对已读的二次确认，用于多端同步）
        pub async fn ack_msg_read(
            &mut self,
            request: impl tonic::IntoRequest<crate::infra::grpc::message::MsgReadAck>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/msg_group_service.GroupMsgService/AckMsgRead",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "msg_group_service.GroupMsgService",
                "AckMsgRead",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// 撤回消息（权限校验）
        pub async fn recall_msg(
            &mut self,
            request: impl tonic::IntoRequest<crate::infra::grpc::message::MsgRecall>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/msg_group_service.GroupMsgService/RecallMsg",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "msg_group_service.GroupMsgService",
                "RecallMsg",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// 转发消息（可能跨会话/跨群）
        pub async fn forward_msg(
            &mut self,
            request: impl tonic::IntoRequest<crate::infra::grpc::message::MsgForward>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/msg_group_service.GroupMsgService/ForwardMsg",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "msg_group_service.GroupMsgService",
                "ForwardMsg",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// 分页查询群聊历史消息
        pub async fn list_group_messages(
            &mut self,
            request: impl tonic::IntoRequest<crate::infra::grpc::message::QueryGroupMessagesRequest>,
        ) -> std::result::Result<
            tonic::Response<crate::infra::grpc::message::QueryMessagesResponse>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/msg_group_service.GroupMsgService/ListGroupMessages",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "msg_group_service.GroupMsgService",
                "ListGroupMessages",
            ));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod group_biz_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with GroupBizServiceServer.
    #[async_trait]
    pub trait GroupBizService: std::marker::Send + std::marker::Sync + 'static {
        /// 创建群（幂等：可用 creator_id+name+时间窗 去重）
        async fn create_group(
            &self,
            request: tonic::Request<super::CreateGroupReq>,
        ) -> std::result::Result<tonic::Response<super::CreateGroupResp>, tonic::Status>;
        /// 更新群资料（需 OWNER/ADMIN 权限）
        async fn update_group_profile(
            &self,
            request: tonic::Request<super::UpdateGroupProfileReq>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        /// 解散群（仅群主；解散后不可恢复）
        async fn dismiss_group(
            &self,
            request: tonic::Request<super::DismissGroupReq>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        /// 申请/邀请入群（根据 JoinPermission 与 inviter_* 分支处理）
        async fn join_group(
            &self,
            request: tonic::Request<super::JoinGroupReq>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        /// 主动退群（群主需先转让）
        async fn leave_group(
            &self,
            request: tonic::Request<super::LeaveGroupReq>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        /// 审批入群（OWNER/ADMIN）
        async fn approve_join(
            &self,
            request: tonic::Request<super::ApproveJoinReq>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        /// 邀请成员（OWNER/ADMIN，或成员在 INVITE_ONLY 策略下具备的邀请权）
        async fn invite_members(
            &self,
            request: tonic::Request<super::InviteMembersReq>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        /// 踢出成员（OWNER/ADMIN）
        async fn kick_member(
            &self,
            request: tonic::Request<super::KickMemberReq>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        /// 更新群内别名（自改或管理员改）
        async fn update_member_alias(
            &self,
            request: tonic::Request<super::UpdateMemberAliasReq>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        /// 调整角色（仅群主；升级/降级）
        async fn change_member_role(
            &self,
            request: tonic::Request<super::ChangeMemberRoleReq>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        /// 查询群资料（含成员数、权限等）
        async fn get_group(
            &self,
            request: tonic::Request<super::GetGroupReq>,
        ) -> std::result::Result<tonic::Response<super::GroupInfo>, tonic::Status>;
        /// 分页查询群成员（轻量列表）
        async fn get_members(
            &self,
            request: tonic::Request<super::GetMembersReq>,
        ) -> std::result::Result<tonic::Response<super::GetMembersResp>, tonic::Status>;
        /// 成员数量统计（强一致/准实时，取决于实现）
        async fn count_members(
            &self,
            request: tonic::Request<super::CountMembersReq>,
        ) -> std::result::Result<tonic::Response<super::CountMembersResp>, tonic::Status>;
        /// 查询用户参与的群 ID 列表
        async fn user_groups(
            &self,
            request: tonic::Request<super::UserGroupsReq>,
        ) -> std::result::Result<tonic::Response<super::UserGroupsResp>, tonic::Status>;
    }
    /// -----------------------------------------------------------------------------
    /// 群业务编排服务（Biz）
    /// - 所有写操作需鉴权与权限校验；返回 Empty 表示仅代表“受理成功”或“无返回体”的成功；
    /// - 失败返回标准 gRPC 错误码（如 INVALID_ARGUMENT / PERMISSION_DENIED / NOT_FOUND / ALREADY_EXISTS）；
    /// -----------------------------------------------------------------------------
    #[derive(Debug)]
    pub struct GroupBizServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> GroupBizServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(inner: T, interceptor: F) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for GroupBizServiceServer<T>
    where
        T: GroupBizService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/msg_group_service.GroupBizService/CreateGroup" => {
                    #[allow(non_camel_case_types)]
                    struct CreateGroupSvc<T: GroupBizService>(pub Arc<T>);
                    impl<T: GroupBizService> tonic::server::UnaryService<super::CreateGroupReq> for CreateGroupSvc<T> {
                        type Response = super::CreateGroupResp;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateGroupReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as GroupBizService>::create_group(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateGroupSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/msg_group_service.GroupBizService/UpdateGroupProfile" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateGroupProfileSvc<T: GroupBizService>(pub Arc<T>);
                    impl<T: GroupBizService>
                        tonic::server::UnaryService<super::UpdateGroupProfileReq>
                        for UpdateGroupProfileSvc<T>
                    {
                        type Response = ();
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpdateGroupProfileReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as GroupBizService>::update_group_profile(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateGroupProfileSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/msg_group_service.GroupBizService/DismissGroup" => {
                    #[allow(non_camel_case_types)]
                    struct DismissGroupSvc<T: GroupBizService>(pub Arc<T>);
                    impl<T: GroupBizService> tonic::server::UnaryService<super::DismissGroupReq>
                        for DismissGroupSvc<T>
                    {
                        type Response = ();
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::DismissGroupReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as GroupBizService>::dismiss_group(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DismissGroupSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/msg_group_service.GroupBizService/JoinGroup" => {
                    #[allow(non_camel_case_types)]
                    struct JoinGroupSvc<T: GroupBizService>(pub Arc<T>);
                    impl<T: GroupBizService> tonic::server::UnaryService<super::JoinGroupReq> for JoinGroupSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::JoinGroupReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as GroupBizService>::join_group(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = JoinGroupSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/msg_group_service.GroupBizService/LeaveGroup" => {
                    #[allow(non_camel_case_types)]
                    struct LeaveGroupSvc<T: GroupBizService>(pub Arc<T>);
                    impl<T: GroupBizService> tonic::server::UnaryService<super::LeaveGroupReq> for LeaveGroupSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::LeaveGroupReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as GroupBizService>::leave_group(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = LeaveGroupSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/msg_group_service.GroupBizService/ApproveJoin" => {
                    #[allow(non_camel_case_types)]
                    struct ApproveJoinSvc<T: GroupBizService>(pub Arc<T>);
                    impl<T: GroupBizService> tonic::server::UnaryService<super::ApproveJoinReq> for ApproveJoinSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ApproveJoinReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as GroupBizService>::approve_join(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ApproveJoinSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/msg_group_service.GroupBizService/InviteMembers" => {
                    #[allow(non_camel_case_types)]
                    struct InviteMembersSvc<T: GroupBizService>(pub Arc<T>);
                    impl<T: GroupBizService> tonic::server::UnaryService<super::InviteMembersReq>
                        for InviteMembersSvc<T>
                    {
                        type Response = ();
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::InviteMembersReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as GroupBizService>::invite_members(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = InviteMembersSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/msg_group_service.GroupBizService/KickMember" => {
                    #[allow(non_camel_case_types)]
                    struct KickMemberSvc<T: GroupBizService>(pub Arc<T>);
                    impl<T: GroupBizService> tonic::server::UnaryService<super::KickMemberReq> for KickMemberSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::KickMemberReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as GroupBizService>::kick_member(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = KickMemberSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/msg_group_service.GroupBizService/UpdateMemberAlias" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateMemberAliasSvc<T: GroupBizService>(pub Arc<T>);
                    impl<T: GroupBizService>
                        tonic::server::UnaryService<super::UpdateMemberAliasReq>
                        for UpdateMemberAliasSvc<T>
                    {
                        type Response = ();
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpdateMemberAliasReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as GroupBizService>::update_member_alias(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateMemberAliasSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/msg_group_service.GroupBizService/ChangeMemberRole" => {
                    #[allow(non_camel_case_types)]
                    struct ChangeMemberRoleSvc<T: GroupBizService>(pub Arc<T>);
                    impl<T: GroupBizService> tonic::server::UnaryService<super::ChangeMemberRoleReq>
                        for ChangeMemberRoleSvc<T>
                    {
                        type Response = ();
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ChangeMemberRoleReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as GroupBizService>::change_member_role(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ChangeMemberRoleSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/msg_group_service.GroupBizService/GetGroup" => {
                    #[allow(non_camel_case_types)]
                    struct GetGroupSvc<T: GroupBizService>(pub Arc<T>);
                    impl<T: GroupBizService> tonic::server::UnaryService<super::GetGroupReq> for GetGroupSvc<T> {
                        type Response = super::GroupInfo;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetGroupReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as GroupBizService>::get_group(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetGroupSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/msg_group_service.GroupBizService/GetMembers" => {
                    #[allow(non_camel_case_types)]
                    struct GetMembersSvc<T: GroupBizService>(pub Arc<T>);
                    impl<T: GroupBizService> tonic::server::UnaryService<super::GetMembersReq> for GetMembersSvc<T> {
                        type Response = super::GetMembersResp;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetMembersReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as GroupBizService>::get_members(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetMembersSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/msg_group_service.GroupBizService/CountMembers" => {
                    #[allow(non_camel_case_types)]
                    struct CountMembersSvc<T: GroupBizService>(pub Arc<T>);
                    impl<T: GroupBizService> tonic::server::UnaryService<super::CountMembersReq>
                        for CountMembersSvc<T>
                    {
                        type Response = super::CountMembersResp;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CountMembersReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as GroupBizService>::count_members(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CountMembersSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/msg_group_service.GroupBizService/UserGroups" => {
                    #[allow(non_camel_case_types)]
                    struct UserGroupsSvc<T: GroupBizService>(pub Arc<T>);
                    impl<T: GroupBizService> tonic::server::UnaryService<super::UserGroupsReq> for UserGroupsSvc<T> {
                        type Response = super::UserGroupsResp;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UserGroupsReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as GroupBizService>::user_groups(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UserGroupsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => Box::pin(async move {
                    let mut response = http::Response::new(tonic::body::Body::default());
                    let headers = response.headers_mut();
                    headers.insert(
                        tonic::Status::GRPC_STATUS,
                        (tonic::Code::Unimplemented as i32).into(),
                    );
                    headers.insert(
                        http::header::CONTENT_TYPE,
                        tonic::metadata::GRPC_CONTENT_TYPE,
                    );
                    Ok(response)
                }),
            }
        }
    }
    impl<T> Clone for GroupBizServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "msg_group_service.GroupBizService";
    impl<T> tonic::server::NamedService for GroupBizServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
/// Generated server implementations.
pub mod group_msg_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with GroupMsgServiceServer.
    #[async_trait]
    pub trait GroupMsgService: std::marker::Send + std::marker::Sync + 'static {
        /// 发送群消息（幂等：建议按 sender_id + client_msg_id/message_id 去重）
        async fn send_message(
            &self,
            request: tonic::Request<crate::infra::grpc::message::Content>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        /// 上报已读（用户读到某消息，服务端可折叠成“读到 N”）
        async fn report_msg_read(
            &self,
            request: tonic::Request<crate::infra::grpc::message::MsgRead>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        /// 已送达回执（网络层/客户端确认）
        async fn ack_msg_delivered(
            &self,
            request: tonic::Request<crate::infra::grpc::message::MsgDeliveredAck>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        /// 已读回执确认（对已读的二次确认，用于多端同步）
        async fn ack_msg_read(
            &self,
            request: tonic::Request<crate::infra::grpc::message::MsgReadAck>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        /// 撤回消息（权限校验）
        async fn recall_msg(
            &self,
            request: tonic::Request<crate::infra::grpc::message::MsgRecall>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        /// 转发消息（可能跨会话/跨群）
        async fn forward_msg(
            &self,
            request: tonic::Request<crate::infra::grpc::message::MsgForward>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        /// 分页查询群聊历史消息
        async fn list_group_messages(
            &self,
            request: tonic::Request<crate::infra::grpc::message::QueryGroupMessagesRequest>,
        ) -> std::result::Result<
            tonic::Response<crate::infra::grpc::message::QueryMessagesResponse>,
            tonic::Status,
        >;
    }
    /// -----------------------------------------------------------------------------
    /// 群消息服务（Msg）
    /// - SendMessage 仅负责写入/透传 socket；服务端应追加服务端时间与顺序号；
    /// - 回执接口用于可靠送达/已读链路，便于状态回放与多端同步；
    /// -----------------------------------------------------------------------------
    #[derive(Debug)]
    pub struct GroupMsgServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> GroupMsgServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(inner: T, interceptor: F) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for GroupMsgServiceServer<T>
    where
        T: GroupMsgService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/msg_group_service.GroupMsgService/SendMessage" => {
                    #[allow(non_camel_case_types)]
                    struct SendMessageSvc<T: GroupMsgService>(pub Arc<T>);
                    impl<T: GroupMsgService>
                        tonic::server::UnaryService<crate::infra::grpc::message::Content>
                        for SendMessageSvc<T>
                    {
                        type Response = ();
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<crate::infra::grpc::message::Content>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as GroupMsgService>::send_message(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SendMessageSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/msg_group_service.GroupMsgService/ReportMsgRead" => {
                    #[allow(non_camel_case_types)]
                    struct ReportMsgReadSvc<T: GroupMsgService>(pub Arc<T>);
                    impl<T: GroupMsgService>
                        tonic::server::UnaryService<crate::infra::grpc::message::MsgRead>
                        for ReportMsgReadSvc<T>
                    {
                        type Response = ();
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<crate::infra::grpc::message::MsgRead>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as GroupMsgService>::report_msg_read(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ReportMsgReadSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/msg_group_service.GroupMsgService/AckMsgDelivered" => {
                    #[allow(non_camel_case_types)]
                    struct AckMsgDeliveredSvc<T: GroupMsgService>(pub Arc<T>);
                    impl<T: GroupMsgService>
                        tonic::server::UnaryService<crate::infra::grpc::message::MsgDeliveredAck>
                        for AckMsgDeliveredSvc<T>
                    {
                        type Response = ();
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<crate::infra::grpc::message::MsgDeliveredAck>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as GroupMsgService>::ack_msg_delivered(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = AckMsgDeliveredSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/msg_group_service.GroupMsgService/AckMsgRead" => {
                    #[allow(non_camel_case_types)]
                    struct AckMsgReadSvc<T: GroupMsgService>(pub Arc<T>);
                    impl<T: GroupMsgService>
                        tonic::server::UnaryService<crate::infra::grpc::message::MsgReadAck>
                        for AckMsgReadSvc<T>
                    {
                        type Response = ();
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<crate::infra::grpc::message::MsgReadAck>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as GroupMsgService>::ack_msg_read(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = AckMsgReadSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/msg_group_service.GroupMsgService/RecallMsg" => {
                    #[allow(non_camel_case_types)]
                    struct RecallMsgSvc<T: GroupMsgService>(pub Arc<T>);
                    impl<T: GroupMsgService>
                        tonic::server::UnaryService<crate::infra::grpc::message::MsgRecall>
                        for RecallMsgSvc<T>
                    {
                        type Response = ();
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<crate::infra::grpc::message::MsgRecall>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as GroupMsgService>::recall_msg(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RecallMsgSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/msg_group_service.GroupMsgService/ForwardMsg" => {
                    #[allow(non_camel_case_types)]
                    struct ForwardMsgSvc<T: GroupMsgService>(pub Arc<T>);
                    impl<T: GroupMsgService>
                        tonic::server::UnaryService<crate::infra::grpc::message::MsgForward>
                        for ForwardMsgSvc<T>
                    {
                        type Response = ();
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<crate::infra::grpc::message::MsgForward>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as GroupMsgService>::forward_msg(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ForwardMsgSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/msg_group_service.GroupMsgService/ListGroupMessages" => {
                    #[allow(non_camel_case_types)]
                    struct ListGroupMessagesSvc<T: GroupMsgService>(pub Arc<T>);
                    impl<T: GroupMsgService>
                        tonic::server::UnaryService<
                            crate::infra::grpc::message::QueryGroupMessagesRequest,
                        > for ListGroupMessagesSvc<T>
                    {
                        type Response = crate::infra::grpc::message::QueryMessagesResponse;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                crate::infra::grpc::message::QueryGroupMessagesRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as GroupMsgService>::list_group_messages(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ListGroupMessagesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => Box::pin(async move {
                    let mut response = http::Response::new(tonic::body::Body::default());
                    let headers = response.headers_mut();
                    headers.insert(
                        tonic::Status::GRPC_STATUS,
                        (tonic::Code::Unimplemented as i32).into(),
                    );
                    headers.insert(
                        http::header::CONTENT_TYPE,
                        tonic::metadata::GRPC_CONTENT_TYPE,
                    );
                    Ok(response)
                }),
            }
        }
    }
    impl<T> Clone for GroupMsgServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "msg_group_service.GroupMsgService";
    impl<T> tonic::server::NamedService for GroupMsgServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
