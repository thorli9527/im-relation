// This file is @generated by prost-build.
/// 客户端握手请求：连接建立后首帧
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct AuthMsg {
    /// 用户唯一 ID（由服务端体系分配）
    #[prost(int64, tag = "1")]
    pub user_id: i64,
    /// 设备类型（枚举）
    #[prost(enumeration = "DeviceType", tag = "2")]
    pub device_type: i32,
    /// 设备标识（业务自定义，如设备号、推送 token 等）
    #[prost(string, tag = "3")]
    pub device_id: ::prost::alloc::string::String,
    /// 鉴权令牌（JWT/opaque），用于绑定 user_id 校验
    #[prost(string, tag = "4")]
    pub token: ::prost::alloc::string::String,
    /// 客户端时间戳（毫秒），用于时钟漂移/重放保护
    #[prost(int64, tag = "5")]
    pub ts_ms: i64,
    /// 随机数，结合签名防重放
    #[prost(bytes = "vec", tag = "6")]
    pub nonce: ::prost::alloc::vec::Vec<u8>,
    /// 对关键字段的签名/HMAC（例如 HMAC(key, user_id|device_id|ts|nonce|token) ）
    #[prost(bytes = "vec", tag = "7")]
    pub signature: ::prost::alloc::vec::Vec<u8>,
    /// 是否尝试恢复会话（断线重连）
    #[prost(bool, tag = "8")]
    pub resume: bool,
    /// 客户端已确认的最后一条消息 ID（用于快速补发）
    #[prost(int64, tag = "9")]
    pub last_ack_id: i64,
    /// 能力协商：是否支持端到端加密（仅占位，不影响现有流程）
    #[prost(bool, tag = "10")]
    pub supports_encryption: bool,
    /// 支持的加密方案（如 "x25519+chacha20poly1305"）
    #[prost(string, repeated, tag = "11")]
    pub encryption_schemes: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// 客户端上行消息（含 ACK）
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ClientMsg {
    /// 若存在，表示对服务端某条 id 的确认
    #[prost(int64, optional, tag = "1")]
    pub ack: ::core::option::Option<i64>,
    /// 业务类型（枚举）
    #[prost(enumeration = "MsgKind", tag = "2")]
    pub kind: i32,
    /// 二进制负载（建议为具体业务的 Protobuf）
    #[prost(bytes = "vec", tag = "3")]
    pub payload: ::prost::alloc::vec::Vec<u8>,
    /// 客户端上行幂等ID（用于去重/重试对账），不参与 ACK 语义
    #[prost(int64, optional, tag = "5")]
    pub client_id: ::core::option::Option<i64>,
}
/// 服务端下行消息（投递给客户端）
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ServerMsg {
    /// 消息唯一 ID（用于客户端 ACK 对齐）
    #[prost(int64, tag = "1")]
    pub id: i64,
    /// 业务类型（枚举）
    #[prost(enumeration = "MsgKind", tag = "2")]
    pub kind: i32,
    /// 二进制负载（建议为具体业务的 Protobuf）
    #[prost(bytes = "vec", tag = "3")]
    pub payload: ::prost::alloc::vec::Vec<u8>,
    /// 业务时间戳（毫秒）
    #[prost(int64, tag = "4")]
    pub ts_ms: i64,
}
/// Kafka 投递消息（生产者 → socket 分发）
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct KafkaMsg {
    /// 目标用户 ID
    #[prost(int64, tag = "1")]
    pub to: i64,
    /// 消息唯一 ID（可选；缺省由消费者在接收处生成）
    #[prost(int64, optional, tag = "2")]
    pub id: ::core::option::Option<i64>,
    /// 业务类型（枚举）
    #[prost(enumeration = "MsgKind", tag = "3")]
    pub kind: i32,
    /// 二进制负载（建议为具体业务的 Protobuf）
    #[prost(bytes = "vec", tag = "4")]
    pub payload: ::prost::alloc::vec::Vec<u8>,
    /// 是否需要 ACK（缺省 true）
    #[prost(bool, optional, tag = "5")]
    pub require_ack: ::core::option::Option<bool>,
    /// ACK 超时时间（毫秒，缺省 10000）
    #[prost(uint64, optional, tag = "6")]
    pub expire_ms: ::core::option::Option<u64>,
    /// 最大重试次数（缺省 2）
    #[prost(uint32, optional, tag = "7")]
    pub max_retry: ::core::option::Option<u32>,
    /// 业务时间戳（毫秒；缺省使用 id）
    #[prost(int64, optional, tag = "8")]
    pub ts_ms: ::core::option::Option<i64>,
}
/// 设备类型：用于多端登录策略控制
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum DeviceType {
    Unknown = 0,
    Mobile = 1,
    Web = 3,
    Pc = 4,
}
impl DeviceType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown => "UNKNOWN",
            Self::Mobile => "MOBILE",
            Self::Web => "WEB",
            Self::Pc => "PC",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNKNOWN" => Some(Self::Unknown),
            "MOBILE" => Some(Self::Mobile),
            "WEB" => Some(Self::Web),
            "PC" => Some(Self::Pc),
            _ => None,
        }
    }
}
/// 业务种类：与历史 kind 字符串一一对应
/// - 建议所有生产者/消费者/客户端统一使用该枚举
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MsgKind {
    /// 原 "unknown"
    MkUnknown = 0,
    /// 好友消息
    /// 原 "chat.new"
    MkFriend = 100,
    /// 好友消息已读回执
    /// 原 "chat.msg_read_ack"
    MkFriendMsgReadAck = 101,
    /// 好友消息撤回
    /// 原 "chat.msg_recall"
    MkFriendMsgRecall = 102,
    /// 好友消息已送达回执
    /// 原 "chat.msg_delivered_ack"
    MkFriendMsgDeliveredAck = 103,
    /// 好友消息已读回执
    /// 原 "chat.msg_read"
    MkFriendMsgRead = 104,
    /// 好友消息已送达回执
    /// 原 "chat.msg_delivered
    MkFriendMsgDelivered = 105,
    /// 好友消息转发
    /// 原 "chat.msg_forward"
    MkFriendMsgForward = 106,
    /// 好友消息修改
    /// 原 "chat.msg_edit"
    MkFriendMsgEdit = 107,
    /// 好友消息撤回
    /// 原 "chat.msg_reaction"
    MkFriendMsgReaction = 108,
    /// 好友正在输入
    /// 原 "chat.typing"
    MkFriendTyping = 109,
    /// 好友发启语音/视频通话
    /// 原 "call.invite"
    MkFriendCallInvite = 150,
    /// 好友取消语音/视频通话
    /// 原 "call.cancel"
    MkFriendCallCancel = 151,
    /// 好友拒绝语音/视频通话
    /// 原 "call.reject"
    MkFriendCallReject = 152,
    /// 好友接听语音/视频通话
    /// 原 "call.accept"
    MkFriendCallAccept = 153,
    /// 好友结束语音/视频通话
    /// 原 "call.hangup"
    MkFriendCallHangup = 154,
    /// 好友通话中更新
    /// 原 "call.modify"
    MkFriendCallModify = 155,
    /// 好友通话中DTMF
    /// 原 "call.dtmf"
    MkFriendCallDtmf = 156,
    /// 好友申请
    /// 原 "chat.request"
    MkFriendRequest = 201,
    /// 好友申请受理
    /// 原 "chat.request_ack"
    MkFriendRequestAck = 202,
    /// 好友申请拒绝
    /// 原 "chat.request_reject"
    MkFriendRequestReject = 203,
    /// 好友删除
    /// 原 "chat.delete"
    MkFriendDelete = 204,
    /// 更新好友名称
    /// 原 "chat.update_remark"
    MkFriendUpdateRemark = 205,
    /// 群消息
    /// 原 "group.new"
    MkGroup = 300,
    /// 群消息已读回执
    /// 原 "group.msg_read_ack"
    MkGroupMsgReadAck = 301,
    /// 群消息撤回
    /// 原 "group.msg_recall"
    MkGroupMsgRecall = 302,
    /// 群消息已读回执
    /// 原 "group.at_all"
    MkGroupAtAll = 303,
    /// 群消息@用户
    /// 原 "group.at_user"
    MkGroupAtUser = 304,
    /// 群消息修改
    /// 原 "group.msg_edit"
    MkGroupMsgEdit = 305,
    /// 群消息撤回
    /// 原 "group.msg_reaction"
    MkGroupMsgReaction = 306,
    /// 群消息已送达回执
    /// 原 "group.msg_delivered"
    MkGroupMsgDelivered = 307,
    /// 群消息已送达回执
    /// 原 "group.msg_delivered_ack"
    MkGroupMsgDeliveredAck = 308,
    /// 群消息已读回执
    /// 原 "group.msg_read"
    MkGroupMsgRead = 309,
    /// 群正在输入
    MkGroupTyping = 312,
    /// 申请加群
    /// 原 "group.join_request"
    MkGroupJoinRequest = 401,
    /// 加群申请受理
    /// 原 "group.join_request_ack"
    MkGroupJoinRequestAck = 402,
    /// 群更新名称
    /// 原 "group.update_name"
    MkGroupUpdateName = 403,
    /// 群更新公告
    /// 原 "group.update_announcement"
    MkGroupUpdateAnnouncement = 404,
    /// 群更新头像
    /// 原 "group.update_avatar"
    MkGroupUpdateAvatar = 405,
    /// 群成员增加
    /// 原 "group.member_add"
    MkGroupMemberAdd = 406,
    /// 群成员删除
    /// 原 "group.member_delete"
    MkGroupMemberDelete = 407,
    /// 群成员退出
    /// 原 "group.member_quit"
    MkGroupMemberQuit = 408,
    /// 群成员更新
    /// 原 "group.member_update"
    MkGroupMemberUpdate = 409,
    /// 解散群
    /// 原 "group.dismiss"
    MkGroupDismiss = 410,
    /// 转让群主
    /// 原 "group.transfer"
    MkGroupTransfer = 411,
    /// 系统通知
    /// 原 "sys.notice"
    MkSysNotice = 900,
    /// 用户在线状态变更
    /// 原 "user.presence"
    MkUserPresence = 901,
    /// 用户资料更新
    /// 原 "user.profile_update"
    MkUserProfileUpdate = 902,
    /// 用户隐私设置更新
    /// 原 "user.privacy_update"
    MkUserPrivacyUpdate = 903,
    /// 用户账号数据变更
    /// 原 "user.account_data"
    MkUserAccountData = 904,
    /// 消息撤回
    /// 原 "msg.recall"
    MkMsgRecall = 905,
    /// 通用业务ACK
    /// 原 "sys.ack"
    ///
    /// ensure rebuild
    /// end of enum
    MkAck = 906,
}
impl MsgKind {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::MkUnknown => "MK_UNKNOWN",
            Self::MkFriend => "MK_FRIEND",
            Self::MkFriendMsgReadAck => "MK_FRIEND_MSG_READ_ACK",
            Self::MkFriendMsgRecall => "MK_FRIEND_MSG_RECALL",
            Self::MkFriendMsgDeliveredAck => "MK_FRIEND_MSG_DELIVERED_ACK",
            Self::MkFriendMsgRead => "MK_FRIEND_MSG_READ",
            Self::MkFriendMsgDelivered => "MK_FRIEND_MSG_DELIVERED",
            Self::MkFriendMsgForward => "MK_FRIEND_MSG_FORWARD",
            Self::MkFriendMsgEdit => "MK_FRIEND_MSG_EDIT",
            Self::MkFriendMsgReaction => "MK_FRIEND_MSG_REACTION",
            Self::MkFriendTyping => "MK_FRIEND_TYPING",
            Self::MkFriendCallInvite => "MK_FRIEND_CALL_INVITE",
            Self::MkFriendCallCancel => "MK_FRIEND_CALL_CANCEL",
            Self::MkFriendCallReject => "MK_FRIEND_CALL_REJECT",
            Self::MkFriendCallAccept => "MK_FRIEND_CALL_ACCEPT",
            Self::MkFriendCallHangup => "MK_FRIEND_CALL_HANGUP",
            Self::MkFriendCallModify => "MK_FRIEND_CALL_MODIFY",
            Self::MkFriendCallDtmf => "MK_FRIEND_CALL_DTMF",
            Self::MkFriendRequest => "MK_FRIEND_REQUEST",
            Self::MkFriendRequestAck => "MK_FRIEND_REQUEST_ACK",
            Self::MkFriendRequestReject => "MK_FRIEND_REQUEST_REJECT",
            Self::MkFriendDelete => "MK_FRIEND_DELETE",
            Self::MkFriendUpdateRemark => "MK_FRIEND_UPDATE_REMARK",
            Self::MkGroup => "MK_GROUP",
            Self::MkGroupMsgReadAck => "MK_GROUP_MSG_READ_ACK",
            Self::MkGroupMsgRecall => "MK_GROUP_MSG_RECALL",
            Self::MkGroupAtAll => "MK_GROUP_AT_ALL",
            Self::MkGroupAtUser => "MK_GROUP_AT_USER",
            Self::MkGroupMsgEdit => "MK_GROUP_MSG_EDIT",
            Self::MkGroupMsgReaction => "MK_GROUP_MSG_REACTION",
            Self::MkGroupMsgDelivered => "MK_GROUP_MSG_DELIVERED",
            Self::MkGroupMsgDeliveredAck => "MK_GROUP_MSG_DELIVERED_ACK",
            Self::MkGroupMsgRead => "MK_GROUP_MSG_READ",
            Self::MkGroupTyping => "MK_GROUP_TYPING",
            Self::MkGroupJoinRequest => "MK_GROUP_JOIN_REQUEST",
            Self::MkGroupJoinRequestAck => "MK_GROUP_JOIN_REQUEST_ACK",
            Self::MkGroupUpdateName => "MK_GROUP_UPDATE_NAME",
            Self::MkGroupUpdateAnnouncement => "MK_GROUP_UPDATE_ANNOUNCEMENT",
            Self::MkGroupUpdateAvatar => "MK_GROUP_UPDATE_AVATAR",
            Self::MkGroupMemberAdd => "MK_GROUP_MEMBER_ADD",
            Self::MkGroupMemberDelete => "MK_GROUP_MEMBER_DELETE",
            Self::MkGroupMemberQuit => "MK_GROUP_MEMBER_QUIT",
            Self::MkGroupMemberUpdate => "MK_GROUP_MEMBER_UPDATE",
            Self::MkGroupDismiss => "MK_GROUP_DISMISS",
            Self::MkGroupTransfer => "MK_GROUP_TRANSFER",
            Self::MkSysNotice => "MK_SYS_NOTICE",
            Self::MkUserPresence => "MK_USER_PRESENCE",
            Self::MkUserProfileUpdate => "MK_USER_PROFILE_UPDATE",
            Self::MkUserPrivacyUpdate => "MK_USER_PRIVACY_UPDATE",
            Self::MkUserAccountData => "MK_USER_ACCOUNT_DATA",
            Self::MkMsgRecall => "MK_MSG_RECALL",
            Self::MkAck => "MK_ACK",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MK_UNKNOWN" => Some(Self::MkUnknown),
            "MK_FRIEND" => Some(Self::MkFriend),
            "MK_FRIEND_MSG_READ_ACK" => Some(Self::MkFriendMsgReadAck),
            "MK_FRIEND_MSG_RECALL" => Some(Self::MkFriendMsgRecall),
            "MK_FRIEND_MSG_DELIVERED_ACK" => Some(Self::MkFriendMsgDeliveredAck),
            "MK_FRIEND_MSG_READ" => Some(Self::MkFriendMsgRead),
            "MK_FRIEND_MSG_DELIVERED" => Some(Self::MkFriendMsgDelivered),
            "MK_FRIEND_MSG_FORWARD" => Some(Self::MkFriendMsgForward),
            "MK_FRIEND_MSG_EDIT" => Some(Self::MkFriendMsgEdit),
            "MK_FRIEND_MSG_REACTION" => Some(Self::MkFriendMsgReaction),
            "MK_FRIEND_TYPING" => Some(Self::MkFriendTyping),
            "MK_FRIEND_CALL_INVITE" => Some(Self::MkFriendCallInvite),
            "MK_FRIEND_CALL_CANCEL" => Some(Self::MkFriendCallCancel),
            "MK_FRIEND_CALL_REJECT" => Some(Self::MkFriendCallReject),
            "MK_FRIEND_CALL_ACCEPT" => Some(Self::MkFriendCallAccept),
            "MK_FRIEND_CALL_HANGUP" => Some(Self::MkFriendCallHangup),
            "MK_FRIEND_CALL_MODIFY" => Some(Self::MkFriendCallModify),
            "MK_FRIEND_CALL_DTMF" => Some(Self::MkFriendCallDtmf),
            "MK_FRIEND_REQUEST" => Some(Self::MkFriendRequest),
            "MK_FRIEND_REQUEST_ACK" => Some(Self::MkFriendRequestAck),
            "MK_FRIEND_REQUEST_REJECT" => Some(Self::MkFriendRequestReject),
            "MK_FRIEND_DELETE" => Some(Self::MkFriendDelete),
            "MK_FRIEND_UPDATE_REMARK" => Some(Self::MkFriendUpdateRemark),
            "MK_GROUP" => Some(Self::MkGroup),
            "MK_GROUP_MSG_READ_ACK" => Some(Self::MkGroupMsgReadAck),
            "MK_GROUP_MSG_RECALL" => Some(Self::MkGroupMsgRecall),
            "MK_GROUP_AT_ALL" => Some(Self::MkGroupAtAll),
            "MK_GROUP_AT_USER" => Some(Self::MkGroupAtUser),
            "MK_GROUP_MSG_EDIT" => Some(Self::MkGroupMsgEdit),
            "MK_GROUP_MSG_REACTION" => Some(Self::MkGroupMsgReaction),
            "MK_GROUP_MSG_DELIVERED" => Some(Self::MkGroupMsgDelivered),
            "MK_GROUP_MSG_DELIVERED_ACK" => Some(Self::MkGroupMsgDeliveredAck),
            "MK_GROUP_MSG_READ" => Some(Self::MkGroupMsgRead),
            "MK_GROUP_TYPING" => Some(Self::MkGroupTyping),
            "MK_GROUP_JOIN_REQUEST" => Some(Self::MkGroupJoinRequest),
            "MK_GROUP_JOIN_REQUEST_ACK" => Some(Self::MkGroupJoinRequestAck),
            "MK_GROUP_UPDATE_NAME" => Some(Self::MkGroupUpdateName),
            "MK_GROUP_UPDATE_ANNOUNCEMENT" => Some(Self::MkGroupUpdateAnnouncement),
            "MK_GROUP_UPDATE_AVATAR" => Some(Self::MkGroupUpdateAvatar),
            "MK_GROUP_MEMBER_ADD" => Some(Self::MkGroupMemberAdd),
            "MK_GROUP_MEMBER_DELETE" => Some(Self::MkGroupMemberDelete),
            "MK_GROUP_MEMBER_QUIT" => Some(Self::MkGroupMemberQuit),
            "MK_GROUP_MEMBER_UPDATE" => Some(Self::MkGroupMemberUpdate),
            "MK_GROUP_DISMISS" => Some(Self::MkGroupDismiss),
            "MK_GROUP_TRANSFER" => Some(Self::MkGroupTransfer),
            "MK_SYS_NOTICE" => Some(Self::MkSysNotice),
            "MK_USER_PRESENCE" => Some(Self::MkUserPresence),
            "MK_USER_PROFILE_UPDATE" => Some(Self::MkUserProfileUpdate),
            "MK_USER_PRIVACY_UPDATE" => Some(Self::MkUserPrivacyUpdate),
            "MK_USER_ACCOUNT_DATA" => Some(Self::MkUserAccountData),
            "MK_MSG_RECALL" => Some(Self::MkMsgRecall),
            "MK_ACK" => Some(Self::MkAck),
            _ => None,
        }
    }
}
