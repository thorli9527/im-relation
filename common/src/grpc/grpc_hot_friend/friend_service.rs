// This file is @generated by prost-build.
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FriendRef {
    #[prost(int64, tag = "1")]
    pub user_id: i64,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddFriendReq {
    #[prost(int64, tag = "1")]
    pub user_id: i64,
    #[prost(int64, tag = "2")]
    pub friend_id: i64,
    /// 新增：user_id 对 friend_id 的别名（优先于 alias）
    #[prost(string, optional, tag = "4")]
    pub alias_for_user: ::core::option::Option<::prost::alloc::string::String>,
    /// 新增：friend_id 对 user_id 的别名（即反向别名）
    #[prost(string, optional, tag = "5")]
    pub alias_for_friend: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AddFriendResp {
    /// true 表示新增，false 可能表示已存在
    #[prost(bool, tag = "1")]
    pub added: bool,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RemoveFriendReq {
    #[prost(int64, tag = "1")]
    pub user_id: i64,
    #[prost(int64, tag = "2")]
    pub friend_id: i64,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RemoveFriendResp {
    #[prost(bool, tag = "1")]
    pub removed: bool,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct IsFriendReq {
    #[prost(int64, tag = "1")]
    pub user_id: i64,
    #[prost(int64, tag = "2")]
    pub friend_id: i64,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct IsFriendResp {
    #[prost(bool, tag = "1")]
    pub is_friend: bool,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetFriendsReq {
    #[prost(int64, tag = "1")]
    pub user_id: i64,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFriendsResp {
    #[prost(int64, repeated, tag = "1")]
    pub friend_ids: ::prost::alloc::vec::Vec<i64>,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetFriendsPageReq {
    #[prost(int64, tag = "1")]
    pub user_id: i64,
    #[prost(uint64, tag = "2")]
    pub page: u64,
    #[prost(uint64, tag = "3")]
    pub page_size: u64,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFriendsPageResp {
    #[prost(int64, repeated, tag = "1")]
    pub friend_ids: ::prost::alloc::vec::Vec<i64>,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FriendEntry {
    #[prost(int64, tag = "1")]
    pub friend_id: i64,
    /// 别名，未设置则为空字符串；也可结合 presence 判断（见下）。
    ///
    /// 可选的时间戳/扩展字段，按需启用（预留）
    /// int64 created_at = 10;
    /// int64 updated_at = 11;
    #[prost(string, optional, tag = "2")]
    pub alias: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetFriendsDetailedReq {
    #[prost(int64, tag = "1")]
    pub user_id: i64,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFriendsDetailedResp {
    #[prost(message, repeated, tag = "1")]
    pub friends: ::prost::alloc::vec::Vec<FriendEntry>,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetFriendsPageDetailedReq {
    #[prost(int64, tag = "1")]
    pub user_id: i64,
    #[prost(uint64, tag = "2")]
    pub page: u64,
    #[prost(uint64, tag = "3")]
    pub page_size: u64,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFriendsPageDetailedResp {
    #[prost(message, repeated, tag = "1")]
    pub friends: ::prost::alloc::vec::Vec<FriendEntry>,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateFriendAliasReq {
    #[prost(int64, tag = "1")]
    pub user_id: i64,
    #[prost(int64, tag = "2")]
    pub friend_id: i64,
    /// 将别名更新为此值；传空字符串可视为清除别名
    #[prost(string, optional, tag = "3")]
    pub alias: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UpdateFriendAliasResp {
    #[prost(bool, tag = "1")]
    pub updated: bool,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ClearFriendsReq {
    #[prost(int64, tag = "1")]
    pub user_id: i64,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ClearFriendsResp {}
/// Generated client implementations.
pub mod friend_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value
    )]
    use tonic::codegen::http::Uri;
    use tonic::codegen::*;
    #[derive(Debug, Clone)]
    pub struct FriendServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl FriendServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> FriendServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> FriendServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<http::Request<tonic::body::Body>>>::Error:
                Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            FriendServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn add_friend(
            &mut self,
            request: impl tonic::IntoRequest<super::AddFriendReq>,
        ) -> std::result::Result<tonic::Response<super::AddFriendResp>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path =
                http::uri::PathAndQuery::from_static("/friend_service.FriendService/AddFriend");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("friend_service.FriendService", "AddFriend"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn remove_friend(
            &mut self,
            request: impl tonic::IntoRequest<super::RemoveFriendReq>,
        ) -> std::result::Result<tonic::Response<super::RemoveFriendResp>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path =
                http::uri::PathAndQuery::from_static("/friend_service.FriendService/RemoveFriend");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "friend_service.FriendService",
                "RemoveFriend",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn is_friend(
            &mut self,
            request: impl tonic::IntoRequest<super::IsFriendReq>,
        ) -> std::result::Result<tonic::Response<super::IsFriendResp>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path =
                http::uri::PathAndQuery::from_static("/friend_service.FriendService/IsFriend");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("friend_service.FriendService", "IsFriend"));
            self.inner.unary(req, path, codec).await
        }
        /// 兼容旧有只返 ID 的接口
        pub async fn get_friends(
            &mut self,
            request: impl tonic::IntoRequest<super::GetFriendsReq>,
        ) -> std::result::Result<tonic::Response<super::GetFriendsResp>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path =
                http::uri::PathAndQuery::from_static("/friend_service.FriendService/GetFriends");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "friend_service.FriendService",
                "GetFriends",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_friends_page(
            &mut self,
            request: impl tonic::IntoRequest<super::GetFriendsPageReq>,
        ) -> std::result::Result<tonic::Response<super::GetFriendsPageResp>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/friend_service.FriendService/GetFriendsPage",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "friend_service.FriendService",
                "GetFriendsPage",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// 新增：带别名的查询
        pub async fn get_friends_detailed(
            &mut self,
            request: impl tonic::IntoRequest<super::GetFriendsDetailedReq>,
        ) -> std::result::Result<tonic::Response<super::GetFriendsDetailedResp>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/friend_service.FriendService/GetFriendsDetailed",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "friend_service.FriendService",
                "GetFriendsDetailed",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_friends_page_detailed(
            &mut self,
            request: impl tonic::IntoRequest<super::GetFriendsPageDetailedReq>,
        ) -> std::result::Result<tonic::Response<super::GetFriendsPageDetailedResp>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/friend_service.FriendService/GetFriendsPageDetailed",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "friend_service.FriendService",
                "GetFriendsPageDetailed",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// 新增：更新别名与清空
        pub async fn update_friend_alias(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateFriendAliasReq>,
        ) -> std::result::Result<tonic::Response<super::UpdateFriendAliasResp>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/friend_service.FriendService/UpdateFriendAlias",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "friend_service.FriendService",
                "UpdateFriendAlias",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn clear_friends(
            &mut self,
            request: impl tonic::IntoRequest<super::ClearFriendsReq>,
        ) -> std::result::Result<tonic::Response<super::ClearFriendsResp>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path =
                http::uri::PathAndQuery::from_static("/friend_service.FriendService/ClearFriends");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "friend_service.FriendService",
                "ClearFriends",
            ));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod friend_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with FriendServiceServer.
    #[async_trait]
    pub trait FriendService: std::marker::Send + std::marker::Sync + 'static {
        async fn add_friend(
            &self,
            request: tonic::Request<super::AddFriendReq>,
        ) -> std::result::Result<tonic::Response<super::AddFriendResp>, tonic::Status>;
        async fn remove_friend(
            &self,
            request: tonic::Request<super::RemoveFriendReq>,
        ) -> std::result::Result<tonic::Response<super::RemoveFriendResp>, tonic::Status>;
        async fn is_friend(
            &self,
            request: tonic::Request<super::IsFriendReq>,
        ) -> std::result::Result<tonic::Response<super::IsFriendResp>, tonic::Status>;
        /// 兼容旧有只返 ID 的接口
        async fn get_friends(
            &self,
            request: tonic::Request<super::GetFriendsReq>,
        ) -> std::result::Result<tonic::Response<super::GetFriendsResp>, tonic::Status>;
        async fn get_friends_page(
            &self,
            request: tonic::Request<super::GetFriendsPageReq>,
        ) -> std::result::Result<tonic::Response<super::GetFriendsPageResp>, tonic::Status>;
        /// 新增：带别名的查询
        async fn get_friends_detailed(
            &self,
            request: tonic::Request<super::GetFriendsDetailedReq>,
        ) -> std::result::Result<tonic::Response<super::GetFriendsDetailedResp>, tonic::Status>;
        async fn get_friends_page_detailed(
            &self,
            request: tonic::Request<super::GetFriendsPageDetailedReq>,
        ) -> std::result::Result<tonic::Response<super::GetFriendsPageDetailedResp>, tonic::Status>;
        /// 新增：更新别名与清空
        async fn update_friend_alias(
            &self,
            request: tonic::Request<super::UpdateFriendAliasReq>,
        ) -> std::result::Result<tonic::Response<super::UpdateFriendAliasResp>, tonic::Status>;
        async fn clear_friends(
            &self,
            request: tonic::Request<super::ClearFriendsReq>,
        ) -> std::result::Result<tonic::Response<super::ClearFriendsResp>, tonic::Status>;
    }
    #[derive(Debug)]
    pub struct FriendServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> FriendServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(inner: T, interceptor: F) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for FriendServiceServer<T>
    where
        T: FriendService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/friend_service.FriendService/AddFriend" => {
                    #[allow(non_camel_case_types)]
                    struct AddFriendSvc<T: FriendService>(pub Arc<T>);
                    impl<T: FriendService> tonic::server::UnaryService<super::AddFriendReq> for AddFriendSvc<T> {
                        type Response = super::AddFriendResp;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::AddFriendReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FriendService>::add_friend(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = AddFriendSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/friend_service.FriendService/RemoveFriend" => {
                    #[allow(non_camel_case_types)]
                    struct RemoveFriendSvc<T: FriendService>(pub Arc<T>);
                    impl<T: FriendService> tonic::server::UnaryService<super::RemoveFriendReq> for RemoveFriendSvc<T> {
                        type Response = super::RemoveFriendResp;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RemoveFriendReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FriendService>::remove_friend(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RemoveFriendSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/friend_service.FriendService/IsFriend" => {
                    #[allow(non_camel_case_types)]
                    struct IsFriendSvc<T: FriendService>(pub Arc<T>);
                    impl<T: FriendService> tonic::server::UnaryService<super::IsFriendReq> for IsFriendSvc<T> {
                        type Response = super::IsFriendResp;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::IsFriendReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FriendService>::is_friend(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = IsFriendSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/friend_service.FriendService/GetFriends" => {
                    #[allow(non_camel_case_types)]
                    struct GetFriendsSvc<T: FriendService>(pub Arc<T>);
                    impl<T: FriendService> tonic::server::UnaryService<super::GetFriendsReq> for GetFriendsSvc<T> {
                        type Response = super::GetFriendsResp;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetFriendsReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FriendService>::get_friends(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetFriendsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/friend_service.FriendService/GetFriendsPage" => {
                    #[allow(non_camel_case_types)]
                    struct GetFriendsPageSvc<T: FriendService>(pub Arc<T>);
                    impl<T: FriendService> tonic::server::UnaryService<super::GetFriendsPageReq>
                        for GetFriendsPageSvc<T>
                    {
                        type Response = super::GetFriendsPageResp;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetFriendsPageReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FriendService>::get_friends_page(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetFriendsPageSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/friend_service.FriendService/GetFriendsDetailed" => {
                    #[allow(non_camel_case_types)]
                    struct GetFriendsDetailedSvc<T: FriendService>(pub Arc<T>);
                    impl<T: FriendService> tonic::server::UnaryService<super::GetFriendsDetailedReq>
                        for GetFriendsDetailedSvc<T>
                    {
                        type Response = super::GetFriendsDetailedResp;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetFriendsDetailedReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FriendService>::get_friends_detailed(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetFriendsDetailedSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/friend_service.FriendService/GetFriendsPageDetailed" => {
                    #[allow(non_camel_case_types)]
                    struct GetFriendsPageDetailedSvc<T: FriendService>(pub Arc<T>);
                    impl<T: FriendService>
                        tonic::server::UnaryService<super::GetFriendsPageDetailedReq>
                        for GetFriendsPageDetailedSvc<T>
                    {
                        type Response = super::GetFriendsPageDetailedResp;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetFriendsPageDetailedReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FriendService>::get_friends_page_detailed(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetFriendsPageDetailedSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/friend_service.FriendService/UpdateFriendAlias" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateFriendAliasSvc<T: FriendService>(pub Arc<T>);
                    impl<T: FriendService> tonic::server::UnaryService<super::UpdateFriendAliasReq>
                        for UpdateFriendAliasSvc<T>
                    {
                        type Response = super::UpdateFriendAliasResp;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpdateFriendAliasReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FriendService>::update_friend_alias(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateFriendAliasSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/friend_service.FriendService/ClearFriends" => {
                    #[allow(non_camel_case_types)]
                    struct ClearFriendsSvc<T: FriendService>(pub Arc<T>);
                    impl<T: FriendService> tonic::server::UnaryService<super::ClearFriendsReq> for ClearFriendsSvc<T> {
                        type Response = super::ClearFriendsResp;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ClearFriendsReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FriendService>::clear_friends(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ClearFriendsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => Box::pin(async move {
                    let mut response = http::Response::new(tonic::body::Body::default());
                    let headers = response.headers_mut();
                    headers.insert(
                        tonic::Status::GRPC_STATUS,
                        (tonic::Code::Unimplemented as i32).into(),
                    );
                    headers.insert(
                        http::header::CONTENT_TYPE,
                        tonic::metadata::GRPC_CONTENT_TYPE,
                    );
                    Ok(response)
                }),
            }
        }
    }
    impl<T> Clone for FriendServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "friend_service.FriendService";
    impl<T> tonic::server::NamedService for FriendServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
