// This file is @generated by prost-build.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetOnlineRequest {
    #[prost(int64, tag = "1")]
    pub user_id: i64,
    #[prost(bool, tag = "2")]
    pub online: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetOnlineResponse {
    #[prost(bool, tag = "1")]
    pub ok: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CheckOnlineRequest {
    #[prost(int64, tag = "1")]
    pub user_id: i64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CheckOnlineResponse {
    #[prost(bool, tag = "1")]
    pub online: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CheckOnlineBatchRequest {
    #[prost(int64, repeated, tag = "1")]
    pub user_ids: ::prost::alloc::vec::Vec<i64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CheckOnlineBatchResponse {
    /// 索引与输入 user_ids 对齐
    #[prost(bool, repeated, tag = "1")]
    pub results: ::prost::alloc::vec::Vec<bool>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetStatsRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetStatsResponse {
    #[prost(uint64, tag = "1")]
    pub total: u64,
    #[prost(uint64, repeated, tag = "2")]
    pub per_shard: ::prost::alloc::vec::Vec<u64>,
    #[prost(uint32, tag = "3")]
    pub max_shard_idx: u32,
    #[prost(uint64, tag = "4")]
    pub max_shard_count: u64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpsertSessionTokenRequest {
    #[prost(int64, tag = "1")]
    pub user_id: i64,
    #[prost(enumeration = "DeviceType", tag = "2")]
    pub device_type: i32,
    #[prost(string, tag = "3")]
    pub device_id: ::prost::alloc::string::String,
    /// 可选：客户端上报的登录 IP/UA，便于审计
    #[prost(string, optional, tag = "4")]
    pub login_ip: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub user_agent: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpsertSessionTokenResponse {
    #[prost(string, tag = "1")]
    pub session_token: ::prost::alloc::string::String,
    /// 过期时间（毫秒时间戳）
    #[prost(uint64, tag = "2")]
    pub expires_at: u64,
    /// 若存在旧 token，则返回以便调用方通知下线
    #[prost(string, optional, tag = "3")]
    pub previous_token: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ValidateSessionTokenRequest {
    #[prost(string, tag = "1")]
    pub session_token: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ValidateSessionTokenResponse {
    #[prost(enumeration = "SessionTokenStatus", tag = "1")]
    pub status: i32,
    #[prost(int64, tag = "2")]
    pub user_id: i64,
    #[prost(enumeration = "DeviceType", tag = "3")]
    pub device_type: i32,
    #[prost(string, tag = "4")]
    pub device_id: ::prost::alloc::string::String,
    #[prost(uint64, tag = "5")]
    pub expires_at: u64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TokenDeviceRef {
    #[prost(int64, tag = "1")]
    pub user_id: i64,
    #[prost(enumeration = "DeviceType", tag = "2")]
    pub device_type: i32,
    #[prost(string, tag = "3")]
    pub device_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RevokeSessionTokenRequest {
    #[prost(string, optional, tag = "3")]
    pub reason: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(oneof = "revoke_session_token_request::Target", tags = "1, 2")]
    pub target: ::core::option::Option<revoke_session_token_request::Target>,
}
/// Nested message and enum types in `RevokeSessionTokenRequest`.
pub mod revoke_session_token_request {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Target {
        #[prost(string, tag = "1")]
        SessionToken(::prost::alloc::string::String),
        #[prost(message, tag = "2")]
        Device(super::TokenDeviceRef),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RevokeSessionTokenResponse {
    #[prost(bool, tag = "1")]
    pub ok: bool,
    #[prost(string, optional, tag = "2")]
    pub revoked_token: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TouchSessionTokenRequest {
    #[prost(string, repeated, tag = "1")]
    pub session_tokens: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TouchSessionTokenResponse {
    #[prost(uint32, tag = "1")]
    pub touched: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LoginReqMsg {
    #[prost(int64, tag = "1")]
    pub id: i64,
    #[prost(enumeration = "AuthType", tag = "2")]
    pub auth_type: i32,
    #[prost(string, tag = "3")]
    pub auth_content: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub password: ::prost::alloc::string::String,
    #[prost(enumeration = "DeviceType", tag = "5")]
    pub device_type: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LoginRespMsg {
    #[prost(int64, tag = "1")]
    pub id: i64,
    #[prost(string, tag = "2")]
    pub token: ::prost::alloc::string::String,
    #[prost(uint64, tag = "3")]
    pub expires_at: u64,
    #[prost(bool, tag = "4")]
    pub success: bool,
    #[prost(string, tag = "5")]
    pub msg: ::prost::alloc::string::String,
    #[prost(int64, tag = "6")]
    pub uid: i64,
    #[prost(string, tag = "7")]
    pub nickname: ::prost::alloc::string::String,
    #[prost(string, tag = "8")]
    pub avatar: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LogoutReqMsg {
    #[prost(int64, tag = "1")]
    pub id: i64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LogoutRespMsg {
    #[prost(int64, tag = "1")]
    pub id: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SendVerificationCodeReqMsg {
    #[prost(int64, tag = "1")]
    pub id: i64,
    #[prost(string, tag = "2")]
    pub receiver: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub channel: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub scene: ::prost::alloc::string::String,
    #[prost(int64, tag = "5")]
    pub uid: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SendVerificationCodeRepMsg {
    #[prost(int64, tag = "1")]
    pub id: i64,
    #[prost(bool, tag = "2")]
    pub success: bool,
    #[prost(string, tag = "3")]
    pub message: ::prost::alloc::string::String,
    #[prost(int64, tag = "4")]
    pub expired_in: i64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct OnlineStatusMsg {
    #[prost(int64, tag = "1")]
    pub id: i64,
    #[prost(int64, tag = "2")]
    pub uid: i64,
    #[prost(enumeration = "DeviceType", tag = "3")]
    pub device_type: i32,
    #[prost(int64, tag = "4")]
    pub client_id: i64,
    #[prost(int64, tag = "5")]
    pub login_time: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OfflineStatueMsg {
    #[prost(int64, tag = "1")]
    pub id: i64,
    #[prost(string, tag = "2")]
    pub uid: ::prost::alloc::string::String,
    #[prost(enumeration = "DeviceType", tag = "3")]
    pub device_type: i32,
    #[prost(int64, tag = "4")]
    pub client_id: i64,
    #[prost(int64, tag = "5")]
    pub logout_time: i64,
    #[prost(string, tag = "6")]
    pub reason: ::prost::alloc::string::String,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClientEntity {
    #[prost(int64, tag = "1")]
    pub id: i64,
    #[prost(string, tag = "2")]
    pub password: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "4")]
    pub email: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub phone: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "6")]
    pub language: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, tag = "7")]
    pub avatar: ::prost::alloc::string::String,
    #[prost(enumeration = "AddFriendPolicy", tag = "8")]
    pub allow_add_friend: i32,
    #[prost(enumeration = "Gender", tag = "9")]
    pub gender: i32,
    #[prost(enumeration = "UserType", tag = "10")]
    pub user_type: i32,
    #[prost(map = "string, string", tag = "11")]
    pub profile_fields: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    #[prost(int64, tag = "12")]
    pub create_time: i64,
    #[prost(int64, tag = "13")]
    pub update_time: i64,
    #[prost(int32, tag = "14")]
    pub version: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FindClientDto {
    #[prost(message, optional, tag = "1")]
    pub client: ::core::option::Option<ClientEntity>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegisterUserReq {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub password: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "4")]
    pub email: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub phone: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "6")]
    pub language: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, tag = "7")]
    pub avatar: ::prost::alloc::string::String,
    #[prost(enumeration = "AddFriendPolicy", tag = "8")]
    pub allow_add_friend: i32,
    #[prost(enumeration = "Gender", tag = "9")]
    pub gender: i32,
    #[prost(enumeration = "UserType", tag = "10")]
    pub user_type: i32,
    #[prost(map = "string, string", tag = "11")]
    pub profile_fields: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangePasswordReq {
    #[prost(int64, tag = "1")]
    pub id: i64,
    #[prost(string, optional, tag = "2")]
    pub old_password: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, tag = "3")]
    pub new_password: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "4")]
    pub verify_token: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangePhoneReq {
    #[prost(int64, tag = "1")]
    pub id: i64,
    #[prost(string, optional, tag = "2")]
    pub new_phone: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub verify_token: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangeEmailReq {
    #[prost(int64, tag = "1")]
    pub id: i64,
    #[prost(string, optional, tag = "2")]
    pub new_email: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub verify_token: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateClientReq {
    #[prost(message, optional, tag = "1")]
    pub patch: ::core::option::Option<ClientEntity>,
    #[prost(message, optional, tag = "2")]
    pub update_mask: ::core::option::Option<::prost_types::FieldMask>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetClientReq {
    #[prost(int64, tag = "1")]
    pub id: i64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChangeResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FindByContentReq {
    #[prost(string, tag = "1")]
    pub content: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SessionTokenStatus {
    StsUnknown = 0,
    StsActive = 1,
    StsRevoked = 2,
    StsExpired = 3,
}
impl SessionTokenStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::StsUnknown => "STS_UNKNOWN",
            Self::StsActive => "STS_ACTIVE",
            Self::StsRevoked => "STS_REVOKED",
            Self::StsExpired => "STS_EXPIRED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "STS_UNKNOWN" => Some(Self::StsUnknown),
            "STS_ACTIVE" => Some(Self::StsActive),
            "STS_REVOKED" => Some(Self::StsRevoked),
            "STS_EXPIRED" => Some(Self::StsExpired),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum DeviceType {
    Unknown = 0,
    Mobile = 1,
    Web = 3,
    Pc = 4,
}
impl DeviceType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown => "UNKNOWN",
            Self::Mobile => "MOBILE",
            Self::Web => "WEB",
            Self::Pc => "PC",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNKNOWN" => Some(Self::Unknown),
            "MOBILE" => Some(Self::Mobile),
            "WEB" => Some(Self::Web),
            "PC" => Some(Self::Pc),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AuthType {
    Unknown = 0,
    Email = 1,
    Phone = 2,
    Username = 3,
}
impl AuthType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown => "AUTH_TYPE_UNKNOWN",
            Self::Email => "AUTH_TYPE_EMAIL",
            Self::Phone => "AUTH_TYPE_PHONE",
            Self::Username => "AUTH_TYPE_USERNAME",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "AUTH_TYPE_UNKNOWN" => Some(Self::Unknown),
            "AUTH_TYPE_EMAIL" => Some(Self::Email),
            "AUTH_TYPE_PHONE" => Some(Self::Phone),
            "AUTH_TYPE_USERNAME" => Some(Self::Username),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AddFriendPolicy {
    AddFriendUnspecified = 0,
    Anyone = 1,
    RequireVerify = 2,
    PhoneOnly = 3,
}
impl AddFriendPolicy {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::AddFriendUnspecified => "ADD_FRIEND_UNSPECIFIED",
            Self::Anyone => "ANYONE",
            Self::RequireVerify => "REQUIRE_VERIFY",
            Self::PhoneOnly => "PHONE_ONLY",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ADD_FRIEND_UNSPECIFIED" => Some(Self::AddFriendUnspecified),
            "ANYONE" => Some(Self::Anyone),
            "REQUIRE_VERIFY" => Some(Self::RequireVerify),
            "PHONE_ONLY" => Some(Self::PhoneOnly),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Gender {
    Unspecified = 0,
    Male = 1,
    Female = 2,
    Secret = 9,
}
impl Gender {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "GENDER_UNSPECIFIED",
            Self::Male => "MALE",
            Self::Female => "FEMALE",
            Self::Secret => "SECRET",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "GENDER_UNSPECIFIED" => Some(Self::Unspecified),
            "MALE" => Some(Self::Male),
            "FEMALE" => Some(Self::Female),
            "SECRET" => Some(Self::Secret),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum UserType {
    Unspecified = 0,
    Normal = 1,
    Test = 2,
    Bot = 3,
}
impl UserType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "USER_TYPE_UNSPECIFIED",
            Self::Normal => "NORMAL",
            Self::Test => "TEST",
            Self::Bot => "BOT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "USER_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "NORMAL" => Some(Self::Normal),
            "TEST" => Some(Self::Test),
            "BOT" => Some(Self::Bot),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod online_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct OnlineServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl OnlineServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> OnlineServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> OnlineServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            OnlineServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// 设置在线/离线（幂等）
        pub async fn set_online(
            &mut self,
            request: impl tonic::IntoRequest<super::SetOnlineRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SetOnlineResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/online_service.OnlineService/SetOnline",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("online_service.OnlineService", "SetOnline"));
            self.inner.unary(req, path, codec).await
        }
        /// 单查
        pub async fn check_online(
            &mut self,
            request: impl tonic::IntoRequest<super::CheckOnlineRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CheckOnlineResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/online_service.OnlineService/CheckOnline",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("online_service.OnlineService", "CheckOnline"));
            self.inner.unary(req, path, codec).await
        }
        /// 批量查
        pub async fn check_online_batch(
            &mut self,
            request: impl tonic::IntoRequest<super::CheckOnlineBatchRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CheckOnlineBatchResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/online_service.OnlineService/CheckOnlineBatch",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("online_service.OnlineService", "CheckOnlineBatch"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// 统计信息
        pub async fn get_stats(
            &mut self,
            request: impl tonic::IntoRequest<super::GetStatsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetStatsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/online_service.OnlineService/GetStats",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("online_service.OnlineService", "GetStats"));
            self.inner.unary(req, path, codec).await
        }
        /// 生成/刷新设备 session token
        pub async fn upsert_session_token(
            &mut self,
            request: impl tonic::IntoRequest<super::UpsertSessionTokenRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UpsertSessionTokenResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/online_service.OnlineService/UpsertSessionToken",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("online_service.OnlineService", "UpsertSessionToken"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// 校验 session token 合法性
        pub async fn validate_session_token(
            &mut self,
            request: impl tonic::IntoRequest<super::ValidateSessionTokenRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ValidateSessionTokenResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/online_service.OnlineService/ValidateSessionToken",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "online_service.OnlineService",
                        "ValidateSessionToken",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// 吊销指定 token 或设备会话
        pub async fn revoke_session_token(
            &mut self,
            request: impl tonic::IntoRequest<super::RevokeSessionTokenRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RevokeSessionTokenResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/online_service.OnlineService/RevokeSessionToken",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("online_service.OnlineService", "RevokeSessionToken"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// 批量刷新最后活跃时间
        pub async fn touch_session_token(
            &mut self,
            request: impl tonic::IntoRequest<super::TouchSessionTokenRequest>,
        ) -> std::result::Result<
            tonic::Response<super::TouchSessionTokenResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/online_service.OnlineService/TouchSessionToken",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("online_service.OnlineService", "TouchSessionToken"),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated client implementations.
pub mod client_rpc_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct ClientRpcServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl ClientRpcServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> ClientRpcServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> ClientRpcServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            ClientRpcServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn find_by_email(
            &mut self,
            request: impl tonic::IntoRequest<super::FindByContentReq>,
        ) -> std::result::Result<tonic::Response<super::FindClientDto>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/online_service.ClientRpcService/findByEmail",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("online_service.ClientRpcService", "findByEmail"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_by_phone(
            &mut self,
            request: impl tonic::IntoRequest<super::FindByContentReq>,
        ) -> std::result::Result<tonic::Response<super::FindClientDto>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/online_service.ClientRpcService/findByPhone",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("online_service.ClientRpcService", "findByPhone"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_by_name(
            &mut self,
            request: impl tonic::IntoRequest<super::FindByContentReq>,
        ) -> std::result::Result<tonic::Response<super::FindClientDto>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/online_service.ClientRpcService/findByName",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("online_service.ClientRpcService", "findByName"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn register(
            &mut self,
            request: impl tonic::IntoRequest<super::RegisterUserReq>,
        ) -> std::result::Result<tonic::Response<super::ClientEntity>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/online_service.ClientRpcService/Register",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("online_service.ClientRpcService", "Register"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn change_password(
            &mut self,
            request: impl tonic::IntoRequest<super::ChangePasswordReq>,
        ) -> std::result::Result<tonic::Response<super::ChangeResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/online_service.ClientRpcService/ChangePassword",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("online_service.ClientRpcService", "ChangePassword"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn change_phone(
            &mut self,
            request: impl tonic::IntoRequest<super::ChangePhoneReq>,
        ) -> std::result::Result<tonic::Response<super::ClientEntity>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/online_service.ClientRpcService/ChangePhone",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("online_service.ClientRpcService", "ChangePhone"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn change_email(
            &mut self,
            request: impl tonic::IntoRequest<super::ChangeEmailReq>,
        ) -> std::result::Result<tonic::Response<super::ClientEntity>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/online_service.ClientRpcService/ChangeEmail",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("online_service.ClientRpcService", "ChangeEmail"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn update_client(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateClientReq>,
        ) -> std::result::Result<tonic::Response<super::ClientEntity>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/online_service.ClientRpcService/UpdateClient",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("online_service.ClientRpcService", "UpdateClient"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_client(
            &mut self,
            request: impl tonic::IntoRequest<super::GetClientReq>,
        ) -> std::result::Result<tonic::Response<super::ClientEntity>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/online_service.ClientRpcService/GetClient",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("online_service.ClientRpcService", "GetClient"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod online_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with OnlineServiceServer.
    #[async_trait]
    pub trait OnlineService: std::marker::Send + std::marker::Sync + 'static {
        /// 设置在线/离线（幂等）
        async fn set_online(
            &self,
            request: tonic::Request<super::SetOnlineRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SetOnlineResponse>,
            tonic::Status,
        >;
        /// 单查
        async fn check_online(
            &self,
            request: tonic::Request<super::CheckOnlineRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CheckOnlineResponse>,
            tonic::Status,
        >;
        /// 批量查
        async fn check_online_batch(
            &self,
            request: tonic::Request<super::CheckOnlineBatchRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CheckOnlineBatchResponse>,
            tonic::Status,
        >;
        /// 统计信息
        async fn get_stats(
            &self,
            request: tonic::Request<super::GetStatsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetStatsResponse>,
            tonic::Status,
        >;
        /// 生成/刷新设备 session token
        async fn upsert_session_token(
            &self,
            request: tonic::Request<super::UpsertSessionTokenRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UpsertSessionTokenResponse>,
            tonic::Status,
        >;
        /// 校验 session token 合法性
        async fn validate_session_token(
            &self,
            request: tonic::Request<super::ValidateSessionTokenRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ValidateSessionTokenResponse>,
            tonic::Status,
        >;
        /// 吊销指定 token 或设备会话
        async fn revoke_session_token(
            &self,
            request: tonic::Request<super::RevokeSessionTokenRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RevokeSessionTokenResponse>,
            tonic::Status,
        >;
        /// 批量刷新最后活跃时间
        async fn touch_session_token(
            &self,
            request: tonic::Request<super::TouchSessionTokenRequest>,
        ) -> std::result::Result<
            tonic::Response<super::TouchSessionTokenResponse>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct OnlineServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> OnlineServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for OnlineServiceServer<T>
    where
        T: OnlineService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/online_service.OnlineService/SetOnline" => {
                    #[allow(non_camel_case_types)]
                    struct SetOnlineSvc<T: OnlineService>(pub Arc<T>);
                    impl<
                        T: OnlineService,
                    > tonic::server::UnaryService<super::SetOnlineRequest>
                    for SetOnlineSvc<T> {
                        type Response = super::SetOnlineResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SetOnlineRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as OnlineService>::set_online(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SetOnlineSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/online_service.OnlineService/CheckOnline" => {
                    #[allow(non_camel_case_types)]
                    struct CheckOnlineSvc<T: OnlineService>(pub Arc<T>);
                    impl<
                        T: OnlineService,
                    > tonic::server::UnaryService<super::CheckOnlineRequest>
                    for CheckOnlineSvc<T> {
                        type Response = super::CheckOnlineResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CheckOnlineRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as OnlineService>::check_online(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CheckOnlineSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/online_service.OnlineService/CheckOnlineBatch" => {
                    #[allow(non_camel_case_types)]
                    struct CheckOnlineBatchSvc<T: OnlineService>(pub Arc<T>);
                    impl<
                        T: OnlineService,
                    > tonic::server::UnaryService<super::CheckOnlineBatchRequest>
                    for CheckOnlineBatchSvc<T> {
                        type Response = super::CheckOnlineBatchResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CheckOnlineBatchRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as OnlineService>::check_online_batch(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CheckOnlineBatchSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/online_service.OnlineService/GetStats" => {
                    #[allow(non_camel_case_types)]
                    struct GetStatsSvc<T: OnlineService>(pub Arc<T>);
                    impl<
                        T: OnlineService,
                    > tonic::server::UnaryService<super::GetStatsRequest>
                    for GetStatsSvc<T> {
                        type Response = super::GetStatsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetStatsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as OnlineService>::get_stats(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetStatsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/online_service.OnlineService/UpsertSessionToken" => {
                    #[allow(non_camel_case_types)]
                    struct UpsertSessionTokenSvc<T: OnlineService>(pub Arc<T>);
                    impl<
                        T: OnlineService,
                    > tonic::server::UnaryService<super::UpsertSessionTokenRequest>
                    for UpsertSessionTokenSvc<T> {
                        type Response = super::UpsertSessionTokenResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpsertSessionTokenRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as OnlineService>::upsert_session_token(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpsertSessionTokenSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/online_service.OnlineService/ValidateSessionToken" => {
                    #[allow(non_camel_case_types)]
                    struct ValidateSessionTokenSvc<T: OnlineService>(pub Arc<T>);
                    impl<
                        T: OnlineService,
                    > tonic::server::UnaryService<super::ValidateSessionTokenRequest>
                    for ValidateSessionTokenSvc<T> {
                        type Response = super::ValidateSessionTokenResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ValidateSessionTokenRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as OnlineService>::validate_session_token(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ValidateSessionTokenSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/online_service.OnlineService/RevokeSessionToken" => {
                    #[allow(non_camel_case_types)]
                    struct RevokeSessionTokenSvc<T: OnlineService>(pub Arc<T>);
                    impl<
                        T: OnlineService,
                    > tonic::server::UnaryService<super::RevokeSessionTokenRequest>
                    for RevokeSessionTokenSvc<T> {
                        type Response = super::RevokeSessionTokenResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RevokeSessionTokenRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as OnlineService>::revoke_session_token(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RevokeSessionTokenSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/online_service.OnlineService/TouchSessionToken" => {
                    #[allow(non_camel_case_types)]
                    struct TouchSessionTokenSvc<T: OnlineService>(pub Arc<T>);
                    impl<
                        T: OnlineService,
                    > tonic::server::UnaryService<super::TouchSessionTokenRequest>
                    for TouchSessionTokenSvc<T> {
                        type Response = super::TouchSessionTokenResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::TouchSessionTokenRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as OnlineService>::touch_session_token(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = TouchSessionTokenSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for OnlineServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "online_service.OnlineService";
    impl<T> tonic::server::NamedService for OnlineServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
/// Generated server implementations.
pub mod client_rpc_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with ClientRpcServiceServer.
    #[async_trait]
    pub trait ClientRpcService: std::marker::Send + std::marker::Sync + 'static {
        async fn find_by_email(
            &self,
            request: tonic::Request<super::FindByContentReq>,
        ) -> std::result::Result<tonic::Response<super::FindClientDto>, tonic::Status>;
        async fn find_by_phone(
            &self,
            request: tonic::Request<super::FindByContentReq>,
        ) -> std::result::Result<tonic::Response<super::FindClientDto>, tonic::Status>;
        async fn find_by_name(
            &self,
            request: tonic::Request<super::FindByContentReq>,
        ) -> std::result::Result<tonic::Response<super::FindClientDto>, tonic::Status>;
        async fn register(
            &self,
            request: tonic::Request<super::RegisterUserReq>,
        ) -> std::result::Result<tonic::Response<super::ClientEntity>, tonic::Status>;
        async fn change_password(
            &self,
            request: tonic::Request<super::ChangePasswordReq>,
        ) -> std::result::Result<tonic::Response<super::ChangeResponse>, tonic::Status>;
        async fn change_phone(
            &self,
            request: tonic::Request<super::ChangePhoneReq>,
        ) -> std::result::Result<tonic::Response<super::ClientEntity>, tonic::Status>;
        async fn change_email(
            &self,
            request: tonic::Request<super::ChangeEmailReq>,
        ) -> std::result::Result<tonic::Response<super::ClientEntity>, tonic::Status>;
        async fn update_client(
            &self,
            request: tonic::Request<super::UpdateClientReq>,
        ) -> std::result::Result<tonic::Response<super::ClientEntity>, tonic::Status>;
        async fn get_client(
            &self,
            request: tonic::Request<super::GetClientReq>,
        ) -> std::result::Result<tonic::Response<super::ClientEntity>, tonic::Status>;
    }
    #[derive(Debug)]
    pub struct ClientRpcServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> ClientRpcServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for ClientRpcServiceServer<T>
    where
        T: ClientRpcService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/online_service.ClientRpcService/findByEmail" => {
                    #[allow(non_camel_case_types)]
                    struct findByEmailSvc<T: ClientRpcService>(pub Arc<T>);
                    impl<
                        T: ClientRpcService,
                    > tonic::server::UnaryService<super::FindByContentReq>
                    for findByEmailSvc<T> {
                        type Response = super::FindClientDto;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindByContentReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ClientRpcService>::find_by_email(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = findByEmailSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/online_service.ClientRpcService/findByPhone" => {
                    #[allow(non_camel_case_types)]
                    struct findByPhoneSvc<T: ClientRpcService>(pub Arc<T>);
                    impl<
                        T: ClientRpcService,
                    > tonic::server::UnaryService<super::FindByContentReq>
                    for findByPhoneSvc<T> {
                        type Response = super::FindClientDto;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindByContentReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ClientRpcService>::find_by_phone(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = findByPhoneSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/online_service.ClientRpcService/findByName" => {
                    #[allow(non_camel_case_types)]
                    struct findByNameSvc<T: ClientRpcService>(pub Arc<T>);
                    impl<
                        T: ClientRpcService,
                    > tonic::server::UnaryService<super::FindByContentReq>
                    for findByNameSvc<T> {
                        type Response = super::FindClientDto;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindByContentReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ClientRpcService>::find_by_name(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = findByNameSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/online_service.ClientRpcService/Register" => {
                    #[allow(non_camel_case_types)]
                    struct RegisterSvc<T: ClientRpcService>(pub Arc<T>);
                    impl<
                        T: ClientRpcService,
                    > tonic::server::UnaryService<super::RegisterUserReq>
                    for RegisterSvc<T> {
                        type Response = super::ClientEntity;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RegisterUserReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ClientRpcService>::register(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RegisterSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/online_service.ClientRpcService/ChangePassword" => {
                    #[allow(non_camel_case_types)]
                    struct ChangePasswordSvc<T: ClientRpcService>(pub Arc<T>);
                    impl<
                        T: ClientRpcService,
                    > tonic::server::UnaryService<super::ChangePasswordReq>
                    for ChangePasswordSvc<T> {
                        type Response = super::ChangeResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ChangePasswordReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ClientRpcService>::change_password(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ChangePasswordSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/online_service.ClientRpcService/ChangePhone" => {
                    #[allow(non_camel_case_types)]
                    struct ChangePhoneSvc<T: ClientRpcService>(pub Arc<T>);
                    impl<
                        T: ClientRpcService,
                    > tonic::server::UnaryService<super::ChangePhoneReq>
                    for ChangePhoneSvc<T> {
                        type Response = super::ClientEntity;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ChangePhoneReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ClientRpcService>::change_phone(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ChangePhoneSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/online_service.ClientRpcService/ChangeEmail" => {
                    #[allow(non_camel_case_types)]
                    struct ChangeEmailSvc<T: ClientRpcService>(pub Arc<T>);
                    impl<
                        T: ClientRpcService,
                    > tonic::server::UnaryService<super::ChangeEmailReq>
                    for ChangeEmailSvc<T> {
                        type Response = super::ClientEntity;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ChangeEmailReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ClientRpcService>::change_email(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ChangeEmailSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/online_service.ClientRpcService/UpdateClient" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateClientSvc<T: ClientRpcService>(pub Arc<T>);
                    impl<
                        T: ClientRpcService,
                    > tonic::server::UnaryService<super::UpdateClientReq>
                    for UpdateClientSvc<T> {
                        type Response = super::ClientEntity;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpdateClientReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ClientRpcService>::update_client(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateClientSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/online_service.ClientRpcService/GetClient" => {
                    #[allow(non_camel_case_types)]
                    struct GetClientSvc<T: ClientRpcService>(pub Arc<T>);
                    impl<
                        T: ClientRpcService,
                    > tonic::server::UnaryService<super::GetClientReq>
                    for GetClientSvc<T> {
                        type Response = super::ClientEntity;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetClientReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ClientRpcService>::get_client(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetClientSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for ClientRpcServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "online_service.ClientRpcService";
    impl<T> tonic::server::NamedService for ClientRpcServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
