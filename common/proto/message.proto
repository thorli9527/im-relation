syntax = "proto3";
import "google/protobuf/empty.proto";
package message;
enum ContentType {
  // 未知
  UNKNOWN = 0;
  // 文本
  TEXT = 1;
  // 图片
  IMAGE = 2;
  // 音频
  AUDIO = 3;
  // 视频
  VIDEO = 4;
  // 富文本
  HTML = 5;
  // 位置
  LOCATION = 6;
  // 文件
  FILE = 7;
  // 表情
  EMOJI = 8;
  // 引用
  QUOTE = 9;
  // 音视频通话信令
  AV_CALL = 10;
  // VOIP 通话记录
  VOIP = 11;
  // 通知
  NOTIFICATION = 12;
  // 系统消息
  SYSTEM = 13;
  // 提醒
  REMINDER = 14;
  // 好友事件
  FRIEND_EVENT = 15;
  // 消息撤回
  REVOKE = 17;
  // 消息转发
  FORWARD = 18;
  // 名片
  CONTACT_CARD = 19;
  // 投票
  VOTE = 20;
  // 红包
  RED_ENVELOPE = 21;
  // 加密消息（仅 MessageContent 加密；顶层元数据保持明文）
  ENCRYPTED = 22;
  // 通用业务确认/通知（处理结果回执）
  ACK = 23;
  // 自定义消息
  CUSTOM = 100;
}



// ======================================
// 😄 Emoji 类型定义（标准 + 自定义）
// ======================================
// 定义了系统中支持的 emoji 类型，包括标准 emoji 和自定义表情
enum EmojiType {
  EMOJI_UNKNOWN = 0;
  // 微笑表情
  SMILE = 1;
  // 咧嘴笑表情
  GRIN = 2;
  // 流泪表情
  TEARS = 3;
  // 吐舌头表情
  STUCK_OUT_TONGUE = 4;
  // 鼓掌表情
  CLAP = 25;
  // 便便表情
  POOP = 28;
  // 爱心表情
  HEART = 21;
  // ... 可继续扩展标准 Emoji
  // 自定义表情（通过图片 URL 指定）
  CUSTOM_EMOJI = 1000;
}

// 通话媒体类型
enum CallMediaType {
  // 语音
  CALL_AUDIO = 0;
  // 视频
  CALL_VIDEO = 1;
}

// 通话结束原因
enum CallEndReason {
  // 未指定
  CER_UNSPECIFIED = 0;
  // 主动取消
  CER_CANCELLED = 1;
  // 对方拒绝
  CER_REJECTED = 2;
  // 对方忙
  CER_BUSY = 3;
  // 超时未应答
  CER_TIMEOUT = 4;
  // 正常挂断
  CER_HANGUP = 5;
  // 失败/异常
  CER_FAILED = 6;
}

// 通话内修改类型
enum CallModifyType {
  // 静音/取消静音
  CMT_MUTE = 0;
  // 开/关摄像头
  CMT_CAMERA = 1;
  // 保持/恢复通话
  CMT_HOLD = 2;
  // 切换前后摄
  CMT_SWITCH_CAMERA = 3;
}
enum ChatScene {
  // 默认未知场景（防御值）
  CHAT_UNKNOWN = 0;
  // 单人会话：用户与用户之间的私聊
  SINGLE = 1;
  // 群聊会话：群组内的多人聊天
  GROUP = 2;
}
// ======================================
// 💠 消息内容结构（oneof 类型）
// ======================================
// 使用 oneof 定义不同类型的消息内容，确保消息类型的互斥性
message MessageContent {
  oneof content {
    // 文本消息：纯文本内容
    TextContent text = 1;
    // 图片消息：图片文件
    ImageContent image = 2;
    // 音频消息：语音或音乐
    AudioContent audio = 3;
    // 视频消息：视频文件
    VideoContent video = 4;
    // 位置消息：地理位置信息
    LocationContent location = 5;
    // 文件消息：任意文件类型
    FileContent file = 6;
    // 音视频通话信令：通话控制消息
    AVCallContent av_call = 7;
    // 自定义消息：开发者自定义结构
    CustomContent custom = 8;
    // 表情消息：emoji 表情
    EmojiContent emoji = 9;
    // 撤回消息：消息撤回通知
    RevokeContent revoke = 10;
    // 转发消息：消息转发
    ForwardContent forward = 11;
    // 引用回复消息：回复特定消息
    QuoteContent quote = 12;
    // HTML 卡片：富文本内容
    HtmlContent html = 13;
    // VOIP 通话记录：通话日志
    VoipContent voip = 14;
    // 通知消息：系统通知
    NotificationContent notification = 15;
    // 系统消息：系统级消息
    SystemContent system = 16;
    // 提醒消息：提醒事项
    ReminderContent reminder = 17;
    // 群组事件：群组相关事件
    GroupEventContent group_event = 18;
    // 名片消息：联系人分享
    ContactCardContent contact_card = 19;
    // 投票消息：投票内容
    VoteContent vote = 20;
    // 红包消息：红包内容
    RedEnvelopeContent red_envelope = 21;
    // 加密内容封装（端到端加密）
    EncryptedContent encrypted = 22;
    // 通用业务确认/通知（处理结果回执）
    AckContent ack = 23;
  }
}

// ===============================
// ✅ 通用业务确认/通知（处理结果回执）
// ===============================
// 用于服务端向客户端回传“该业务已处理”的标准结构。
message AckContent {
  // 是否成功
  bool ok = 1;
  // 业务错误码（0 表示无错误）
  int32 code = 2;
  // 文本信息（可本地化）
  string message = 3;
  // 请求的业务种类（如 socket 的 MsgKind 值）
  int32 request_kind = 4;
  // 可选的引用消息 ID（与此次处理相关的消息）
  optional uint64 ref_message_id = 5;
  // 附加数据（预留）
  bytes extra = 6;
}

// ===============================
// 📄 文本消息
// ===============================
// 支持纯文本和富文本格式，包含内联实体（链接、@用户、话题等）
message TextContent {
  // 文本主体内容：消息的文本内容
  string text = 1;
  // 富文本实体，如链接/@用户/话题：文本中的特殊元素
  repeated InlineEntity entities = 2;
}

// 内联实体：用于在文本中标记特殊元素
message InlineEntity {
  // 起始位置（UTF-8 字符索引）：实体在文本中的开始位置
  int32 start = 1;
  // 结束位置（不含）：实体在文本中的结束位置
  int32 end = 2;
  // 类型：link / mention / hashtag：实体的类型
  string type = 3;
  // 附加值：URL、用户ID等：实体的具体值
  string value = 4;
}

// ===============================
// 🖼️ 图片消息
// ===============================
// 包含图片的完整信息，支持原图和缩略图
message ImageContent {
  // 原图 URL：图片的完整地址
  string url = 1;
  // 缩略图 URL：图片的缩略图地址
  string thumbnail_url = 2;
  // 宽度（像素）：图片的宽度
  int32 width = 3;
  // 高度（像素）：图片的高度
  int32 height = 4;
  // 格式（如 jpg/png）：图片的文件格式
  string format = 5;
  // 文件大小（字节）：图片文件的大小
  int64 size = 6;
}

// ===============================
// 🔊 音频消息
// ===============================
// 支持语音聊天和音乐播放，包含时长和格式信息
message AudioContent {
  // 音频文件 URL：音频文件的地址
  string url = 1;
  // 时长（秒）：音频的播放时长
  int32 duration = 2;
  // 格式：音频文件格式（如 mp3/wav）
  string format = 3;
  // 文件大小（字节）：音频文件的大小
  int64 size = 4;
  // 是否语音（vs 音乐类音频）：true表示语音，false表示音乐
  bool is_voice = 5;
}

// ===============================
// 🎞️ 视频消息
// ===============================
// 包含视频文件和封面图，支持播放控制
message VideoContent {
  // 视频文件 URL：视频文件的地址
  string url = 1;
  // 时长（秒）：视频的播放时长
  int32 duration = 2;
  // 封面图 URL：视频的封面图片
  string cover_url = 3;
  // 宽度（像素）：视频的宽度
  int32 width = 4;
  // 高度（像素）：视频的高度
  int32 height = 5;
  // 格式：视频文件格式（如 mp4/avi）
  string format = 6;
  // 文件大小（字节）：视频文件的大小
  int64 size = 7;
}

// ===============================
// 📍 位置消息
// ===============================
// 包含地理位置信息，支持地址描述和地图显示
message LocationContent {
  // 纬度：地理位置的纬度坐标
  double latitude = 1;
  // 经度：地理位置的经度坐标
  double longitude = 2;
  // 地址描述：位置的文字描述
  string address = 3;
  // 地点名称：具体的地点名称
  string poi_name = 4;
  // 缩略图 URL：位置的地图缩略图
  string thumbnail_url = 5;
}

// ===============================
// 📁 文件消息
// ===============================
// 支持任意文件类型，包含文件信息和图标
message FileContent {
  // 文件 URL：文件的下载地址
  string url = 1;
  // 文件名：文件的显示名称
  string name = 2;
  // 文件大小（字节）：文件的大小
  int64 size = 3;
  // 文件类型：文件的 MIME 类型
  string file_type = 4;
  // 图标 URL：文件类型的图标
  string icon_url = 5;
}

// ===============================
// 📞 音视频通话信令
// ===============================
// 用于音视频通话的控制信令，包含通话状态和参与者信息
message AVCallContent {
  // 通话 ID：通话的唯一标识
  string call_id = 1;
  // 发起者 ID：通话的发起用户
  int64 initiator_uid = 2;
  // 参与者 ID 列表：通话的所有参与者
  repeated int64 participant_ids = 3;
  enum CallAction {
    // 未知操作
    UNKNOWN = 0;
    // 邀请：发起通话邀请
    INVITE = 1;
    // 接受：接受通话邀请
    ACCEPT = 2;
    // 拒绝：拒绝通话邀请
    REJECT = 3;
    // 取消：取消通话
    CANCEL = 4;
    // 结束：结束通话
    END = 5;
    // 超时：通话超时
    TIMEOUT = 6;
  }
  // 通话操作：具体的通话动作
  CallAction action = 4;
  enum CallType {
    // 音频通话：仅语音通话
    AUDIO = 0;
    // 视频通话：音视频通话
    VIDEO = 1;
  }
  // 通话类型：通话的类型
  CallType type = 5;
  // 时间戳：操作的时间
  int64 timestamp = 6;
  // 时长（秒）：通话的持续时间
  int32 duration = 7;
}

// ===============================
// 💠 自定义结构化消息
// ===============================
// 支持开发者自定义的消息结构，通常以 JSON 格式承载
message CustomContent {
  // 自定义类型：消息的自定义类型标识
  string custom_type = 1;
  // JSON 载荷：自定义消息的 JSON 数据
  string json_payload = 2;
}

// ===============================
// 😄 表情消息
// ===============================
// 支持标准 emoji 和自定义表情
message EmojiContent {
  // 表情类型：标准 emoji 类型
  EmojiType emoji = 1;
  // 自定义表情 URL：自定义表情的图片地址
  string custom_emoji_url = 2;
}

// ===============================
// ⛔ 撤回消息
// ===============================
// 用于通知消息撤回，包含撤回的目标消息信息
message RevokeContent {
  // 目标消息 ID：被撤回的消息ID
  int64 target_message_id = 1;
  // 操作者 ID：执行撤回操作的用户
  int64 operator_id = 2;
  // 撤回时间：撤回操作的时间戳
  int64 revoke_time = 3;
}

// ===============================
// 📤 转发消息
// ===============================
// 用于消息转发，包含原消息的基本信息
message ForwardContent {
  // 原消息 ID：被转发消息的ID
  uint64 original_message_id = 1;
  // 原发送者 ID：原消息的发送者
  string original_sender_id = 2;
  // 原消息类型：原消息的类型
  ContentType original_type = 3;
  // 摘要：转发的摘要信息
  string summary = 4;
}

// ===============================
// 📌 引用回复消息
// ===============================
// 用于回复特定消息，包含被引用消息的信息
message QuoteContent {
  // 被引用消息 ID：被回复消息的ID
  uint64 quoted_message_id = 1;
  // 被引用内容预览：被回复消息的预览
  string quoted_content_preview = 2;
  // 引用文本：回复的文本内容
  string quote_text = 3;
}

// ===============================
// 🌐 HTML 卡片
// ===============================
// 用于富文本内容，支持网页链接和预览
message HtmlContent {
  // 标题：卡片的标题
  string title = 1;
  // URL：链接地址
  string url = 2;
  // 预览：内容的预览文本
  string preview = 3;
}

// ===============================
// 📞 VOIP 通话记录
// ===============================
// 用于记录通话历史，包含通话的基本信息
message VoipContent {
  // 主叫 ID：发起通话的用户
  string caller_id = 1;
  // 被叫 ID：接收通话的用户
  string callee_id = 2;
  // 通话时长（秒）：通话的持续时间
  int64 duration = 3;
  // 通话状态：通话的结果状态
  string status = 4;
}

// ===============================
// 🔔 通知消息
// ===============================
// 用于系统通知，包含标题、内容和元数据
message NotificationContent {
  // 标题：通知的标题
  string title = 1;
  // 内容：通知的主体内容
  string body = 2;
  // 元数据：通知的附加信息
  map<string, string> metadata = 3;
}

// ===============================
// ⚙️ 系统消息
// ===============================
// 用于系统级消息，包含系统代码和内容
message SystemContent {
  // 内容：系统消息的内容
  string content = 1;
  // 代码：系统消息的代码标识
  string code = 2;
}

// ===============================
// ⏰ 提醒事项
// ===============================
// 用于提醒功能，包含提醒文本和时间
message ReminderContent {
  // 文本：提醒的内容
  string text = 1;
  // 提醒时间：提醒触发的时间戳
  int64 remind_at = 2;
}

// ===============================
// 👥 群组事件
// ===============================
// 用于群组相关事件，包含群组信息和操作者
message GroupEventContent {
  // 群组 ID：事件相关的群组
  int64 group_id = 1;
  // 事件：事件的具体描述
  string event = 2;
  // 操作者 ID：执行操作的用户
  int64 operator_id = 3;
}



// ===============================
// 📇 名片消息
// ===============================
// 用于分享联系人信息，包含用户的基本信息
message ContactCardContent {
  // 目标 ID：被分享用户的ID
  string target_id = 1;
  // 显示名称：用户的显示名称
  string display_name = 2;
  // 头像 URL：用户的头像地址
  string avatar_url = 3;
  // 卡片类型：名片的类型（用户/群组）
  string card_type = 4;
}

// ===============================
// 📊 投票消息
// ===============================
// 用于群组投票功能，包含投票选项和结果
message VoteContent {
  // 主题：投票的主题
  string topic = 1;
  // 选项：投票的选项列表
  repeated string options = 2;
  // 结果：投票结果统计
  map<string, int32> result = 3;
  // 多选：是否允许多选
  bool multi_choice = 4;
}

// ===============================
// 💰 红包消息
// ===============================
// 用于红包功能，包含红包金额和状态
message RedEnvelopeContent {
  // 发送者 ID：红包发送者
  int64 sender_id = 1;
  // 金额：红包金额（分）
  int32 amount = 2;
  // 祝福语：红包的祝福语
  string blessing = 3;
  // 是否已领取：红包是否已被领取
  bool claimed = 4;
}

// ======================================
// ✂️ Segment - 消息段结构（用于复合内容）
// ======================================
// 表示一条消息中的一个独立段（如文本段、图片段等），支持排序、编辑、标记等
message Segment {
  // 消息段内容（如文本、图片等，使用 oneof 封装）：段的具体内容
  MessageContent body = 1;
  // 消息内顺序编号（用于前端渲染排序）：段在消息中的顺序
  uint64 seq_in_msg = 2;
  // 通用扩展字段（以字符串键值对存储 JSON 扁平数据）：段的元数据
  map<string, string> metadata = 3;
}

// ======================================
// 📨 顶层消息结构
// ======================================
// 定义了消息的基本框架，包含发送者、接收者、时间等元数据
message Content {
  // 唯一消息 ID（客户端生成或服务端补全）：消息的唯一标识
  optional uint64 message_id = 1;
  // 消息发送方：发送消息的用户ID
  int64 sender_id = 2;
  // 消息接收方（单聊为对方 ID，群聊为群 ID）：接收消息的目标
  int64 receiver_id = 3;
  // 消息发送时间（毫秒时间戳）：消息创建的时间
  int64 timestamp = 4;

  // 主消息类型（用于快速渲染判断）：消息的主要类型
  ContentType message_type = 5;
  // 消息所属会话类型（单聊/群聊）：消息的会话场景
  ChatScene scene = 6;

  // 多段复合内容（如文本 + 图片）：消息的具体内容
  repeated MessageContent contents = 10;
}

// =====================
// 语音/视频通话信令（MK_FRIEND_CALL_*）
// =====================

// 发起呼叫（带 SDP offer）
message CallInvite {
  // 通话ID（全局唯一字符串/雪花）
  string call_id = 1;
  // 主叫用户ID
  int64 from_user_id = 2;
  // 被叫用户ID
  int64 to_user_id = 3;
  // 媒体类型（语音/视频）
  CallMediaType media_type = 4;
  // SDP offer（若使用 WebRTC）
  string sdp_offer = 5;
  // 扩展字段
  optional string ext = 6;
  // 发起时间
  uint64 created_at = 7;
}

// 取消呼叫（振铃阶段）
message CallCancel {
  // 通话ID
  string call_id = 1;
  // 操作者
  int64 operator_user_id = 2;
  // 原因（可选）
  optional string reason = 3;
  // 时间
  uint64 at = 4;
}

// 拒绝呼叫
message CallReject {
  // 通话ID
  string call_id = 1;
  // 拒绝者
  int64 reject_user_id = 2;
  // 原因（可选）
  optional string reason = 3;
  // 时间
  uint64 at = 4;
}

// 接受呼叫（带 SDP answer）
message CallAccept {
  // 通话ID
  string call_id = 1;
  // 接受者
  int64 accept_user_id = 2;
  // SDP answer（若使用 WebRTC）
  string sdp_answer = 3;
  // 时间
  uint64 at = 4;
}

// 通话结束/挂断
message CallHangup {
  // 通话ID
  string call_id = 1;
  // 操作者
  int64 operator_user_id = 2;
  // 结束原因
  CallEndReason reason = 3;
  // 通话时长（毫秒，可选）
  optional uint64 duration_ms = 4;
  // 时间
  uint64 at = 5;
}

// 通话中修改（静音/开关摄像头等）
message CallModify {
  // 通话ID
  string call_id = 1;
  // 操作者
  int64 operator_user_id = 2;
  // 修改类型
  CallModifyType modify = 3;
  // 开关值（true=开/启用，false=关/禁用）
  bool on = 4;
  // 时间
  uint64 at = 5;
}

// DTMF 信令
message CallDtmf {
  // 通话ID
  string call_id = 1;
  // 发送者
  int64 from_user_id = 2;
  // DTMF 按键序列（如 "123#*")
  string digits = 3;
  // 时间
  uint64 at = 4;
}

// ===============
// 消息状态/操作模型
// ===============

// 送达回执确认（客户端→服务端：收到 delivered）
message MsgDeliveredAck {
  int64 msg_id = 1;
  int64 ack_user_id = 2;
  int64 ack_at = 3;
}

// 已读上报（客户端→服务端）
message MsgRead {
  int64 msg_id = 1;
  int64 user_id = 2;
  int64 chat_id = 3; // 单聊：对方ID；群聊：群ID
  int64 read_at = 4;
}

// 已读回执确认（服务端→客户端：收到 read）
message MsgReadAck {
  int64 msg_id = 1;
  int64 ack_user_id = 2;
  int64 ack_at = 3;
}

// 消息撤回
message MsgRecall {
  int64 msg_id = 1;
  int64 operator_user_id = 2;
  optional string reason = 3;
  int64 recalled_at = 4;
}

// 消息转发
message MsgForward {
  int64 src_msg_id = 1;
  optional int64 new_msg_id = 2;
  int64 from_user_id = 3;
  int64 to_user_id = 4;
  int64 created_at = 5;
}

// Reaction 操作
enum ReactionAction {
  RA_ADD = 0;
  RA_REMOVE = 1;
}

// 消息表态（emoji/reaction）
message MsgReaction {
  int64 msg_id = 1;
  int64 user_id = 2;
  ReactionAction action = 3;
  string emoji = 4;
  int64 at = 5;
}

// 正在输入状态
enum TypingState {
  TYPING_NONE = 0;
  TYPING_TEXT = 1;
  TYPING_VOICE = 2;
  TYPING_UPLOAD = 3;
}

// 正在输入
message Typing {
  int64 from_user_id = 1;
  TypingState state = 3;
  int64 at = 4;

  oneof target {
    int64 to_user_id = 2;
    int64 group_id = 5;
  }

  repeated int64 notify_user_ids = 6;
}

// ===============
// 加密载荷封装（端到端加密）
// ===============
// 说明：服务端只透传本结构中的密文，不解密
message EncryptedContent {
  // 加密方案标识，如 "x25519+chacha20poly1305"
  string scheme = 1;
  // 发送方的会话公钥（如 X25519 公钥）
  bytes sender_pub = 2;
  // 会话/密钥标识（便于接收端定位密钥材料）
  string key_id = 3;
  // AEAD 随机数/计数随机量
  bytes nonce = 4;
  // AEAD 密文（含认证标签）；密文内容为“单条 MessageContent 的 Protobuf 编码”
  // 注意：仅对 MessageContent 加密，顶层 Content 的元数据（sender/receiver/timestamp/scene/message_type）保持明文
  bytes ciphertext = 5;
  // 附加认证数据（A.A.D.，可为空）
  // 建议包含：message_id|sender_id|receiver_id|scene|timestamp（按一致序拼接），用于端到端防篡改
  bytes aad = 6;
  // 发送方本地单调消息序号（防重放/乱序）
  uint64 msg_no = 7;
}
