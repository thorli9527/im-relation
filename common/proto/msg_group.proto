syntax = "proto3";

import "google/protobuf/empty.proto";
import "message.proto";

package msg_group_service;

// -----------------------------------------------------------------------------
// msg_group::group.proto（附加详细备注版）
// -----------------------------------------------------------------------------
// 设计目标：
// - 对外“群业务接口”网关，仅编排与校验，核心数据与权限与热服务（hot_group_service）对齐；
// - 所有“时间戳”统一毫秒（ms）；分页从 1 开始；当字段为 optional/可空时，空值表示“不修改/不设置”；
// - 服务端需保证幂等性：对于“写入类”接口以业务主键去重（如同一用户、同一群、同一 join 事件）；
// - 安全：所有写接口均需鉴权（operator_id / sender_id 必须等于调用者 UID）；越权操作应返回 PERMISSION_DENIED；
// - 审计：写操作建议落审计日志（操作者、目标、时间、来源、备注）；
// - 兼容：字段仅追加不删除；枚举新增值向后兼容；客户端遇未知枚举值应降级处理；
// - 文档生成建议：将下方注释生成到 OpenAPI/Markdown 以供前后端/移动端统一对齐。
// -----------------------------------------------------------------------------

// ===============
// 基础枚举/模型（与后端一致）
// ===============

// -----------------------------------------------------------------------------
// 群成员角色类型（与数据库/内存中的角色编码严格对齐）
// - 角色决定可执行的管理操作范围（审批、邀请、踢人、改别名、改角色等）；
// - 角色升级/降级需满足业务约束（仅群主可设为 ADMIN/转让 OWNER）；
// -----------------------------------------------------------------------------
enum GroupRoleType {
  // 群主（最高权限；可解散群、转让群主、设/撤管理员、踢人）
  OWNER = 0;
  // 管理员（可审批、邀请、踢人；不可解散群、不可转让群主）
  ADMIN = 1;
  // 普通成员（仅参与聊天、可退群、可更新自己的别名）
  MEMBER = 2;
}

// -----------------------------------------------------------------------------
// 加群权限控制
// - 用于 GetGroup 查询与前端入群入口显隐；
// - 修改该配置应触发缓存刷新与事件通知（可选）；
// -----------------------------------------------------------------------------
enum JoinPermission {
  // 任何人可直接加入（不走审批流）
  ANYONE = 0;
  // 申请后需群主或管理员审批
  NEED_APPROVAL = 1;
  // 仅允许邀请加入（成员/管理员发起邀请）
  INVITE_ONLY = 2;
  // 完全关闭加入能力（仅保留当前成员）
  CLOSED = 3;
}

// -----------------------------------------------------------------------------
// 群组类型
// - NORMAL：常规上限；SUPER：更高人数上限/特殊路由；SYSTEM：系统内置（公告/客服）；
// - 不同类型在服务端可能走不同配额/限流策略；
// -----------------------------------------------------------------------------
enum GroupType {
  // 未知（保底值；不应在正常业务流出现）
  UNKNOWN_GROUP_TYPE = 0;
  // 普通群组
  NORMAL_GROUP = 1;
  // 超级群组（高并发/高上限）
  SUPER_GROUP = 2;
  // 系统群组（内置用途，不对外创建）
  SYSTEM_GROUP = 3;
}

// -----------------------------------------------------------------------------
// 成员引用（轻量成员视图）
// - 在成员列表、事件通知、Socket 推送中广泛使用；
// - alias 可为空；role 必填；
// -----------------------------------------------------------------------------
message MemberRef {
  // 成员用户唯一 ID（必填）
  int64 id = 1;
  // 群内别名；缺省或空串表示不设置别名
  optional string alias = 2;
  // 角色（OWNER/ADMIN/MEMBER）
  GroupRoleType role = 3;
}

// -----------------------------------------------------------------------------
// 群信息（对外查询返回）
// - 所有时间戳单位为毫秒；member_cnt 为近实时统计，可能略有延迟；
// - allow_search=true 表示允许通过搜索/公开入口被发现；enable=false 视为冻结/不可用；
// -----------------------------------------------------------------------------
message GroupInfo {
  // 群 ID（全局唯一）
  int64 id = 1;
  // 群名称（1~64 字；服务端需做敏感词/非法字符校验）
  string name = 2;
  // 群头像 URL（建议 https；服务端可代管上传）
  string avatar = 3;
  // 群简介/描述（0~256 字）
  string description = 4;
  // 群公告/置顶通知（0~1024 字）
  string notice = 5;
  // 加群权限（ANYONE/NEED_APPROVAL/INVITE_ONLY/CLOSED）
  JoinPermission join_permission = 6;
  // 群主 UID
  int64 owner_id = 7;
  // 群类型（NORMAL/SUPER/SYSTEM）
  GroupType group_type = 8;
  // 是否允许被搜索到（公开属性）
  bool allow_search = 9;
  // 是否启用（false 表示被封禁/冻结）
  bool enable = 10;
  // 创建时间（毫秒）
  uint64 create_time = 11;
  // 最近一次资料更新时间（毫秒）
  uint64 update_time = 12;
  // 成员数量（近实时）
  uint32 member_cnt = 13;
}

// ===============
// 管理/资料
// ===============

// -----------------------------------------------------------------------------
// 创建群请求
// - creator_id 必须为当前登录用户；members 不含自己；
// - name/intro/avatar 存在内容安全与长度限制；
// - 返回 group_id；建议服务端在创建成功后发送系统欢迎消息（可选）；
// -----------------------------------------------------------------------------
message CreateGroupReq {
  // 群创建者 UID（=调用者）
  int64 creator_id = 1;
  // 群名称（1~64 字）
  string name = 2;
  // 初始成员列表（不含 creator_id；长度上限由产品策略决定）
  repeated int64 members = 3;
  // 头像 URL（可空）
  string avatar = 4;
  // 群简介（可空；0~256 字）
  string intro = 5;
}

// -----------------------------------------------------------------------------
// 创建群返回
// -----------------------------------------------------------------------------
message CreateGroupResp {
  // 新建群的 ID
  int64 group_id = 1;
}

// -----------------------------------------------------------------------------
// 更新群资料
// - 允许更新 name/avatar/intro；operator_id 必须具备权限（OWNER/ADMIN）；
// - 空串不代表“清空”，而是“将该字段更新为空串”；如果想“不修改”，请勿下发该字段（proto3 默认空值）；
// -----------------------------------------------------------------------------
message UpdateGroupProfileReq {
  // 操作者 UID（=调用者）
  int64 operator_id = 1;
  // 目标群 ID
  int64 group_id = 2;
  // 新名称（可选；若不修改请勿下发）
  string name = 3;
  // 新头像（可选）
  string avatar = 4;
  // 新简介（可选）
  string intro = 5;
}

// -----------------------------------------------------------------------------
// 解散群（仅群主）
// - 解散后应解除所有成员关系，写回执与历史消息保留策略按后端配置；
// -----------------------------------------------------------------------------
message DismissGroupReq {
  // 操作者 UID（必须为群主）
  int64 operator_id = 1;
  // 目标群 ID
  int64 group_id = 2;
}

// ===============
// 成员变更
// ===============

// -----------------------------------------------------------------------------
// 加群请求
// - 支持自主加入或携带邀请信息；
// - inviter_* 字段仅在被邀请场景下填写；join_time_ms 为客户端触发时间（毫秒）；
// - extra/join_source 用于业务扩展（如来源渠道、备注等）；
// -----------------------------------------------------------------------------
message JoinGroupReq {
  // 目标群 ID
  int64 group_id = 1;
  // 申请人 UID（=调用者）
  int64 user_id = 2;
  // 申请附言（可空，0~256 字）
  string extra = 3;
  // 申请来源（如 qrcode/search/share_link…）
  string join_source = 4;
  // 邀请人 UID（若为被邀请入群场景）
  int64 inviter_id = 5;
  // 邀请附言（可空）
  string inviter_extra = 6;
  // 邀请来源（如 member_invite/admin_invite）
  string inviter_join_source = 7;
  // 客户端记录的申请时间（ms；可用于去重/风控）
  int64 join_time_ms = 8;
}

// -----------------------------------------------------------------------------
// 主动退群
// - user_id 必须等于调用者；群主退群需转让群主或拒绝；
// -----------------------------------------------------------------------------
message LeaveGroupReq {
  // 目标群 ID
  int64 group_id = 1;
  // 退群用户 UID（=调用者）
  int64 user_id = 2;
  // 退群原因（可空；用于审计/画像）
  string reason = 3;
}

// -----------------------------------------------------------------------------
// 审批加群
// - operator_id 必须具备审批权限（OWNER/ADMIN）；accept=true 通过，否则拒绝；
// - remark 为审批备注；建议写入 Join 审批流水；
// -----------------------------------------------------------------------------
message ApproveJoinReq {
  // 目标群 ID
  int64 group_id = 1;
  // 审批人 UID（=调用者）
  int64 operator_id = 2;
  // 申请人 UID
  int64 applicant_id = 3;
  // true=通过；false=拒绝
  bool accept = 4;
  // 审批备注（可空）
  string remark = 5;
}

// -----------------------------------------------------------------------------
// 邀请成员
// - operator_id 必须具备邀请权限；invitee_ids 不得包含已在群内的用户（服务端需去重/过滤）；
// - extra 可记录批次号/来源；
// -----------------------------------------------------------------------------
message InviteMembersReq {
  // 目标群 ID
  int64 group_id = 1;
  // 邀请发起人 UID（=调用者）
  int64 operator_id = 2;
  // 被邀请用户 UID 列表（去重）
  repeated int64 invitee_ids = 3;
  // 扩展信息（可空）
  string extra = 4;
}

// -----------------------------------------------------------------------------
// 踢出成员
// - operator_id 必须具备权限；不可踢 OWNER；ADMIN 之间互踢策略按产品定义（通常不允许）；
// -----------------------------------------------------------------------------
message KickMemberReq {
  // 目标群 ID
  int64 group_id = 1;
  // 操作者 UID（=调用者）
  int64 operator_id = 2;
  // 被移除用户 UID
  int64 target_id = 3;
  // 原因（可空；用于审计）
  string reason = 4;
}

// -----------------------------------------------------------------------------
// 更新群名片/别名
// - operator 可更新自己或（ADMIN/OWNER）更新他人别名；空串表示清空；
// -----------------------------------------------------------------------------
message UpdateMemberAliasReq {
  // 目标群 ID
  int64 group_id = 1;
  // 操作者 UID（=调用者）
  int64 operator_id = 2;
  // 目标用户 UID（可=operator_id）
  int64 target_id = 3;
  // 新别名；空串表示清空；长度建议 0~32 字
  string alias = 4;
}

// -----------------------------------------------------------------------------
// 调整成员角色
// - 仅群主可调用；不可将自己直接降为 MEMBER 而无人接任 OWNER（需走转让流程）；
// -----------------------------------------------------------------------------
message ChangeMemberRoleReq {
  // 目标群 ID
  int64 group_id = 1;
  // 操作者 UID（必须为群主）
  int64 operator_id = 2;
  // 目标成员 UID
  int64 target_id = 3;
  // 新角色（ADMIN/MEMBER；OWNER 转让需单独流程或在后端校验）
  GroupRoleType role = 4;
}

// ===============
// 查询
// ===============

// -----------------------------------------------------------------------------
// 查询群资料
// - 返回 GroupInfo；若群被冻结/解散，服务端可返回 NOT_FOUND 或 enable=false；
// -----------------------------------------------------------------------------
message GetGroupReq {
  // 群 ID
  int64 group_id = 1;
}

// -----------------------------------------------------------------------------
// 分页查询群成员
// - page 从 1 开始；page_size 建议 1..=100；
// - 返回 MemberRef 列表与可选 total；total 获取可能影响性能，默认不强制计算；
// -----------------------------------------------------------------------------
message GetMembersReq {
  // 群 ID
  int64 group_id = 1;
  // 页码（从 1 开始）
  uint32 page = 2;
  // 每页大小（建议 1..=100）
  uint32 page_size = 3;
}

// -----------------------------------------------------------------------------
// 成员分页返回
// -----------------------------------------------------------------------------
message GetMembersResp {
  // 成员轻量视图列表
  repeated MemberRef members = 1;
  // 成员总数（可选填充；未填充表示未计算）
  uint64 total = 2;
}

// -----------------------------------------------------------------------------
// 统计成员数量
// - 返回 count；与 GroupInfo.member_cnt 可能略有差异（强一致 vs 近实时缓存）；
// -----------------------------------------------------------------------------
message CountMembersReq {
  // 群 ID
  int64 group_id = 1;
}

// -----------------------------------------------------------------------------
// 成员数量返回
// -----------------------------------------------------------------------------
message CountMembersResp {
  // 成员数
  uint64 count = 1;
}

// -----------------------------------------------------------------------------
// 查询用户参与的所有群
// - 用于“我的群列表”初始化；返回 group_ids（可分页扩展）；
// -----------------------------------------------------------------------------
message UserGroupsReq {
  // 用户 UID
  int64 user_id = 1;
}

// -----------------------------------------------------------------------------
// 用户群列表返回
// -----------------------------------------------------------------------------
message UserGroupsResp {
  // 群 ID 列表
  repeated int64 group_ids = 1;
}

// ===============
// 事件通知（投递到客户端）
// ===============

// -----------------------------------------------------------------------------
// 入群申请通知（发给审批人/群主/管理员）
// - 包含申请/邀请的关键上下文，用于前端渲染审批页；
// -----------------------------------------------------------------------------
message JoinRequestNotice {
  // 目标群 ID
  int64 group_id = 1;
  // 群名称快照（避免名称变更引发的前端闪烁）
  string group_name = 2;
  // 申请人 UID
  int64 applicant_id = 3;
  // 申请附言
  string extra = 4;
  // 申请来源
  string join_source = 5;
  // 邀请人 UID（若有）
  int64 inviter_id = 6;
  // 邀请附言
  string inviter_extra = 7;
  // 申请时间（毫秒）
  int64 request_time = 8;
}

// -----------------------------------------------------------------------------
// 入群申请处理结果通知（发给申请人/相关管理员）
// -----------------------------------------------------------------------------
message JoinRequestHandledNotice {
  // 目标群 ID
  int64 group_id = 1;
  // 申请人 UID
  int64 applicant_id = 2;
  // 审批人 UID
  int64 operator_id = 3;
  // 审批结果（true=通过 / false=拒绝）
  bool accepted = 4;
  // 审批备注
  string remark = 5;
  // 审批时间（毫秒）
  int64 handled_at = 6;
}

// -----------------------------------------------------------------------------
// 群成员变更通知（入群/退群/踢人/改角色/改别名等）
// - reason 示例：auto / approval / invite / kick / leave / role_change / alias_change；
// -----------------------------------------------------------------------------
message GroupMemberChangeNotice {
  // 群 ID
  int64 group_id = 1;
  // 操作者 UID（系统自动为 0 或特定保留值）
  int64 operator_id = 2;
  // 变动成员信息（含 id/alias/role）
  MemberRef member = 3;
  // 业务原因（字符串，便于前端展示与埋点统计）
  string reason = 4;
  // 事件时间（毫秒）
  int64 event_time = 5;
}

// ===============
// 服务
// ===============

// -----------------------------------------------------------------------------
// 群业务编排服务（Biz）
// - 所有写操作需鉴权与权限校验；返回 Empty 表示仅代表“受理成功”或“无返回体”的成功；
// - 失败返回标准 gRPC 错误码（如 INVALID_ARGUMENT / PERMISSION_DENIED / NOT_FOUND / ALREADY_EXISTS）；
// -----------------------------------------------------------------------------
service GroupBizService {
  // 创建群（幂等：可用 creator_id+name+时间窗 去重）
  rpc CreateGroup(CreateGroupReq) returns (CreateGroupResp);
  // 更新群资料（需 OWNER/ADMIN 权限）
  rpc UpdateGroupProfile(UpdateGroupProfileReq) returns (google.protobuf.Empty);
  // 解散群（仅群主；解散后不可恢复）
  rpc DismissGroup(DismissGroupReq) returns (google.protobuf.Empty);

  // 申请/邀请入群（根据 JoinPermission 与 inviter_* 分支处理）
  rpc JoinGroup(JoinGroupReq) returns (google.protobuf.Empty);
  // 主动退群（群主需先转让）
  rpc LeaveGroup(LeaveGroupReq) returns (google.protobuf.Empty);
  // 审批入群（OWNER/ADMIN）
  rpc ApproveJoin(ApproveJoinReq) returns (google.protobuf.Empty);
  // 邀请成员（OWNER/ADMIN，或成员在 INVITE_ONLY 策略下具备的邀请权）
  rpc InviteMembers(InviteMembersReq) returns (google.protobuf.Empty);
  // 踢出成员（OWNER/ADMIN）
  rpc KickMember(KickMemberReq) returns (google.protobuf.Empty);
  // 更新群内别名（自改或管理员改）
  rpc UpdateMemberAlias(UpdateMemberAliasReq) returns (google.protobuf.Empty);
  // 调整角色（仅群主；升级/降级）
  rpc ChangeMemberRole(ChangeMemberRoleReq) returns (google.protobuf.Empty);

  // 查询群资料（含成员数、权限等）
  rpc GetGroup(GetGroupReq) returns (GroupInfo);
  // 分页查询群成员（轻量列表）
  rpc GetMembers(GetMembersReq) returns (GetMembersResp);
  // 成员数量统计（强一致/准实时，取决于实现）
  rpc CountMembers(CountMembersReq) returns (CountMembersResp);
  // 查询用户参与的群 ID 列表
  rpc UserGroups(UserGroupsReq) returns (UserGroupsResp);
}

// -----------------------------------------------------------------------------
// 群消息服务（Msg）
// - SendMessage 仅负责写入/透传 socket；服务端应追加服务端时间与顺序号；
// - 回执接口用于可靠送达/已读链路，便于状态回放与多端同步；
// -----------------------------------------------------------------------------
service GroupMsgService {
  // 发送群消息（幂等：建议按 sender_id + client_msg_id/message_id 去重）
  rpc SendMessage(message.Content) returns (google.protobuf.Empty);
  // 上报已读（用户读到某消息，服务端可折叠成“读到 N”）
  rpc ReportMsgRead(message.MsgRead) returns (google.protobuf.Empty);
  // 已送达回执（网络层/客户端确认）
  rpc AckMsgDelivered(message.MsgDeliveredAck) returns (google.protobuf.Empty);
  // 已读回执确认（对已读的二次确认，用于多端同步）
  rpc AckMsgRead(message.MsgReadAck) returns (google.protobuf.Empty);
  // 撤回消息（权限校验）
  rpc RecallMsg(message.MsgRecall) returns (google.protobuf.Empty);
  // 转发消息（可能跨会话/跨群）
  rpc ForwardMsg(message.MsgForward) returns (google.protobuf.Empty);
}
