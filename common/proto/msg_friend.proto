syntax = "proto3";

import "google/protobuf/empty.proto";
import "message.proto";

// 说明：定义好友相关的业务消息载荷（与 common/proto/socket.proto 中 MsgKind 对齐）
// - 传输层为 Protobuf + 长度前缀帧（LengthDelimitedCodec）
// - socket 层 payload 为 bytes，业务在此处定义具体子消息结构

package msg_friend_service;

// =====================
// 基础枚举/类型
// =====================

// 好友申请来源
enum FriendRequestSource {
  // 未知来源
  FRS_UNKNOWN = 0;
  // 二维码添加
  FRS_QR_CODE = 1;
  // 手机联系人
  FRS_PHONE_CONTACTS = 2;
  // 用户ID添加
  FRS_USER_ID = 3;
  // 群成员添加
  FRS_GROUP_MEMBER = 4;
}

// 消息主类型（复用 message.proto 的 ContentType）
// 建议 contents 直接承载完整结构，content_type 用于快速渲染判断
// 生成语言需使用完全限定名：protocol.message.ContentType

// 与消息（状态/通话/typing/reaction）相关定义统一迁移到 message.proto

// =====================
// 好友申请/关系（MK_FRIEND_REQUEST 等）
// =====================

// 好友申请
message FriendRequest {
  // 好友申请ID
  int64 id = 1;
  // 申请人用户ID
  int64 from_user_id = 2;
  // 被申请人用户ID
  int64 to_user_id = 3;
  // 申请理由
  string reason = 4;
  // 申请来源
  FriendRequestSource source = 5;
  // 申请创建时间
  int64 created_at = 6;
  // 好友别名/备注（可选）
  optional string remark = 7;
}

// 处理好友申请（接受/拒绝）
message FriendRequestDecision {
  // 好友申请ID
  int64 request_id = 1;
  // 是否接受
  bool accept = 2;
  // 备注（可选）
  optional string remark = 3;
  // 处理时间
  int64 decided_at = 4;
}

// 删除好友
message FriendDelete {
  // 发起人用户ID
  int64 operator_user_id = 1;
  // 被删除的好友用户ID
  int64 friend_user_id = 2;
  // 时间
  int64 at = 3;
}

// 更新好友备注
message FriendUpdateRemark {
  // 用户ID
  int64 user_id = 1;
  // 好友用户ID
  int64 friend_user_id = 2;
  // 新备注
  string remark = 3;
  // 时间
  int64 updated_at = 4;
}

service FriendBizService {
  // 发送好友申请
  rpc SendFriendRequest(FriendRequest) returns (google.protobuf.Empty);
  // 处理好友申请
  rpc HandleFriendRequest(FriendRequestDecision) returns (google.protobuf.Empty);
  // 删除好友
  rpc DeleteFriend(FriendDelete) returns (google.protobuf.Empty);
  // 更新好友备注
  rpc UpdateFriendRemark(FriendUpdateRemark) returns (google.protobuf.Empty);
}

// 最小设备密钥 RPC（密钥托管与分发）
message IdentityKey { string curve = 1; bytes pub_key = 2; }
message SignedPreKey { uint32 key_id = 1; bytes pub_key = 2; bytes signature = 3; }
message OneTimePreKey { uint32 key_id = 1; bytes pub_key = 2; }
message UploadDeviceKeysRequest {
  int64 user_id = 1;
  string device_id = 2;
  IdentityKey identity_key = 3;
  SignedPreKey signed_pre_key = 4;
  repeated OneTimePreKey one_time_pre_keys = 5;
}
message UploadDeviceKeysResponse { bool success = 1; }
message FetchDeviceKeysRequest { int64 user_id = 1; }
message DeviceKeyBundle {
  int64 user_id = 1;
  string device_id = 2;
  IdentityKey identity_key = 3;
  SignedPreKey signed_pre_key = 4;
  repeated OneTimePreKey one_time_pre_keys = 5;
}
message FetchDeviceKeysResponse { repeated DeviceKeyBundle bundles = 1; }

// 根据用户 ID 聚合拉取好友消息历史
message ListUserFriendMessagesRequest {
  // 当前用户 ID
  int64 user_id = 1;
  // 起始时间（毫秒，闭区间）；传 0 表示不限制
  int64 since_timestamp = 2;
  // 返回的最大消息数，缺省 200
  uint32 limit = 3;
}

// 好友消息服务（非群聊）
service FriendMsgService {
  rpc SendMessage(message.Content) returns (google.protobuf.Empty);
  rpc ReportMsgRead(message.MsgRead) returns (google.protobuf.Empty);
  rpc AckMsgDelivered(message.MsgDeliveredAck) returns (google.protobuf.Empty);
  rpc AckMsgRead(message.MsgReadAck) returns (google.protobuf.Empty);
  rpc RecallMsg(message.MsgRecall) returns (google.protobuf.Empty);
  rpc ForwardMsg(message.MsgForward) returns (google.protobuf.Empty);
  // 分页查询好友间的历史消息
  rpc ListFriendMessages(message.QueryFriendMessagesRequest) returns (message.QueryMessagesResponse);
  // 聚合查询用户的好友消息
  rpc ListUserFriendMessages(ListUserFriendMessagesRequest) returns (message.QueryMessagesResponse);
}

// 设备密钥服务
service KeyService {
  rpc UploadDeviceKeys(UploadDeviceKeysRequest) returns (UploadDeviceKeysResponse);
  rpc FetchDeviceKeys(FetchDeviceKeysRequest) returns (FetchDeviceKeysResponse);
}
