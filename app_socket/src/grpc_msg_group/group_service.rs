// This file is @generated by prost-build.
/// 群成员引用信息
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MemberRef {
    /// 成员用户ID
    #[prost(int64, tag = "1")]
    pub id: i64,
    /// 群内别名（可选，不传或空表示无别名）
    #[prost(string, optional, tag = "2")]
    pub alias: ::core::option::Option<::prost::alloc::string::String>,
    /// 成员角色（0=Owner, 1=Admin, 2=Member）
    #[prost(int32, tag = "3")]
    pub role: i32,
}
/// 插入单个成员
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InsertReq {
    /// 群组ID
    #[prost(int64, tag = "1")]
    pub group_id: i64,
    /// 要添加的成员信息（可携带 alias）
    #[prost(message, optional, tag = "2")]
    pub member: ::core::option::Option<MemberRef>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct InsertResp {}
/// 批量插入成员
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InsertManyReq {
    /// 群组ID
    #[prost(int64, tag = "1")]
    pub group_id: i64,
    /// 成员列表（成员可各自携带 alias）
    #[prost(message, repeated, tag = "2")]
    pub members: ::prost::alloc::vec::Vec<MemberRef>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct InsertManyResp {}
/// 移除成员
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RemoveReq {
    /// 群组ID
    #[prost(int64, tag = "1")]
    pub group_id: i64,
    /// 要移除的用户ID
    #[prost(int64, tag = "2")]
    pub user_id: i64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RemoveResp {
    /// 是否实际删除成功（false 表示成员不存在）
    #[prost(bool, tag = "1")]
    pub removed: bool,
}
/// 修改成员角色
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChangeRoleReq {
    /// 群组ID
    #[prost(int64, tag = "1")]
    pub group_id: i64,
    /// 用户ID
    #[prost(int64, tag = "2")]
    pub user_id: i64,
    /// 新角色（0/1/2）
    #[prost(int32, tag = "3")]
    pub role: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChangeRoleResp {}
/// 修改成员别名（新增）
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangeAliasReq {
    /// 群组ID
    #[prost(int64, tag = "1")]
    pub group_id: i64,
    /// 用户ID
    #[prost(int64, tag = "2")]
    pub user_id: i64,
    /// 新别名（为空或不传表示清空别名）
    #[prost(string, optional, tag = "3")]
    pub alias: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChangeAliasResp {}
/// 分页获取群成员
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetPageReq {
    /// 群组ID
    #[prost(int64, tag = "1")]
    pub group_id: i64,
    /// 页码（从 0 或 1 开始，取决于实现）
    #[prost(uint64, tag = "2")]
    pub page: u64,
    /// 每页成员数量
    #[prost(uint64, tag = "3")]
    pub page_size: u64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPageResp {
    /// 成员列表（包含 alias）
    #[prost(message, repeated, tag = "1")]
    pub members: ::prost::alloc::vec::Vec<MemberRef>,
}
/// 获取群内全部成员
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetAllReq {
    /// 群组ID
    #[prost(int64, tag = "1")]
    pub group_id: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAllResp {
    /// 成员列表（包含 alias）
    #[prost(message, repeated, tag = "1")]
    pub members: ::prost::alloc::vec::Vec<MemberRef>,
}
/// 获取群成员数量
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CountReq {
    /// 群组ID
    #[prost(int64, tag = "1")]
    pub group_id: i64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CountResp {
    /// 成员总数
    #[prost(uint64, tag = "1")]
    pub count: u64,
}
/// 获取用户所在的所有群组
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UserGroupsReq {
    /// 用户ID
    #[prost(int64, tag = "1")]
    pub user_id: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserGroupsResp {
    /// 群组ID列表
    #[prost(int64, repeated, tag = "1")]
    pub group_ids: ::prost::alloc::vec::Vec<i64>,
}
/// 获取所有群组ID（全局）
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AllKeysReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AllKeysResp {
    /// 群组ID列表
    #[prost(int64, repeated, tag = "1")]
    pub group_ids: ::prost::alloc::vec::Vec<i64>,
}
/// 按分片索引获取群组ID
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AllKeysByShardReq {
    /// 分片下标（与服务器分片数匹配）
    #[prost(uint64, tag = "1")]
    pub shard_idx: u64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AllKeysByShardResp {
    /// 群组ID列表
    #[prost(int64, repeated, tag = "1")]
    pub group_ids: ::prost::alloc::vec::Vec<i64>,
}
/// 清空群成员
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ClearReq {
    /// 群组ID
    #[prost(int64, tag = "1")]
    pub group_id: i64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ClearResp {}
/// *
/// 通用响应
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CommonResp {
    /// 是否成功
    #[prost(bool, tag = "1")]
    pub success: bool,
    /// 提示或错误信息
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
}
/// *
/// ID 请求
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct IdReq {
    /// 引用ID（用户ID、群ID等）
    #[prost(int64, tag = "1")]
    pub ref_id: i64,
}
/// *
/// 创建群组请求
/// 用于创建一个新群组，由 creator_uid 发起。
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateGroupReq {
    /// 消息唯一 ID（用于日志追踪、幂等等）
    #[prost(int64, tag = "1")]
    pub id: i64,
    /// 创建者的用户 ID，自动成为群主
    #[prost(int64, tag = "2")]
    pub creator_uid: i64,
    /// 群名称
    #[prost(string, tag = "3")]
    pub name: ::prost::alloc::string::String,
    /// 初始群成员 UID 列表（不包含自己）
    #[prost(int64, repeated, tag = "4")]
    pub members: ::prost::alloc::vec::Vec<i64>,
    /// 群头像（可选）
    #[prost(string, optional, tag = "5")]
    pub avatar: ::core::option::Option<::prost::alloc::string::String>,
    /// 群简介（可选）
    #[prost(string, optional, tag = "6")]
    pub intro: ::core::option::Option<::prost::alloc::string::String>,
}
/// *
/// 修改群资料请求
/// 包括名称、头像、简介的更新，操作者需要有权限（如群主、管理员）。
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateGroupProfileReq {
    /// 操作者 UID（必须具备权限）
    #[prost(int64, tag = "2")]
    pub operator_uid: i64,
    /// 目标群 ID
    #[prost(int64, tag = "3")]
    pub group_id: i64,
    /// 新的群名称（可选）
    #[prost(string, optional, tag = "4")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    /// 新头像（可选）
    #[prost(string, optional, tag = "5")]
    pub avatar: ::core::option::Option<::prost::alloc::string::String>,
    /// 新简介（可选）
    #[prost(string, optional, tag = "6")]
    pub intro: ::core::option::Option<::prost::alloc::string::String>,
}
/// *
/// 解散群请求
/// 仅群主可调用该接口，执行后群组彻底删除。
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DismissGroupReq {
    #[prost(int64, tag = "1")]
    pub id: i64,
    /// 群主 UID
    #[prost(int64, tag = "2")]
    pub owner_uid: i64,
    #[prost(int64, tag = "3")]
    pub group_id: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GroupInfo {
    /// 群ID
    #[prost(int64, tag = "1")]
    pub id: i64,
    /// 群名称
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    /// 群头像
    #[prost(string, tag = "3")]
    pub avatar: ::prost::alloc::string::String,
    /// 群简介
    #[prost(string, tag = "4")]
    pub description: ::prost::alloc::string::String,
    /// 群公告
    #[prost(string, tag = "5")]
    pub notice: ::prost::alloc::string::String,
    /// 加群权限
    #[prost(enumeration = "JoinPermission", tag = "6")]
    pub join_permission: i32,
    /// 群主ID
    #[prost(int64, tag = "7")]
    pub owner_id: i64,
    /// 群类型
    #[prost(enumeration = "GroupType", tag = "8")]
    pub group_type: i32,
    /// 是否可搜索
    #[prost(bool, tag = "9")]
    pub allow_search: bool,
    /// 是否启用
    #[prost(bool, tag = "10")]
    pub enable: bool,
    /// 创建时间
    #[prost(uint64, tag = "11")]
    pub create_time: u64,
    /// 更新时间
    #[prost(uint64, tag = "12")]
    pub update_time: u64,
    /// 群成员数量
    #[prost(uint32, tag = "13")]
    pub member_cnt: u32,
}
/// 群成员角色类型（与数据库/内存中的角色编码对齐）
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum GroupRoleType {
    /// 群主
    Owner = 0,
    /// 管理员
    Admin = 1,
    /// 普通成员
    Member = 2,
}
impl GroupRoleType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Owner => "Owner",
            Self::Admin => "Admin",
            Self::Member => "Member",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "Owner" => Some(Self::Owner),
            "Admin" => Some(Self::Admin),
            "Member" => Some(Self::Member),
            _ => None,
        }
    }
}
/// *
/// 加群权限控制类型
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum JoinPermission {
    /// 任何人可加入
    Anyone = 0,
    /// 加群需审批
    NeedApproval = 1,
    /// 仅允许邀请加入
    InviteOnly = 2,
    /// 不允许加入
    Closed = 3,
}
impl JoinPermission {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Anyone => "ANYONE",
            Self::NeedApproval => "NEED_APPROVAL",
            Self::InviteOnly => "INVITE_ONLY",
            Self::Closed => "CLOSED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ANYONE" => Some(Self::Anyone),
            "NEED_APPROVAL" => Some(Self::NeedApproval),
            "INVITE_ONLY" => Some(Self::InviteOnly),
            "CLOSED" => Some(Self::Closed),
            _ => None,
        }
    }
}
/// *
/// 群组类型
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum GroupType {
    /// 未知
    UnknownGroupType = 0,
    /// 普通群组
    NormalGroup = 1,
    /// 超级群组
    SuperGroup = 2,
    /// 系统群组
    SystemGroup = 3,
}
impl GroupType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::UnknownGroupType => "UNKNOWN_GROUP_TYPE",
            Self::NormalGroup => "NORMAL_GROUP",
            Self::SuperGroup => "SUPER_GROUP",
            Self::SystemGroup => "SYSTEM_GROUP",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNKNOWN_GROUP_TYPE" => Some(Self::UnknownGroupType),
            "NORMAL_GROUP" => Some(Self::NormalGroup),
            "SUPER_GROUP" => Some(Self::SuperGroup),
            "SYSTEM_GROUP" => Some(Self::SystemGroup),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod group_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// 群组服务接口定义：提供群成员增删改查、跨群查询、分片管理等能力
    #[derive(Debug, Clone)]
    pub struct GroupServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl GroupServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> GroupServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> GroupServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            GroupServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// 查询群组信息
        /// 创建群组（发起方自动成为群主）
        pub async fn create_group(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateGroupReq>,
        ) -> std::result::Result<tonic::Response<super::CommonResp>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/group_service.GroupService/CreateGroup",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("group_service.GroupService", "CreateGroup"));
            self.inner.unary(req, path, codec).await
        }
        /// 修改群资料（头像、名称、简介）
        pub async fn update_group_profile(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateGroupProfileReq>,
        ) -> std::result::Result<tonic::Response<super::CommonResp>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/group_service.GroupService/UpdateGroupProfile",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("group_service.GroupService", "UpdateGroupProfile"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_group(
            &mut self,
            request: impl tonic::IntoRequest<super::IdReq>,
        ) -> std::result::Result<tonic::Response<super::GroupInfo>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/group_service.GroupService/GetGroup",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("group_service.GroupService", "GetGroup"));
            self.inner.unary(req, path, codec).await
        }
        /// 解散群组（仅群主）
        pub async fn dismiss_group(
            &mut self,
            request: impl tonic::IntoRequest<super::DismissGroupReq>,
        ) -> std::result::Result<tonic::Response<super::CommonResp>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/group_service.GroupService/DismissGroup",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("group_service.GroupService", "DismissGroup"));
            self.inner.unary(req, path, codec).await
        }
        /// 添加单个成员
        pub async fn insert(
            &mut self,
            request: impl tonic::IntoRequest<super::InsertReq>,
        ) -> std::result::Result<tonic::Response<super::InsertResp>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/group_service.GroupService/Insert",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("group_service.GroupService", "Insert"));
            self.inner.unary(req, path, codec).await
        }
        /// 批量添加成员
        pub async fn insert_many(
            &mut self,
            request: impl tonic::IntoRequest<super::InsertManyReq>,
        ) -> std::result::Result<tonic::Response<super::InsertManyResp>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/group_service.GroupService/InsertMany",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("group_service.GroupService", "InsertMany"));
            self.inner.unary(req, path, codec).await
        }
        /// 移除成员
        pub async fn remove(
            &mut self,
            request: impl tonic::IntoRequest<super::RemoveReq>,
        ) -> std::result::Result<tonic::Response<super::RemoveResp>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/group_service.GroupService/Remove",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("group_service.GroupService", "Remove"));
            self.inner.unary(req, path, codec).await
        }
        /// 修改成员角色
        pub async fn change_role(
            &mut self,
            request: impl tonic::IntoRequest<super::ChangeRoleReq>,
        ) -> std::result::Result<tonic::Response<super::ChangeRoleResp>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/group_service.GroupService/ChangeRole",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("group_service.GroupService", "ChangeRole"));
            self.inner.unary(req, path, codec).await
        }
        /// 修改成员别名（新增）
        pub async fn change_alias(
            &mut self,
            request: impl tonic::IntoRequest<super::ChangeAliasReq>,
        ) -> std::result::Result<
            tonic::Response<super::ChangeAliasResp>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/group_service.GroupService/ChangeAlias",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("group_service.GroupService", "ChangeAlias"));
            self.inner.unary(req, path, codec).await
        }
        /// 分页获取群成员
        pub async fn get_page(
            &mut self,
            request: impl tonic::IntoRequest<super::GetPageReq>,
        ) -> std::result::Result<tonic::Response<super::GetPageResp>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/group_service.GroupService/GetPage",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("group_service.GroupService", "GetPage"));
            self.inner.unary(req, path, codec).await
        }
        /// 获取群全部成员
        pub async fn get_all(
            &mut self,
            request: impl tonic::IntoRequest<super::GetAllReq>,
        ) -> std::result::Result<tonic::Response<super::GetAllResp>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/group_service.GroupService/GetAll",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("group_service.GroupService", "GetAll"));
            self.inner.unary(req, path, codec).await
        }
        /// 获取群成员数量
        pub async fn count(
            &mut self,
            request: impl tonic::IntoRequest<super::CountReq>,
        ) -> std::result::Result<tonic::Response<super::CountResp>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/group_service.GroupService/Count",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("group_service.GroupService", "Count"));
            self.inner.unary(req, path, codec).await
        }
        /// 获取用户所在的所有群组
        pub async fn user_groups(
            &mut self,
            request: impl tonic::IntoRequest<super::UserGroupsReq>,
        ) -> std::result::Result<tonic::Response<super::UserGroupsResp>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/group_service.GroupService/UserGroups",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("group_service.GroupService", "UserGroups"));
            self.inner.unary(req, path, codec).await
        }
        /// 获取所有群组ID（全局）
        pub async fn all_keys(
            &mut self,
            request: impl tonic::IntoRequest<super::AllKeysReq>,
        ) -> std::result::Result<tonic::Response<super::AllKeysResp>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/group_service.GroupService/AllKeys",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("group_service.GroupService", "AllKeys"));
            self.inner.unary(req, path, codec).await
        }
        /// 按分片索引获取群组ID
        pub async fn all_keys_by_shard(
            &mut self,
            request: impl tonic::IntoRequest<super::AllKeysByShardReq>,
        ) -> std::result::Result<
            tonic::Response<super::AllKeysByShardResp>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/group_service.GroupService/AllKeysByShard",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("group_service.GroupService", "AllKeysByShard"));
            self.inner.unary(req, path, codec).await
        }
        /// 清空群成员
        pub async fn clear(
            &mut self,
            request: impl tonic::IntoRequest<super::ClearReq>,
        ) -> std::result::Result<tonic::Response<super::ClearResp>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/group_service.GroupService/Clear",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("group_service.GroupService", "Clear"));
            self.inner.unary(req, path, codec).await
        }
    }
}
