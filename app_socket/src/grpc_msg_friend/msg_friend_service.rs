// This file is @generated by prost-build.
/// 好友申请
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FriendRequest {
    /// 好友申请ID
    #[prost(int64, tag = "1")]
    pub id: i64,
    /// 申请人用户ID
    #[prost(int64, tag = "2")]
    pub from_user_id: i64,
    /// 被申请人用户ID
    #[prost(int64, tag = "3")]
    pub to_user_id: i64,
    /// 申请理由
    #[prost(string, tag = "4")]
    pub reason: ::prost::alloc::string::String,
    /// 申请来源
    #[prost(enumeration = "FriendRequestSource", tag = "5")]
    pub source: i32,
    /// 申请创建时间
    #[prost(int64, tag = "6")]
    pub created_at: i64,
    /// 好友别名/备注（可选）
    #[prost(string, optional, tag = "7")]
    pub remark: ::core::option::Option<::prost::alloc::string::String>,
}
/// 处理好友申请（接受/拒绝）
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FriendRequestDecision {
    /// 好友申请ID
    #[prost(int64, tag = "1")]
    pub request_id: i64,
    /// 是否接受
    #[prost(bool, tag = "2")]
    pub accept: bool,
    /// 备注（可选）
    #[prost(string, optional, tag = "3")]
    pub remark: ::core::option::Option<::prost::alloc::string::String>,
    /// 处理时间
    #[prost(int64, tag = "4")]
    pub decided_at: i64,
}
/// 删除好友
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FriendDelete {
    /// 发起人用户ID
    #[prost(int64, tag = "1")]
    pub operator_user_id: i64,
    /// 被删除的好友用户ID
    #[prost(int64, tag = "2")]
    pub friend_user_id: i64,
    /// 时间
    #[prost(int64, tag = "3")]
    pub at: i64,
}
/// 更新好友备注
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FriendUpdateRemark {
    /// 用户ID
    #[prost(int64, tag = "1")]
    pub user_id: i64,
    /// 好友用户ID
    #[prost(int64, tag = "2")]
    pub friend_user_id: i64,
    /// 新备注
    #[prost(string, tag = "3")]
    pub remark: ::prost::alloc::string::String,
    /// 时间
    #[prost(int64, tag = "4")]
    pub updated_at: i64,
}
/// 顶层消息结构
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Content {
    #[prost(uint64, optional, tag = "1")]
    pub message_id: ::core::option::Option<u64>,
    #[prost(int64, tag = "2")]
    pub sender_id: i64,
    #[prost(int64, tag = "3")]
    pub receiver_id: i64,
    #[prost(int64, tag = "4")]
    pub timestamp: i64,
    #[prost(enumeration = "ContentType", tag = "5")]
    pub message_type: i32,
    #[prost(enumeration = "ChatScene", tag = "6")]
    pub scene: i32,
    #[prost(message, repeated, tag = "10")]
    pub contents: ::prost::alloc::vec::Vec<MessageContent>,
}
/// oneof 内容，仅保留常用与加密封装
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MessageContent {
    #[prost(oneof = "message_content::Content", tags = "22")]
    pub content: ::core::option::Option<message_content::Content>,
}
/// Nested message and enum types in `MessageContent`.
pub mod message_content {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Content {
        #[prost(message, tag = "22")]
        Encrypted(super::EncryptedContent),
    }
}
/// 加密载荷封装（端到端加密）
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EncryptedContent {
    #[prost(string, tag = "1")]
    pub scheme: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "2")]
    pub sender_pub: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag = "3")]
    pub key_id: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "4")]
    pub nonce: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "5")]
    pub ciphertext: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "6")]
    pub aad: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint64, tag = "7")]
    pub msg_no: u64,
}
/// 消息状态/操作
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgDeliveredAck {
    #[prost(int64, tag = "1")]
    pub msg_id: i64,
    #[prost(int64, tag = "2")]
    pub ack_user_id: i64,
    #[prost(int64, tag = "3")]
    pub ack_at: i64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgRead {
    #[prost(int64, tag = "1")]
    pub msg_id: i64,
    #[prost(int64, tag = "2")]
    pub user_id: i64,
    /// 单聊：对方ID；群聊：群ID
    #[prost(int64, tag = "3")]
    pub chat_id: i64,
    #[prost(int64, tag = "4")]
    pub read_at: i64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgReadAck {
    #[prost(int64, tag = "1")]
    pub msg_id: i64,
    #[prost(int64, tag = "2")]
    pub ack_user_id: i64,
    #[prost(int64, tag = "3")]
    pub ack_at: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgRecall {
    #[prost(int64, tag = "1")]
    pub msg_id: i64,
    #[prost(int64, tag = "2")]
    pub operator_user_id: i64,
    #[prost(string, optional, tag = "3")]
    pub reason: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int64, tag = "4")]
    pub recalled_at: i64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgForward {
    #[prost(int64, tag = "1")]
    pub src_msg_id: i64,
    #[prost(int64, optional, tag = "2")]
    pub new_msg_id: ::core::option::Option<i64>,
    #[prost(int64, tag = "3")]
    pub from_user_id: i64,
    #[prost(int64, tag = "4")]
    pub to_user_id: i64,
    #[prost(int64, tag = "5")]
    pub created_at: i64,
}
/// 最小设备密钥 RPC（密钥托管与分发）
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IdentityKey {
    #[prost(string, tag = "1")]
    pub curve: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "2")]
    pub pub_key: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SignedPreKey {
    #[prost(uint32, tag = "1")]
    pub key_id: u32,
    #[prost(bytes = "vec", tag = "2")]
    pub pub_key: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "3")]
    pub signature: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OneTimePreKey {
    #[prost(uint32, tag = "1")]
    pub key_id: u32,
    #[prost(bytes = "vec", tag = "2")]
    pub pub_key: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UploadDeviceKeysRequest {
    #[prost(int64, tag = "1")]
    pub user_id: i64,
    #[prost(string, tag = "2")]
    pub device_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub identity_key: ::core::option::Option<IdentityKey>,
    #[prost(message, optional, tag = "4")]
    pub signed_pre_key: ::core::option::Option<SignedPreKey>,
    #[prost(message, repeated, tag = "5")]
    pub one_time_pre_keys: ::prost::alloc::vec::Vec<OneTimePreKey>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UploadDeviceKeysResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FetchDeviceKeysRequest {
    #[prost(int64, tag = "1")]
    pub user_id: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeviceKeyBundle {
    #[prost(int64, tag = "1")]
    pub user_id: i64,
    #[prost(string, tag = "2")]
    pub device_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub identity_key: ::core::option::Option<IdentityKey>,
    #[prost(message, optional, tag = "4")]
    pub signed_pre_key: ::core::option::Option<SignedPreKey>,
    #[prost(message, repeated, tag = "5")]
    pub one_time_pre_keys: ::prost::alloc::vec::Vec<OneTimePreKey>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FetchDeviceKeysResponse {
    #[prost(message, repeated, tag = "1")]
    pub bundles: ::prost::alloc::vec::Vec<DeviceKeyBundle>,
}
/// 好友申请来源
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum FriendRequestSource {
    /// 未知来源
    FrsUnknown = 0,
    /// 二维码添加
    FrsQrCode = 1,
    /// 手机联系人
    FrsPhoneContacts = 2,
    /// 用户ID添加
    FrsUserId = 3,
    /// 群成员添加
    FrsGroupMember = 4,
}
impl FriendRequestSource {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::FrsUnknown => "FRS_UNKNOWN",
            Self::FrsQrCode => "FRS_QR_CODE",
            Self::FrsPhoneContacts => "FRS_PHONE_CONTACTS",
            Self::FrsUserId => "FRS_USER_ID",
            Self::FrsGroupMember => "FRS_GROUP_MEMBER",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "FRS_UNKNOWN" => Some(Self::FrsUnknown),
            "FRS_QR_CODE" => Some(Self::FrsQrCode),
            "FRS_PHONE_CONTACTS" => Some(Self::FrsPhoneContacts),
            "FRS_USER_ID" => Some(Self::FrsUserId),
            "FRS_GROUP_MEMBER" => Some(Self::FrsGroupMember),
            _ => None,
        }
    }
}
/// 会话场景
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ChatScene {
    ChatUnknown = 0,
    /// 单聊
    Single = 1,
    /// 群聊（占位，当前服务不用）
    Group = 2,
}
impl ChatScene {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ChatUnknown => "CHAT_UNKNOWN",
            Self::Single => "SINGLE",
            Self::Group => "GROUP",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHAT_UNKNOWN" => Some(Self::ChatUnknown),
            "SINGLE" => Some(Self::Single),
            "GROUP" => Some(Self::Group),
            _ => None,
        }
    }
}
/// 消息主类型（与客户端约定）
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ContentType {
    Unknown = 0,
    Text = 1,
    Image = 2,
    Audio = 3,
    Video = 4,
    Html = 5,
    Location = 6,
    File = 7,
    Emoji = 8,
    Quote = 9,
    AvCall = 10,
    Voip = 11,
    Notification = 12,
    System = 13,
    Reminder = 14,
    FriendEvent = 15,
    Revoke = 17,
    Forward = 18,
    ContactCard = 19,
    Vote = 20,
    RedEnvelope = 21,
    Encrypted = 22,
    Ack = 23,
    Custom = 100,
}
impl ContentType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown => "UNKNOWN",
            Self::Text => "TEXT",
            Self::Image => "IMAGE",
            Self::Audio => "AUDIO",
            Self::Video => "VIDEO",
            Self::Html => "HTML",
            Self::Location => "LOCATION",
            Self::File => "FILE",
            Self::Emoji => "EMOJI",
            Self::Quote => "QUOTE",
            Self::AvCall => "AV_CALL",
            Self::Voip => "VOIP",
            Self::Notification => "NOTIFICATION",
            Self::System => "SYSTEM",
            Self::Reminder => "REMINDER",
            Self::FriendEvent => "FRIEND_EVENT",
            Self::Revoke => "REVOKE",
            Self::Forward => "FORWARD",
            Self::ContactCard => "CONTACT_CARD",
            Self::Vote => "VOTE",
            Self::RedEnvelope => "RED_ENVELOPE",
            Self::Encrypted => "ENCRYPTED",
            Self::Ack => "ACK",
            Self::Custom => "CUSTOM",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNKNOWN" => Some(Self::Unknown),
            "TEXT" => Some(Self::Text),
            "IMAGE" => Some(Self::Image),
            "AUDIO" => Some(Self::Audio),
            "VIDEO" => Some(Self::Video),
            "HTML" => Some(Self::Html),
            "LOCATION" => Some(Self::Location),
            "FILE" => Some(Self::File),
            "EMOJI" => Some(Self::Emoji),
            "QUOTE" => Some(Self::Quote),
            "AV_CALL" => Some(Self::AvCall),
            "VOIP" => Some(Self::Voip),
            "NOTIFICATION" => Some(Self::Notification),
            "SYSTEM" => Some(Self::System),
            "REMINDER" => Some(Self::Reminder),
            "FRIEND_EVENT" => Some(Self::FriendEvent),
            "REVOKE" => Some(Self::Revoke),
            "FORWARD" => Some(Self::Forward),
            "CONTACT_CARD" => Some(Self::ContactCard),
            "VOTE" => Some(Self::Vote),
            "RED_ENVELOPE" => Some(Self::RedEnvelope),
            "ENCRYPTED" => Some(Self::Encrypted),
            "ACK" => Some(Self::Ack),
            "CUSTOM" => Some(Self::Custom),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod friend_biz_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value
    )]
    use tonic::codegen::http::Uri;
    use tonic::codegen::*;
    #[derive(Debug, Clone)]
    pub struct FriendBizServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl FriendBizServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> FriendBizServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> FriendBizServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<http::Request<tonic::body::Body>>>::Error:
                Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            FriendBizServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// 发送好友申请
        pub async fn send_friend_request(
            &mut self,
            request: impl tonic::IntoRequest<super::FriendRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/msg_friend_service.FriendBizService/SendFriendRequest",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "msg_friend_service.FriendBizService",
                "SendFriendRequest",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// 处理好友申请
        pub async fn handle_friend_request(
            &mut self,
            request: impl tonic::IntoRequest<super::FriendRequestDecision>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/msg_friend_service.FriendBizService/HandleFriendRequest",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "msg_friend_service.FriendBizService",
                "HandleFriendRequest",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// 删除好友
        pub async fn delete_friend(
            &mut self,
            request: impl tonic::IntoRequest<super::FriendDelete>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/msg_friend_service.FriendBizService/DeleteFriend",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "msg_friend_service.FriendBizService",
                "DeleteFriend",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// 更新好友备注
        pub async fn update_friend_remark(
            &mut self,
            request: impl tonic::IntoRequest<super::FriendUpdateRemark>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/msg_friend_service.FriendBizService/UpdateFriendRemark",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "msg_friend_service.FriendBizService",
                "UpdateFriendRemark",
            ));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated client implementations.
pub mod friend_msg_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value
    )]
    use tonic::codegen::http::Uri;
    use tonic::codegen::*;
    /// 好友消息服务（非群聊）
    #[derive(Debug, Clone)]
    pub struct FriendMsgServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl FriendMsgServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> FriendMsgServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> FriendMsgServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<http::Request<tonic::body::Body>>>::Error:
                Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            FriendMsgServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn send_message(
            &mut self,
            request: impl tonic::IntoRequest<super::Content>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/msg_friend_service.FriendMsgService/SendMessage",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "msg_friend_service.FriendMsgService",
                "SendMessage",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn report_msg_read(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgRead>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/msg_friend_service.FriendMsgService/ReportMsgRead",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "msg_friend_service.FriendMsgService",
                "ReportMsgRead",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn ack_msg_delivered(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgDeliveredAck>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/msg_friend_service.FriendMsgService/AckMsgDelivered",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "msg_friend_service.FriendMsgService",
                "AckMsgDelivered",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn ack_msg_read(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgReadAck>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/msg_friend_service.FriendMsgService/AckMsgRead",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "msg_friend_service.FriendMsgService",
                "AckMsgRead",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn recall_msg(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgRecall>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/msg_friend_service.FriendMsgService/RecallMsg",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "msg_friend_service.FriendMsgService",
                "RecallMsg",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn forward_msg(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgForward>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/msg_friend_service.FriendMsgService/ForwardMsg",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "msg_friend_service.FriendMsgService",
                "ForwardMsg",
            ));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated client implementations.
pub mod key_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value
    )]
    use tonic::codegen::http::Uri;
    use tonic::codegen::*;
    /// 设备密钥服务
    #[derive(Debug, Clone)]
    pub struct KeyServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl KeyServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> KeyServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> KeyServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<http::Request<tonic::body::Body>>>::Error:
                Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            KeyServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn upload_device_keys(
            &mut self,
            request: impl tonic::IntoRequest<super::UploadDeviceKeysRequest>,
        ) -> std::result::Result<tonic::Response<super::UploadDeviceKeysResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/msg_friend_service.KeyService/UploadDeviceKeys",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "msg_friend_service.KeyService",
                "UploadDeviceKeys",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn fetch_device_keys(
            &mut self,
            request: impl tonic::IntoRequest<super::FetchDeviceKeysRequest>,
        ) -> std::result::Result<tonic::Response<super::FetchDeviceKeysResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/msg_friend_service.KeyService/FetchDeviceKeys",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "msg_friend_service.KeyService",
                "FetchDeviceKeys",
            ));
            self.inner.unary(req, path, codec).await
        }
    }
}
