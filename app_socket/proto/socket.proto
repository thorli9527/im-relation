syntax = "proto3";

// 说明：与 app_socket/src/pb.rs 中的消息完全对齐
// - 传输层为 Protobuf + 长度前缀帧（LengthDelimitedCodec）
// - payload 统一为 bytes，业务可在其上承载具体的子消息（推荐继续使用 Protobuf）

package socketpb;

// 设备类型：用于多端登录策略控制
enum DeviceType {
  UNKNOWN = 0;
  MOBILE = 1;
  WEB = 3;
  PC = 4;
}

// 业务种类：与历史 kind 字符串一一对应
// - 建议所有生产者/消费者/客户端统一使用该枚举
enum MsgKind {
  // 原 "unknown"
  MK_UNKNOWN = 0;
  //好友消息
  // 原 "chat.new"
  MK_FRIEND = 100;
  //好友消息已读回执
  // 原 "chat.msg_read_ack"
  MK_FRIEND_MSG_READ_ACK = 101;
  //好友消息撤回
  // 原 "chat.msg_recall"
  MK_FRIEND_MSG_RECALL = 102;
  //好友消息已送达回执
  // 原 "chat.msg_delivered_ack"
  MK_FRIEND_MSG_DELIVERED_ACK = 103;
  //好友消息已读回执
  // 原 "chat.msg_read"
  MK_FRIEND_MSG_READ = 104;
  //好友消息已送达回执
  // 原 "chat.msg_delivered
  MK_FRIEND_MSG_DELIVERED = 105;
  //好友消息转发
  // 原 "chat.msg_forward"
  MK_FRIEND_MSG_FORWARD = 106;
  //好友消息修改
  // 原 "chat.msg_edit"
  MK_FRIEND_MSG_EDIT = 107;
  //好友消息撤回
  // 原 "chat.msg_reaction"
  MK_FRIEND_MSG_REACTION = 108;
  //好友正在输入
  // 原 "chat.typing"
  MK_FRIEND_TYPING = 109;
  

  //好友发启语音/视频通话
  // 原 "call.invite"
  MK_FRIEND_CALL_INVITE = 150;
  //好友取消语音/视频通话
  // 原 "call.cancel"
  MK_FRIEND_CALL_CANCEL = 151;
  //好友拒绝语音/视频通话
  // 原 "call.reject"
  MK_FRIEND_CALL_REJECT = 152;
  //好友接听语音/视频通话
  // 原 "call.accept"
  MK_FRIEND_CALL_ACCEPT = 153;
  //好友结束语音/视频通话
  // 原 "call.hangup"
  MK_FRIEND_CALL_HANGUP = 154;
  //好友通话中更新
  // 原 "call.modify"
  MK_FRIEND_CALL_MODIFY = 155;
  //好友通话中DTMF
  // 原 "call.dtmf"
  MK_FRIEND_CALL_DTMF = 156;

  //好友申请
  // 原 "chat.request"
  MK_FRIEND_REQUEST = 201;
  //好友申请受理
  // 原 "chat.request_ack"
  MK_FRIEND_REQUEST_ACK = 202;
  //好友申请拒绝
  // 原 "chat.request_reject"
  MK_FRIEND_REQUEST_REJECT = 203;
  //好友删除
  // 原 "chat.delete"
  MK_FRIEND_DELETE = 204;
  //更新好友名称
  // 原 "chat.update_remark"
  MK_FRIEND_UPDATE_REMARK = 205;



 
  //群消息
  // 原 "group.new"
  MK_GROUP = 300;
    //群消息已读回执
  // 原 "group.msg_read_ack"
  MK_GROUP_MSG_READ_ACK = 301;
  //群消息撤回
  // 原 "group.msg_recall"
  MK_GROUP_MSG_RECALL = 302;
  //群消息已读回执
  // 原 "group.at_all"
  MK_GROUP_AT_ALL = 303;
  //群消息@用户
  // 原 "group.at_user"
  MK_GROUP_AT_USER = 304;
  //群消息修改
  // 原 "group.msg_edit"
  MK_GROUP_MSG_EDIT = 305;
  //群消息撤回
  // 原 "group.msg_reaction"
  MK_GROUP_MSG_REACTION = 306;
  //群消息已送达回执
  // 原 "group.msg_delivered"
  MK_GROUP_MSG_DELIVERED = 307;
  //群消息已送达回执
  // 原 "group.msg_delivered_ack"
  MK_GROUP_MSG_DELIVERED_ACK = 308;
  //群消息已读回执
  // 原 "group.msg_read"
  MK_GROUP_MSG_READ = 309;


  //申请加群
  // 原 "group.join_request"
  MK_GROUP_JOIN_REQUEST = 401;
  //加群申请受理
  // 原 "group.join_request_ack"
  MK_GROUP_JOIN_REQUEST_ACK = 402;
  //群更新名称
  // 原 "group.update_name"
  MK_GROUP_UPDATE_NAME = 403;
  //群更新公告
  // 原 "group.update_announcement"
  MK_GROUP_UPDATE_ANNOUNCEMENT = 404;
  //群更新头像
  // 原 "group.update_avatar"
  MK_GROUP_UPDATE_AVATAR = 405;
  //群成员增加
  // 原 "group.member_add"
  MK_GROUP_MEMBER_ADD = 406;
  //群成员删除
  // 原 "group.member_delete"
  MK_GROUP_MEMBER_DELETE = 407;
  //群成员退出
  // 原 "group.member_quit"
  MK_GROUP_MEMBER_QUIT = 408;
  //群成员更新
  // 原 "group.member_update"
  MK_GROUP_MEMBER_UPDATE = 409;
  //解散群
  // 原 "group.dismiss"
  MK_GROUP_DISMISS = 410;
  //转让群主
  // 原 "group.transfer"
  MK_GROUP_TRANSFER = 411;



  //系统通知
  // 原 "sys.notice"
  MK_SYS_NOTICE = 900;
 
  //用户在线状态变更
  // 原 "user.presence"
  MK_USER_PRESENCE = 901;
  //用户资料更新
  // 原 "user.profile_update"
  MK_USER_PROFILE_UPDATE = 902;
  //用户隐私设置更新
  // 原 "user.privacy_update"
  MK_USER_PRIVACY_UPDATE = 903;
  //用户账号数据变更
  // 原 "user.account_data"
  MK_USER_ACCOUNT_DATA = 904;
  //消息撤回
  // 原 "msg.recall"
  MK_MSG_RECALL = 905;
   //通用业务ACK
  // 原 "sys.ack"
  MK_ACK = 906;
  // ensure rebuild
  // end of enum
}

// 客户端握手请求：连接建立后首帧
message AuthMsg {
  // 用户唯一 ID（由服务端体系分配）
  int64 user_id = 1;
  // 设备类型（枚举）
  DeviceType device_type = 2;
  // 设备标识（业务自定义，如设备号、推送 token 等）
  string device_id = 3;
  // 鉴权令牌（JWT/opaque），用于绑定 user_id 校验
  string token = 4;
  // 客户端时间戳（毫秒），用于时钟漂移/重放保护
  int64 ts_ms = 5;
  // 随机数，结合签名防重放
  bytes nonce = 6;
  // 对关键字段的签名/HMAC（例如 HMAC(key, user_id|device_id|ts|nonce|token) ）
  bytes signature = 7;

  // 是否尝试恢复会话（断线重连）
  bool resume = 8;
  // 客户端已确认的最后一条消息 ID（用于快速补发）
  int64 last_ack_id = 9;
  // 能力协商：是否支持端到端加密（仅占位，不影响现有流程）
  bool supports_encryption = 10;
  // 支持的加密方案（如 "x25519+chacha20poly1305"）
  repeated string encryption_schemes = 11;
}

// 客户端上行消息（含 ACK）
message ClientMsg {
  // 若存在，表示对服务端某条 id 的确认
  optional int64 ack = 1;
  // 业务类型（枚举）
  MsgKind kind = 2;
  // 二进制负载（建议为具体业务的 Protobuf）
  bytes payload = 3;
  // 客户端上行幂等ID（用于去重/重试对账），不参与 ACK 语义
  optional int64 client_id = 5;
}

// 服务端下行消息（投递给客户端）
message ServerMsg {
  // 消息唯一 ID（用于客户端 ACK 对齐）
  int64 id = 1;
  // 业务类型（枚举）
  MsgKind kind = 2;
  // 二进制负载（建议为具体业务的 Protobuf）
  bytes payload = 3;
  // 业务时间戳（毫秒）
  int64 ts_ms = 4;
}

// Kafka 投递消息（生产者 → socket 分发）
message KafkaSocketMsg {
  // 目标用户 ID
  int64 to = 1;
  // 消息唯一 ID（可选；缺省由消费者在接收处生成）
  optional int64 id = 2;
  // 业务类型（枚举）
  MsgKind kind = 3;
  // 二进制负载（建议为具体业务的 Protobuf）
  bytes payload = 4;
  // 是否需要 ACK（缺省 true）
  optional bool require_ack = 5;
  // ACK 超时时间（毫秒，缺省 10000）
  optional uint64 expire_ms = 6;
  // 最大重试次数（缺省 2）
  optional uint32 max_retry = 7;
  // 业务时间戳（毫秒；缺省使用 id）
  optional int64 ts_ms = 8;
}
