// This file is @generated by prost-build.
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FriendRef {
    #[prost(int64, tag = "1")]
    pub user_id: i64,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddFriendReq {
    #[prost(int64, tag = "1")]
    pub user_id: i64,
    #[prost(int64, tag = "2")]
    pub friend_id: i64,
    /// 新增：user_id 对 friend_id 的别名（优先于 alias）
    #[prost(string, optional, tag = "4")]
    pub alias_for_user: ::core::option::Option<::prost::alloc::string::String>,
    /// 新增：friend_id 对 user_id 的别名（即反向别名）
    #[prost(string, optional, tag = "5")]
    pub alias_for_friend: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AddFriendResp {
    /// true 表示新增，false 可能表示已存在
    #[prost(bool, tag = "1")]
    pub added: bool,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RemoveFriendReq {
    #[prost(int64, tag = "1")]
    pub user_id: i64,
    #[prost(int64, tag = "2")]
    pub friend_id: i64,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RemoveFriendResp {
    #[prost(bool, tag = "1")]
    pub removed: bool,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct IsFriendReq {
    #[prost(int64, tag = "1")]
    pub user_id: i64,
    #[prost(int64, tag = "2")]
    pub friend_id: i64,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct IsFriendResp {
    #[prost(bool, tag = "1")]
    pub is_friend: bool,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetFriendsReq {
    #[prost(int64, tag = "1")]
    pub user_id: i64,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFriendsResp {
    #[prost(int64, repeated, tag = "1")]
    pub friend_ids: ::prost::alloc::vec::Vec<i64>,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetFriendsPageReq {
    #[prost(int64, tag = "1")]
    pub user_id: i64,
    #[prost(uint64, tag = "2")]
    pub page: u64,
    #[prost(uint64, tag = "3")]
    pub page_size: u64,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFriendsPageResp {
    #[prost(int64, repeated, tag = "1")]
    pub friend_ids: ::prost::alloc::vec::Vec<i64>,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FriendEntry {
    #[prost(int64, tag = "1")]
    pub friend_id: i64,
    /// 别名，未设置则为空字符串；也可结合 presence 判断（见下）。
    ///
    /// 可选的时间戳/扩展字段，按需启用（预留）
    /// int64 created_at = 10;
    /// int64 updated_at = 11;
    #[prost(string, optional, tag = "2")]
    pub alias: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetFriendsDetailedReq {
    #[prost(int64, tag = "1")]
    pub user_id: i64,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFriendsDetailedResp {
    #[prost(message, repeated, tag = "1")]
    pub friends: ::prost::alloc::vec::Vec<FriendEntry>,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetFriendsPageDetailedReq {
    #[prost(int64, tag = "1")]
    pub user_id: i64,
    #[prost(uint64, tag = "2")]
    pub page: u64,
    #[prost(uint64, tag = "3")]
    pub page_size: u64,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFriendsPageDetailedResp {
    #[prost(message, repeated, tag = "1")]
    pub friends: ::prost::alloc::vec::Vec<FriendEntry>,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateFriendAliasReq {
    #[prost(int64, tag = "1")]
    pub user_id: i64,
    #[prost(int64, tag = "2")]
    pub friend_id: i64,
    /// 将别名更新为此值；传空字符串可视为清除别名
    #[prost(string, optional, tag = "3")]
    pub alias: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UpdateFriendAliasResp {
    #[prost(bool, tag = "1")]
    pub updated: bool,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ClearFriendsReq {
    #[prost(int64, tag = "1")]
    pub user_id: i64,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ClearFriendsResp {}
/// Generated client implementations.
pub mod friend_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct FriendServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl FriendServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> FriendServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> FriendServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            FriendServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn add_friend(
            &mut self,
            request: impl tonic::IntoRequest<super::AddFriendReq>,
        ) -> std::result::Result<tonic::Response<super::AddFriendResp>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/friend_service.FriendService/AddFriend",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("friend_service.FriendService", "AddFriend"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn remove_friend(
            &mut self,
            request: impl tonic::IntoRequest<super::RemoveFriendReq>,
        ) -> std::result::Result<
            tonic::Response<super::RemoveFriendResp>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/friend_service.FriendService/RemoveFriend",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("friend_service.FriendService", "RemoveFriend"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn is_friend(
            &mut self,
            request: impl tonic::IntoRequest<super::IsFriendReq>,
        ) -> std::result::Result<tonic::Response<super::IsFriendResp>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/friend_service.FriendService/IsFriend",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("friend_service.FriendService", "IsFriend"));
            self.inner.unary(req, path, codec).await
        }
        /// 兼容旧有只返 ID 的接口
        pub async fn get_friends(
            &mut self,
            request: impl tonic::IntoRequest<super::GetFriendsReq>,
        ) -> std::result::Result<tonic::Response<super::GetFriendsResp>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/friend_service.FriendService/GetFriends",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("friend_service.FriendService", "GetFriends"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_friends_page(
            &mut self,
            request: impl tonic::IntoRequest<super::GetFriendsPageReq>,
        ) -> std::result::Result<
            tonic::Response<super::GetFriendsPageResp>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/friend_service.FriendService/GetFriendsPage",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("friend_service.FriendService", "GetFriendsPage"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// 新增：带别名的查询
        pub async fn get_friends_detailed(
            &mut self,
            request: impl tonic::IntoRequest<super::GetFriendsDetailedReq>,
        ) -> std::result::Result<
            tonic::Response<super::GetFriendsDetailedResp>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/friend_service.FriendService/GetFriendsDetailed",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("friend_service.FriendService", "GetFriendsDetailed"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_friends_page_detailed(
            &mut self,
            request: impl tonic::IntoRequest<super::GetFriendsPageDetailedReq>,
        ) -> std::result::Result<
            tonic::Response<super::GetFriendsPageDetailedResp>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/friend_service.FriendService/GetFriendsPageDetailed",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "friend_service.FriendService",
                        "GetFriendsPageDetailed",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// 新增：更新别名与清空
        pub async fn update_friend_alias(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateFriendAliasReq>,
        ) -> std::result::Result<
            tonic::Response<super::UpdateFriendAliasResp>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/friend_service.FriendService/UpdateFriendAlias",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("friend_service.FriendService", "UpdateFriendAlias"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn clear_friends(
            &mut self,
            request: impl tonic::IntoRequest<super::ClearFriendsReq>,
        ) -> std::result::Result<
            tonic::Response<super::ClearFriendsResp>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/friend_service.FriendService/ClearFriends",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("friend_service.FriendService", "ClearFriends"));
            self.inner.unary(req, path, codec).await
        }
    }
}
