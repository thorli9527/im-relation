// This file is @generated by prost-build.
/// ===== 传输用的用户实体（不包含密码/哈希）=====
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClientEntity {
    /// 主键
    #[prost(int64, tag = "1")]
    pub id: i64,
    /// 建议<=64
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    /// 建议服务端规范化：lower+punycode
    #[prost(string, optional, tag = "3")]
    pub email: ::core::option::Option<::prost::alloc::string::String>,
    /// 建议服务端规范化：E.164
    #[prost(string, optional, tag = "4")]
    pub phone: ::core::option::Option<::prost::alloc::string::String>,
    /// BCP-47，如 "zh-CN"/"en-US"
    #[prost(string, optional, tag = "5")]
    pub language: ::core::option::Option<::prost::alloc::string::String>,
    /// URL 建议<=256
    #[prost(string, tag = "6")]
    pub avatar: ::prost::alloc::string::String,
    #[prost(enumeration = "AddFriendPolicy", tag = "7")]
    pub allow_add_friend: i32,
    #[prost(enumeration = "Gender", tag = "8")]
    pub gender: i32,
    #[prost(enumeration = "UserType", tag = "9")]
    pub user_type: i32,
    /// 扩展键值（低频）
    #[prost(map = "string, string", tag = "10")]
    pub profile_fields: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// 服务器写入
    #[prost(message, optional, tag = "11")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    /// 服务器写入
    #[prost(message, optional, tag = "12")]
    pub update_time: ::core::option::Option<::prost_types::Timestamp>,
}
/// ===== 注册 =====
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegisterUserReq {
    /// 必填
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// 明文（仅入参，服务端立刻哈希）
    #[prost(string, tag = "2")]
    pub password: ::prost::alloc::string::String,
    /// 必填
    #[prost(int64, tag = "3")]
    pub uid: i64,
    #[prost(string, optional, tag = "4")]
    pub email: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub phone: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "6")]
    pub language: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, tag = "7")]
    pub avatar: ::prost::alloc::string::String,
    /// 统一用枚举
    #[prost(enumeration = "AddFriendPolicy", tag = "8")]
    pub allow_add_friend: i32,
    #[prost(enumeration = "Gender", tag = "9")]
    pub gender: i32,
    #[prost(enumeration = "UserType", tag = "10")]
    pub user_type: i32,
    #[prost(map = "string, string", tag = "11")]
    pub profile_fields: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
/// ===== 修改密码 =====
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangePasswordReq {
    #[prost(int64, tag = "1")]
    pub id: i64,
    /// 走短信/邮箱验证时可为空
    #[prost(string, optional, tag = "2")]
    pub old_password: ::core::option::Option<::prost::alloc::string::String>,
    /// 服务端校验强度并哈希
    #[prost(string, tag = "3")]
    pub new_password: ::prost::alloc::string::String,
    /// 短信/邮箱/二次校验票据
    #[prost(string, optional, tag = "4")]
    pub verify_token: ::core::option::Option<::prost::alloc::string::String>,
}
/// ===== 换手机（传 presence：有值→更新；有值且为空串→清除；未出现→不变）=====
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangePhoneReq {
    #[prost(int64, tag = "1")]
    pub id: i64,
    /// optional 支持“存在性”，空串表示清除
    #[prost(string, optional, tag = "2")]
    pub new_phone: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub verify_token: ::core::option::Option<::prost::alloc::string::String>,
}
/// ===== 换邮箱（同上）=====
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangeEmailReq {
    #[prost(int64, tag = "1")]
    pub id: i64,
    /// 空串表示清除
    #[prost(string, optional, tag = "2")]
    pub new_email: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub verify_token: ::core::option::Option<::prost::alloc::string::String>,
}
/// ===== 通用更新（字段掩码）=====
/// 仅 patch 中出现且被 update_mask 指定的字段才会更新；若字段为 optional 且明确设为 null/空串，按业务约定处理“清除/置空”。
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateClientReq {
    /// 至少包含 id（和 version，若做乐观锁）
    #[prost(message, optional, tag = "1")]
    pub patch: ::core::option::Option<ClientEntity>,
    /// 例: "name,language,avatar,profile_fields"
    #[prost(message, optional, tag = "2")]
    pub update_mask: ::core::option::Option<::prost_types::FieldMask>,
}
/// ===== 查询 =====
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetClientReq {
    #[prost(int64, tag = "1")]
    pub id: i64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChangeResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
}
/// ===== 枚举：替代裸 int32，避免魔术数字 =====
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AddFriendPolicy {
    AddFriendUnspecified = 0,
    Anyone = 1,
    RequireVerify = 2,
    PhoneOnly = 3,
}
impl AddFriendPolicy {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::AddFriendUnspecified => "ADD_FRIEND_UNSPECIFIED",
            Self::Anyone => "ANYONE",
            Self::RequireVerify => "REQUIRE_VERIFY",
            Self::PhoneOnly => "PHONE_ONLY",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ADD_FRIEND_UNSPECIFIED" => Some(Self::AddFriendUnspecified),
            "ANYONE" => Some(Self::Anyone),
            "REQUIRE_VERIFY" => Some(Self::RequireVerify),
            "PHONE_ONLY" => Some(Self::PhoneOnly),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Gender {
    Unspecified = 0,
    Male = 1,
    Female = 2,
    Secret = 9,
}
impl Gender {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "GENDER_UNSPECIFIED",
            Self::Male => "MALE",
            Self::Female => "FEMALE",
            Self::Secret => "SECRET",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "GENDER_UNSPECIFIED" => Some(Self::Unspecified),
            "MALE" => Some(Self::Male),
            "FEMALE" => Some(Self::Female),
            "SECRET" => Some(Self::Secret),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum UserType {
    Unspecified = 0,
    Normal = 1,
    Test = 2,
    Bot = 3,
}
impl UserType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "USER_TYPE_UNSPECIFIED",
            Self::Normal => "NORMAL",
            Self::Test => "TEST",
            Self::Bot => "BOT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "USER_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "NORMAL" => Some(Self::Normal),
            "TEST" => Some(Self::Test),
            "BOT" => Some(Self::Bot),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod client_entity_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// ===== 服务定义 =====
    #[derive(Debug, Clone)]
    pub struct ClientEntityServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl ClientEntityServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> ClientEntityServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> ClientEntityServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            ClientEntityServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn register(
            &mut self,
            request: impl tonic::IntoRequest<super::RegisterUserReq>,
        ) -> std::result::Result<tonic::Response<super::ClientEntity>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/client_service.ClientEntityService/Register",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("client_service.ClientEntityService", "Register"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn change_password(
            &mut self,
            request: impl tonic::IntoRequest<super::ChangePasswordReq>,
        ) -> std::result::Result<tonic::Response<super::ChangeResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/client_service.ClientEntityService/ChangePassword",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "client_service.ClientEntityService",
                        "ChangePassword",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn change_phone(
            &mut self,
            request: impl tonic::IntoRequest<super::ChangePhoneReq>,
        ) -> std::result::Result<tonic::Response<super::ClientEntity>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/client_service.ClientEntityService/ChangePhone",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("client_service.ClientEntityService", "ChangePhone"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn change_email(
            &mut self,
            request: impl tonic::IntoRequest<super::ChangeEmailReq>,
        ) -> std::result::Result<tonic::Response<super::ClientEntity>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/client_service.ClientEntityService/ChangeEmail",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("client_service.ClientEntityService", "ChangeEmail"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn update_client(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateClientReq>,
        ) -> std::result::Result<tonic::Response<super::ClientEntity>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/client_service.ClientEntityService/UpdateClient",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("client_service.ClientEntityService", "UpdateClient"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_client(
            &mut self,
            request: impl tonic::IntoRequest<super::GetClientReq>,
        ) -> std::result::Result<tonic::Response<super::ClientEntity>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/client_service.ClientEntityService/GetClient",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("client_service.ClientEntityService", "GetClient"),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod client_entity_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with ClientEntityServiceServer.
    #[async_trait]
    pub trait ClientEntityService: std::marker::Send + std::marker::Sync + 'static {
        async fn register(
            &self,
            request: tonic::Request<super::RegisterUserReq>,
        ) -> std::result::Result<tonic::Response<super::ClientEntity>, tonic::Status>;
        async fn change_password(
            &self,
            request: tonic::Request<super::ChangePasswordReq>,
        ) -> std::result::Result<tonic::Response<super::ChangeResponse>, tonic::Status>;
        async fn change_phone(
            &self,
            request: tonic::Request<super::ChangePhoneReq>,
        ) -> std::result::Result<tonic::Response<super::ClientEntity>, tonic::Status>;
        async fn change_email(
            &self,
            request: tonic::Request<super::ChangeEmailReq>,
        ) -> std::result::Result<tonic::Response<super::ClientEntity>, tonic::Status>;
        async fn update_client(
            &self,
            request: tonic::Request<super::UpdateClientReq>,
        ) -> std::result::Result<tonic::Response<super::ClientEntity>, tonic::Status>;
        async fn get_client(
            &self,
            request: tonic::Request<super::GetClientReq>,
        ) -> std::result::Result<tonic::Response<super::ClientEntity>, tonic::Status>;
    }
    /// ===== 服务定义 =====
    #[derive(Debug)]
    pub struct ClientEntityServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> ClientEntityServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for ClientEntityServiceServer<T>
    where
        T: ClientEntityService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/client_service.ClientEntityService/Register" => {
                    #[allow(non_camel_case_types)]
                    struct RegisterSvc<T: ClientEntityService>(pub Arc<T>);
                    impl<
                        T: ClientEntityService,
                    > tonic::server::UnaryService<super::RegisterUserReq>
                    for RegisterSvc<T> {
                        type Response = super::ClientEntity;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RegisterUserReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ClientEntityService>::register(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RegisterSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/client_service.ClientEntityService/ChangePassword" => {
                    #[allow(non_camel_case_types)]
                    struct ChangePasswordSvc<T: ClientEntityService>(pub Arc<T>);
                    impl<
                        T: ClientEntityService,
                    > tonic::server::UnaryService<super::ChangePasswordReq>
                    for ChangePasswordSvc<T> {
                        type Response = super::ChangeResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ChangePasswordReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ClientEntityService>::change_password(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ChangePasswordSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/client_service.ClientEntityService/ChangePhone" => {
                    #[allow(non_camel_case_types)]
                    struct ChangePhoneSvc<T: ClientEntityService>(pub Arc<T>);
                    impl<
                        T: ClientEntityService,
                    > tonic::server::UnaryService<super::ChangePhoneReq>
                    for ChangePhoneSvc<T> {
                        type Response = super::ClientEntity;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ChangePhoneReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ClientEntityService>::change_phone(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ChangePhoneSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/client_service.ClientEntityService/ChangeEmail" => {
                    #[allow(non_camel_case_types)]
                    struct ChangeEmailSvc<T: ClientEntityService>(pub Arc<T>);
                    impl<
                        T: ClientEntityService,
                    > tonic::server::UnaryService<super::ChangeEmailReq>
                    for ChangeEmailSvc<T> {
                        type Response = super::ClientEntity;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ChangeEmailReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ClientEntityService>::change_email(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ChangeEmailSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/client_service.ClientEntityService/UpdateClient" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateClientSvc<T: ClientEntityService>(pub Arc<T>);
                    impl<
                        T: ClientEntityService,
                    > tonic::server::UnaryService<super::UpdateClientReq>
                    for UpdateClientSvc<T> {
                        type Response = super::ClientEntity;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpdateClientReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ClientEntityService>::update_client(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateClientSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/client_service.ClientEntityService/GetClient" => {
                    #[allow(non_camel_case_types)]
                    struct GetClientSvc<T: ClientEntityService>(pub Arc<T>);
                    impl<
                        T: ClientEntityService,
                    > tonic::server::UnaryService<super::GetClientReq>
                    for GetClientSvc<T> {
                        type Response = super::ClientEntity;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetClientReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ClientEntityService>::get_client(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetClientSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for ClientEntityServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "client_service.ClientEntityService";
    impl<T> tonic::server::NamedService for ClientEntityServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
