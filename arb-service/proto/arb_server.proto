syntax = "proto3";

package arb_server;

enum SyncDataType {
  SOCKET_ADD = 0;
  SOCKET_DEL = 1;
}
message BytesBlob {
  bytes data = 1;
  SyncDataType sync_type = 2;
}
/**
 * 通用响应
 */
message CommonResp {
  // 是否成功
  bool success = 1;
  // 提示或错误信息
  string message = 2;
}

enum NodeType {
  // 群组管理节点（用于群聊逻辑、分片等）
  GROUP_NODE = 0;
  // Socket 接入节点（处理底层连接与会话）
  SOCKET_NODE = 1;
  // Socket 网关（前端连接入口，兼具连接管理和鉴权）
  SOCKET_GATEWAY = 2;
  // 在线状态节点（处理用户在线状态逻辑）
  ONLINE_NODE = 3;
  // 消息中转网关（统一转发消息的逻辑中心）
  MSG_GATEWAY = 4;
  // 群组消息处理节点（专注处理群消息逻辑）
  MES_GROUP = 5;
  // 好友消息处理节点（专注处理单聊/好友消息）
  MSG_FRIEND = 6;
  // API 接入节点
  API_NODE=7;
}


// =====================
// 通用结构体定义
// =====================
// 基础请求，仅包含节点地址
message BaseRequest {
  // 节点地址（如 192.168.1.10:9000）
  string node_addr = 1;
  // 节点类型
  NodeType node_type = 2;
}


// =====================
// 通用结构体定义
// =====================
// 基础请求，仅包含节点地址
message RegisterRequest {
  // 节点地址（如 192.168.1.10:9000）
  string node_addr = 1;
  // 节点类型
  NodeType node_type = 2;
  // Kafka 地址（可选，用于消息队列）
  optional string kafka_addr = 3;
}

// =====================
// 通用结构体定义
// =====================
// 基础请求，仅包含节点地址
message QueryNodeReq {
  // 节点类型
  NodeType node_type = 1;
}

// ============================
// 分片节点元信息
// ============================
message NodeInfo {
  // 所属节点地址
  string node_addr = 1;
  // 最后更新时间戳（毫秒）
  uint64 last_update_time = 4;
  // 节点类型
  NodeType node_type = 7;
  // Kafka 地址（可选，用于消息传递）
  optional string kafka_addr = 8;
}
message NodeInfoList {
  repeated NodeInfo nodes = 1;
}
// ============================
// 仲裁服务接口定义
// ============================
service ArbServerRpcService {
  // === 分片状态更新 ===
  rpc UpdateShardState(BaseRequest) returns (CommonResp);
  // === 节点注册与生命周期 ===
  rpc RegisterNode(RegisterRequest) returns (CommonResp);
  /// 节点注册
  rpc ListAllNodes(QueryNodeReq) returns (NodeInfoList);
  /// === 节点状态与控制-节点优雅退出 ===
  rpc GracefulLeave(NodeInfo) returns (CommonResp);
  /// 节点心跳检测
  rpc heartbeat(BaseRequest) returns (CommonResp);
}

// ============================
// 仲裁客户端接口定义
// ============================
service ArbClientRpcService {
  //同步数据
  rpc syncData(BytesBlob) returns (CommonResp);
}
