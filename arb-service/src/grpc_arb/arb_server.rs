// This file is @generated by prost-build.
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BytesBlob {
    #[prost(bytes = "vec", tag = "1")]
    pub data: ::prost::alloc::vec::Vec<u8>,
    #[prost(enumeration = "SyncDataType", tag = "2")]
    pub sync_type: i32,
}
/// *
/// 通用响应
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CommonResp {
    /// 是否成功
    #[prost(bool, tag = "1")]
    pub success: bool,
    /// 提示或错误信息
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
}
/// =====================
/// 通用结构体定义
/// =====================
/// 基础请求，仅包含节点地址
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BaseRequest {
    /// 节点地址（如 192.168.1.10:9000）
    #[prost(string, tag = "1")]
    pub node_addr: ::prost::alloc::string::String,
    /// 节点类型
    #[prost(enumeration = "NodeType", tag = "2")]
    pub node_type: i32,
}
/// =====================
/// 通用结构体定义
/// =====================
/// 基础请求，仅包含节点地址
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegisterRequest {
    /// 节点地址（如 192.168.1.10:9000）
    #[prost(string, tag = "1")]
    pub node_addr: ::prost::alloc::string::String,
    /// 节点类型
    #[prost(enumeration = "NodeType", tag = "2")]
    pub node_type: i32,
    /// Kafka 地址（可选，用于消息队列）
    #[prost(string, optional, tag = "3")]
    pub kafka_addr: ::core::option::Option<::prost::alloc::string::String>,
}
/// =====================
/// 通用结构体定义
/// =====================
/// 基础请求，仅包含节点地址
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryNodeReq {
    /// 节点类型
    #[prost(enumeration = "NodeType", tag = "1")]
    pub node_type: i32,
}
/// ============================
/// 分片节点元信息
/// ============================
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NodeInfo {
    /// 所属节点地址
    #[prost(string, tag = "1")]
    pub node_addr: ::prost::alloc::string::String,
    /// 最后更新时间戳（毫秒）
    #[prost(uint64, tag = "4")]
    pub last_update_time: u64,
    /// 节点类型
    #[prost(enumeration = "NodeType", tag = "7")]
    pub node_type: i32,
    /// Kafka 地址（可选，用于消息传递）
    #[prost(string, optional, tag = "8")]
    pub kafka_addr: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NodeInfoList {
    #[prost(message, repeated, tag = "1")]
    pub nodes: ::prost::alloc::vec::Vec<NodeInfo>,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SyncDataType {
    SocketAdd = 0,
    SocketDel = 1,
}
impl SyncDataType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::SocketAdd => "SOCKET_ADD",
            Self::SocketDel => "SOCKET_DEL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SOCKET_ADD" => Some(Self::SocketAdd),
            "SOCKET_DEL" => Some(Self::SocketDel),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum NodeType {
    /// 群组管理节点（用于群聊逻辑、分片等）
    GroupNode = 0,
    /// Socket 接入节点（处理底层连接与会话）
    SocketNode = 1,
    /// Socket 网关（前端连接入口，兼具连接管理和鉴权）
    SocketGateway = 2,
    /// 在线状态节点（处理用户在线状态逻辑）
    OnlineNode = 3,
    /// 消息中转网关（统一转发消息的逻辑中心）
    MsgGateway = 4,
    /// 群组消息处理节点（专注处理群消息逻辑）
    MesGroup = 5,
    /// 好友消息处理节点（专注处理单聊/好友消息）
    MsgFriend = 6,
    /// API 接入节点
    ApiNode = 7,
    /// 好友关系节点
    FriendNode = 8,
}
impl NodeType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::GroupNode => "GROUP_NODE",
            Self::SocketNode => "SOCKET_NODE",
            Self::SocketGateway => "SOCKET_GATEWAY",
            Self::OnlineNode => "ONLINE_NODE",
            Self::MsgGateway => "MSG_GATEWAY",
            Self::MesGroup => "MES_GROUP",
            Self::MsgFriend => "MSG_FRIEND",
            Self::ApiNode => "API_NODE",
            Self::FriendNode => "FRIEND_NODE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "GROUP_NODE" => Some(Self::GroupNode),
            "SOCKET_NODE" => Some(Self::SocketNode),
            "SOCKET_GATEWAY" => Some(Self::SocketGateway),
            "ONLINE_NODE" => Some(Self::OnlineNode),
            "MSG_GATEWAY" => Some(Self::MsgGateway),
            "MES_GROUP" => Some(Self::MesGroup),
            "MSG_FRIEND" => Some(Self::MsgFriend),
            "API_NODE" => Some(Self::ApiNode),
            "FRIEND_NODE" => Some(Self::FriendNode),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod arb_server_rpc_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value
    )]
    use tonic::codegen::http::Uri;
    use tonic::codegen::*;
    /// ============================
    /// 仲裁服务接口定义
    /// ============================
    #[derive(Debug, Clone)]
    pub struct ArbServerRpcServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl ArbServerRpcServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> ArbServerRpcServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> ArbServerRpcServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<http::Request<tonic::body::Body>>>::Error:
                Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            ArbServerRpcServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// === 分片状态更新 ===
        pub async fn update_shard_state(
            &mut self,
            request: impl tonic::IntoRequest<super::BaseRequest>,
        ) -> std::result::Result<tonic::Response<super::CommonResp>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/arb_server.ArbServerRpcService/UpdateShardState",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "arb_server.ArbServerRpcService",
                "UpdateShardState",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// === 节点注册与生命周期 ===
        pub async fn register_node(
            &mut self,
            request: impl tonic::IntoRequest<super::RegisterRequest>,
        ) -> std::result::Result<tonic::Response<super::CommonResp>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/arb_server.ArbServerRpcService/RegisterNode",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "arb_server.ArbServerRpcService",
                "RegisterNode",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// / 节点注册
        pub async fn list_all_nodes(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryNodeReq>,
        ) -> std::result::Result<tonic::Response<super::NodeInfoList>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/arb_server.ArbServerRpcService/ListAllNodes",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "arb_server.ArbServerRpcService",
                "ListAllNodes",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// / === 节点状态与控制-节点优雅退出 ===
        pub async fn graceful_leave(
            &mut self,
            request: impl tonic::IntoRequest<super::NodeInfo>,
        ) -> std::result::Result<tonic::Response<super::CommonResp>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/arb_server.ArbServerRpcService/GracefulLeave",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "arb_server.ArbServerRpcService",
                "GracefulLeave",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// / 节点心跳检测
        pub async fn heartbeat(
            &mut self,
            request: impl tonic::IntoRequest<super::BaseRequest>,
        ) -> std::result::Result<tonic::Response<super::CommonResp>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path =
                http::uri::PathAndQuery::from_static("/arb_server.ArbServerRpcService/heartbeat");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "arb_server.ArbServerRpcService",
                "heartbeat",
            ));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated client implementations.
pub mod arb_client_rpc_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value
    )]
    use tonic::codegen::http::Uri;
    use tonic::codegen::*;
    /// ============================
    /// 仲裁客户端接口定义
    /// ============================
    #[derive(Debug, Clone)]
    pub struct ArbClientRpcServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl ArbClientRpcServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> ArbClientRpcServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> ArbClientRpcServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<http::Request<tonic::body::Body>>>::Error:
                Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            ArbClientRpcServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// 同步数据
        pub async fn sync_data(
            &mut self,
            request: impl tonic::IntoRequest<super::BytesBlob>,
        ) -> std::result::Result<tonic::Response<super::CommonResp>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path =
                http::uri::PathAndQuery::from_static("/arb_server.ArbClientRpcService/syncData");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "arb_server.ArbClientRpcService",
                "syncData",
            ));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod arb_server_rpc_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with ArbServerRpcServiceServer.
    #[async_trait]
    pub trait ArbServerRpcService: std::marker::Send + std::marker::Sync + 'static {
        /// === 分片状态更新 ===
        async fn update_shard_state(
            &self,
            request: tonic::Request<super::BaseRequest>,
        ) -> std::result::Result<tonic::Response<super::CommonResp>, tonic::Status>;
        /// === 节点注册与生命周期 ===
        async fn register_node(
            &self,
            request: tonic::Request<super::RegisterRequest>,
        ) -> std::result::Result<tonic::Response<super::CommonResp>, tonic::Status>;
        /// / 节点注册
        async fn list_all_nodes(
            &self,
            request: tonic::Request<super::QueryNodeReq>,
        ) -> std::result::Result<tonic::Response<super::NodeInfoList>, tonic::Status>;
        /// / === 节点状态与控制-节点优雅退出 ===
        async fn graceful_leave(
            &self,
            request: tonic::Request<super::NodeInfo>,
        ) -> std::result::Result<tonic::Response<super::CommonResp>, tonic::Status>;
        /// / 节点心跳检测
        async fn heartbeat(
            &self,
            request: tonic::Request<super::BaseRequest>,
        ) -> std::result::Result<tonic::Response<super::CommonResp>, tonic::Status>;
    }
    /// ============================
    /// 仲裁服务接口定义
    /// ============================
    #[derive(Debug)]
    pub struct ArbServerRpcServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> ArbServerRpcServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(inner: T, interceptor: F) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for ArbServerRpcServiceServer<T>
    where
        T: ArbServerRpcService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/arb_server.ArbServerRpcService/UpdateShardState" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateShardStateSvc<T: ArbServerRpcService>(pub Arc<T>);
                    impl<T: ArbServerRpcService> tonic::server::UnaryService<super::BaseRequest>
                        for UpdateShardStateSvc<T>
                    {
                        type Response = super::CommonResp;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::BaseRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ArbServerRpcService>::update_shard_state(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateShardStateSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/arb_server.ArbServerRpcService/RegisterNode" => {
                    #[allow(non_camel_case_types)]
                    struct RegisterNodeSvc<T: ArbServerRpcService>(pub Arc<T>);
                    impl<T: ArbServerRpcService> tonic::server::UnaryService<super::RegisterRequest>
                        for RegisterNodeSvc<T>
                    {
                        type Response = super::CommonResp;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RegisterRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ArbServerRpcService>::register_node(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RegisterNodeSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/arb_server.ArbServerRpcService/ListAllNodes" => {
                    #[allow(non_camel_case_types)]
                    struct ListAllNodesSvc<T: ArbServerRpcService>(pub Arc<T>);
                    impl<T: ArbServerRpcService> tonic::server::UnaryService<super::QueryNodeReq>
                        for ListAllNodesSvc<T>
                    {
                        type Response = super::NodeInfoList;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryNodeReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ArbServerRpcService>::list_all_nodes(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ListAllNodesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/arb_server.ArbServerRpcService/GracefulLeave" => {
                    #[allow(non_camel_case_types)]
                    struct GracefulLeaveSvc<T: ArbServerRpcService>(pub Arc<T>);
                    impl<T: ArbServerRpcService> tonic::server::UnaryService<super::NodeInfo> for GracefulLeaveSvc<T> {
                        type Response = super::CommonResp;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::NodeInfo>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ArbServerRpcService>::graceful_leave(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GracefulLeaveSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/arb_server.ArbServerRpcService/heartbeat" => {
                    #[allow(non_camel_case_types)]
                    struct heartbeatSvc<T: ArbServerRpcService>(pub Arc<T>);
                    impl<T: ArbServerRpcService> tonic::server::UnaryService<super::BaseRequest> for heartbeatSvc<T> {
                        type Response = super::CommonResp;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::BaseRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ArbServerRpcService>::heartbeat(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = heartbeatSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => Box::pin(async move {
                    let mut response = http::Response::new(tonic::body::Body::default());
                    let headers = response.headers_mut();
                    headers.insert(
                        tonic::Status::GRPC_STATUS,
                        (tonic::Code::Unimplemented as i32).into(),
                    );
                    headers.insert(
                        http::header::CONTENT_TYPE,
                        tonic::metadata::GRPC_CONTENT_TYPE,
                    );
                    Ok(response)
                }),
            }
        }
    }
    impl<T> Clone for ArbServerRpcServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "arb_server.ArbServerRpcService";
    impl<T> tonic::server::NamedService for ArbServerRpcServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
/// Generated server implementations.
pub mod arb_client_rpc_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with ArbClientRpcServiceServer.
    #[async_trait]
    pub trait ArbClientRpcService: std::marker::Send + std::marker::Sync + 'static {
        /// 同步数据
        async fn sync_data(
            &self,
            request: tonic::Request<super::BytesBlob>,
        ) -> std::result::Result<tonic::Response<super::CommonResp>, tonic::Status>;
    }
    /// ============================
    /// 仲裁客户端接口定义
    /// ============================
    #[derive(Debug)]
    pub struct ArbClientRpcServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> ArbClientRpcServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(inner: T, interceptor: F) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for ArbClientRpcServiceServer<T>
    where
        T: ArbClientRpcService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/arb_server.ArbClientRpcService/syncData" => {
                    #[allow(non_camel_case_types)]
                    struct syncDataSvc<T: ArbClientRpcService>(pub Arc<T>);
                    impl<T: ArbClientRpcService> tonic::server::UnaryService<super::BytesBlob> for syncDataSvc<T> {
                        type Response = super::CommonResp;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::BytesBlob>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ArbClientRpcService>::sync_data(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = syncDataSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => Box::pin(async move {
                    let mut response = http::Response::new(tonic::body::Body::default());
                    let headers = response.headers_mut();
                    headers.insert(
                        tonic::Status::GRPC_STATUS,
                        (tonic::Code::Unimplemented as i32).into(),
                    );
                    headers.insert(
                        http::header::CONTENT_TYPE,
                        tonic::metadata::GRPC_CONTENT_TYPE,
                    );
                    Ok(response)
                }),
            }
        }
    }
    impl<T> Clone for ArbClientRpcServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "arb_server.ArbClientRpcService";
    impl<T> tonic::server::NamedService for ArbClientRpcServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
