syntax = "proto3";

package online_service;

import "auth.proto";

service OnlineService {
  // 设置在线/离线（幂等）
  rpc SetOnline(SetOnlineRequest) returns (SetOnlineResponse);

  // 单查
  rpc CheckOnline(CheckOnlineRequest) returns (CheckOnlineResponse);

  // 批量查
  rpc CheckOnlineBatch(CheckOnlineBatchRequest) returns (CheckOnlineBatchResponse);

  // 统计信息
  rpc GetStats(GetStatsRequest) returns (GetStatsResponse);

  // 生成/刷新设备 session token
  rpc UpsertSessionToken(UpsertSessionTokenRequest) returns (UpsertSessionTokenResponse);

  // 校验 session token 合法性
  rpc ValidateSessionToken(ValidateSessionTokenRequest)
      returns (ValidateSessionTokenResponse);

  // 吊销指定 token 或设备会话
  rpc RevokeSessionToken(RevokeSessionTokenRequest)
      returns (RevokeSessionTokenResponse);

  // 批量刷新最后活跃时间
  rpc TouchSessionToken(TouchSessionTokenRequest) returns (TouchSessionTokenResponse);
}

message SetOnlineRequest {
  int64 user_id = 1;
  bool online = 2;
}
message SetOnlineResponse {
  bool ok = 1;
}

message CheckOnlineRequest {
  int64 user_id = 1;
}
message CheckOnlineResponse {
  bool online = 1;
}

message CheckOnlineBatchRequest {
  repeated int64 user_ids = 1;
}
message CheckOnlineBatchResponse {
  // 索引与输入 user_ids 对齐
  repeated bool results = 1;
}

message GetStatsRequest {}
message GetStatsResponse {
  uint64 total = 1;
  repeated uint64 per_shard = 2;
  uint32 max_shard_idx = 3;
  uint64 max_shard_count = 4;
}

// ================== session token ==================

enum SessionTokenStatus {
  STS_UNKNOWN = 0;
  STS_ACTIVE = 1;
  STS_REVOKED = 2;
  STS_EXPIRED = 3;
}

message UpsertSessionTokenRequest {
  int64 user_id = 1;
  auth.DeviceType device_type = 2;
  string device_id = 3;
  // 可选：客户端上报的登录 IP/UA，便于审计
  optional string login_ip = 4;
  optional string user_agent = 5;
}

message UpsertSessionTokenResponse {
  string session_token = 1;
  // 过期时间（毫秒时间戳）
  uint64 expires_at = 2;
  // 若存在旧 token，则返回以便调用方通知下线
  optional string previous_token = 3;
}

message ValidateSessionTokenRequest {
  string session_token = 1;
}

message ValidateSessionTokenResponse {
  SessionTokenStatus status = 1;
  int64 user_id = 2;
  auth.DeviceType device_type = 3;
  string device_id = 4;
  uint64 expires_at = 5;
}

message TokenDeviceRef {
  int64 user_id = 1;
  auth.DeviceType device_type = 2;
  string device_id = 3;
}

message RevokeSessionTokenRequest {
  oneof target {
    string session_token = 1;
    TokenDeviceRef device = 2;
  }
  optional string reason = 3;
}

message RevokeSessionTokenResponse {
  bool ok = 1;
  optional string revoked_token = 2;
}

message TouchSessionTokenRequest {
  repeated string session_tokens = 1;
}

message TouchSessionTokenResponse {
  uint32 touched = 1;
}
