// This file is @generated by prost-build.
/// / 用于用户信息的查询、展示等场景
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClientEntity {
    /// 用户唯一标识（主键），由服务端生成
    #[prost(int64, tag = "1")]
    pub id: i64,
    /// 密码，建议存储哈希值而非明文
    #[prost(string, tag = "2")]
    pub password: ::prost::alloc::string::String,
    /// 用户名，建议长度<=64字符
    #[prost(string, tag = "3")]
    pub name: ::prost::alloc::string::String,
    /// 邮箱地址（可选），建议服务端进行规范化处理（小写+punycode编码）
    #[prost(string, optional, tag = "4")]
    pub email: ::core::option::Option<::prost::alloc::string::String>,
    /// 手机号（可选），建议服务端按E.164标准规范化（如+8613800138000）
    #[prost(string, optional, tag = "5")]
    pub phone: ::core::option::Option<::prost::alloc::string::String>,
    /// 语言偏好，遵循BCP-47标准（如"zh-CN"表示简体中文，"en-US"表示美式英语）
    #[prost(string, optional, tag = "6")]
    pub language: ::core::option::Option<::prost::alloc::string::String>,
    /// 头像URL，建议长度<=256字符
    #[prost(string, tag = "7")]
    pub avatar: ::prost::alloc::string::String,
    /// 好友添加策略，默认值由服务端指定
    #[prost(enumeration = "AddFriendPolicy", tag = "8")]
    pub allow_add_friend: i32,
    /// 性别，默认未指定
    #[prost(enumeration = "Gender", tag = "9")]
    pub gender: i32,
    /// 用户类型，默认普通用户
    #[prost(enumeration = "UserType", tag = "10")]
    pub user_type: i32,
    /// 扩展个人资料字段（低频使用），用于存储自定义信息（如个性签名、地址等）
    #[prost(map = "string, string", tag = "11")]
    pub profile_fields:
        ::std::collections::HashMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
    /// 创建时间戳（毫秒级），由服务端生成
    #[prost(int64, tag = "12")]
    pub create_time: i64,
    /// 最后更新时间戳（毫秒级），由服务端更新
    #[prost(int64, tag = "13")]
    pub update_time: i64,
    /// 版本号，用于乐观锁控制，防止并发更新冲突
    #[prost(int32, tag = "14")]
    pub version: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FindClientDto {
    #[prost(message, optional, tag = "1")]
    pub client: ::core::option::Option<ClientEntity>,
}
/// / 用户注册请求
/// / 用于新用户账号创建
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegisterUserReq {
    /// 用户名（必填），服务端需校验唯一性和合法性
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// 密码明文（仅在请求中传输，服务端接收后需立即进行哈希处理，不存储明文）
    #[prost(string, tag = "2")]
    pub password: ::prost::alloc::string::String,
    /// 邮箱（可选），若提供需校验格式
    #[prost(string, optional, tag = "4")]
    pub email: ::core::option::Option<::prost::alloc::string::String>,
    /// 手机号（可选），若提供需校验格式
    #[prost(string, optional, tag = "5")]
    pub phone: ::core::option::Option<::prost::alloc::string::String>,
    /// 语言偏好（可选）
    #[prost(string, optional, tag = "6")]
    pub language: ::core::option::Option<::prost::alloc::string::String>,
    /// 头像URL（必填，可提供默认值）
    #[prost(string, tag = "7")]
    pub avatar: ::prost::alloc::string::String,
    /// 好友添加策略（必填，使用枚举确保合法性）
    #[prost(enumeration = "AddFriendPolicy", tag = "8")]
    pub allow_add_friend: i32,
    /// 性别（可选，默认未指定）
    #[prost(enumeration = "Gender", tag = "9")]
    pub gender: i32,
    /// 用户类型（可选，默认普通用户，服务端可根据业务限制类型）
    #[prost(enumeration = "UserType", tag = "10")]
    pub user_type: i32,
    /// 扩展资料字段（可选）
    #[prost(map = "string, string", tag = "11")]
    pub profile_fields:
        ::std::collections::HashMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
}
/// / 修改密码请求
/// / 用于用户更新登录密码
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangePasswordReq {
    /// 用户ID（必填），标识要修改密码的用户
    #[prost(int64, tag = "1")]
    pub id: i64,
    /// 旧密码（可选），走短信/邮箱验证流程时可忽略
    #[prost(string, optional, tag = "2")]
    pub old_password: ::core::option::Option<::prost::alloc::string::String>,
    /// 新密码（必填），服务端需校验强度（如长度、复杂度）并进行哈希处理
    #[prost(string, tag = "3")]
    pub new_password: ::prost::alloc::string::String,
    /// 验证票据（可选），用于短信/邮箱验证或二次校验场景
    #[prost(string, optional, tag = "4")]
    pub verify_token: ::core::option::Option<::prost::alloc::string::String>,
}
/// / 更换手机号请求
/// / 支持更新、清除手机号（通过字段存在性和值控制）
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangePhoneReq {
    /// 用户ID（必填）
    #[prost(int64, tag = "1")]
    pub id: i64,
    /// 新手机号（可选）：
    #[prost(string, optional, tag = "2")]
    pub new_phone: ::core::option::Option<::prost::alloc::string::String>,
    /// - 有值（非空）→ 更新为该手机号
    /// - 有值且为空串 → 清除当前手机号
    /// - 未出现该字段 → 不修改手机号
    /// 验证票据（必填，手机号修改需严格验证）
    #[prost(string, optional, tag = "3")]
    pub verify_token: ::core::option::Option<::prost::alloc::string::String>,
}
/// / 更换邮箱请求
/// / 逻辑同更换手机号
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangeEmailReq {
    /// 用户ID（必填）
    #[prost(int64, tag = "1")]
    pub id: i64,
    /// 新邮箱（可选）：
    #[prost(string, optional, tag = "2")]
    pub new_email: ::core::option::Option<::prost::alloc::string::String>,
    /// - 有值（非空）→ 更新为该邮箱
    /// - 有值且为空串 → 清除当前邮箱
    /// - 未出现该字段 → 不修改邮箱
    /// 验证票据（必填，邮箱修改需严格验证）
    #[prost(string, optional, tag = "3")]
    pub verify_token: ::core::option::Option<::prost::alloc::string::String>,
}
/// / 通用用户信息更新请求
/// / 支持部分字段更新，通过字段掩码控制更新范围
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateClientReq {
    /// 要更新的字段集合（至少包含id，建议包含version做乐观锁）
    #[prost(message, optional, tag = "1")]
    pub patch: ::core::option::Option<ClientEntity>,
    /// 仅包含需要更新的字段，未包含的字段不做修改
    /// 字段掩码，指定需要更新的字段（例："name,language,avatar,profile_fields"）
    ///
    /// 仅patch中出现且被mask指定的字段才会更新
    /// 若字段为optional且明确设为null/空串，按业务约定处理（如清除/置空）
    #[prost(message, optional, tag = "2")]
    pub update_mask: ::core::option::Option<::prost_types::FieldMask>,
}
/// / 查询用户信息请求
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetClientReq {
    /// 用户ID（必填），查询指定用户的信息
    #[prost(int64, tag = "1")]
    pub id: i64,
}
/// / 变更操作响应
/// / 用于不需要返回详细实体的变更操作（如修改密码）
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChangeResponse {
    /// 操作是否成功
    #[prost(bool, tag = "1")]
    pub success: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FindByContentReq {
    #[prost(string, tag = "1")]
    pub content: ::prost::alloc::string::String,
}
/// / 好友添加策略枚举
/// / 用于控制当前用户如何被其他用户添加为好友
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AddFriendPolicy {
    /// 未指定（默认值，服务端可根据业务逻辑处理为默认策略）
    AddFriendUnspecified = 0,
    /// 允许任何人添加为好友，无需验证
    Anyone = 1,
    /// 需要验证，需本人同意后才能成为好友
    RequireVerify = 2,
    /// 仅允许通过手机号添加（需用户已绑定手机号）
    PhoneOnly = 3,
}
impl AddFriendPolicy {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::AddFriendUnspecified => "ADD_FRIEND_UNSPECIFIED",
            Self::Anyone => "ANYONE",
            Self::RequireVerify => "REQUIRE_VERIFY",
            Self::PhoneOnly => "PHONE_ONLY",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ADD_FRIEND_UNSPECIFIED" => Some(Self::AddFriendUnspecified),
            "ANYONE" => Some(Self::Anyone),
            "REQUIRE_VERIFY" => Some(Self::RequireVerify),
            "PHONE_ONLY" => Some(Self::PhoneOnly),
            _ => None,
        }
    }
}
/// / 性别枚举
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Gender {
    /// 未指定（默认值）
    Unspecified = 0,
    /// 男性
    Male = 1,
    /// 女性
    Female = 2,
    /// 保密（特殊值，区别于未指定）
    Secret = 9,
}
impl Gender {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "GENDER_UNSPECIFIED",
            Self::Male => "MALE",
            Self::Female => "FEMALE",
            Self::Secret => "SECRET",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "GENDER_UNSPECIFIED" => Some(Self::Unspecified),
            "MALE" => Some(Self::Male),
            "FEMALE" => Some(Self::Female),
            "SECRET" => Some(Self::Secret),
            _ => None,
        }
    }
}
/// / 用户类型枚举
/// / 用于区分不同类型的用户，便于业务逻辑处理（如权限控制、功能限制等）
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum UserType {
    /// 未指定（默认值）
    Unspecified = 0,
    /// 普通用户（常规注册用户）
    Normal = 1,
    /// 测试用户（用于内部测试，可能有特殊权限或限制）
    Test = 2,
    /// 机器人用户（系统自动操作的账号）
    Bot = 3,
}
impl UserType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "USER_TYPE_UNSPECIFIED",
            Self::Normal => "NORMAL",
            Self::Test => "TEST",
            Self::Bot => "BOT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "USER_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "NORMAL" => Some(Self::Normal),
            "TEST" => Some(Self::Test),
            "BOT" => Some(Self::Bot),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod client_rpc_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value
    )]
    use tonic::codegen::http::Uri;
    use tonic::codegen::*;
    /// / 用户实体服务
    /// / 提供用户注册、信息查询、修改等核心功能
    #[derive(Debug, Clone)]
    pub struct ClientRpcServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl ClientRpcServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> ClientRpcServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> ClientRpcServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<http::Request<tonic::body::Body>>>::Error:
                Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            ClientRpcServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// 通过邮箱查询用户
        pub async fn find_by_email(
            &mut self,
            request: impl tonic::IntoRequest<super::FindByContentReq>,
        ) -> std::result::Result<tonic::Response<super::FindClientDto>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/client_service.ClientRpcService/findByEmail",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "client_service.ClientRpcService",
                "findByEmail",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// 通过手机查询用户
        pub async fn find_by_phone(
            &mut self,
            request: impl tonic::IntoRequest<super::FindByContentReq>,
        ) -> std::result::Result<tonic::Response<super::FindClientDto>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/client_service.ClientRpcService/findByPhone",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "client_service.ClientRpcService",
                "findByPhone",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// 通过用户名查询用户
        pub async fn find_by_name(
            &mut self,
            request: impl tonic::IntoRequest<super::FindByContentReq>,
        ) -> std::result::Result<tonic::Response<super::FindClientDto>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path =
                http::uri::PathAndQuery::from_static("/client_service.ClientRpcService/findByName");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "client_service.ClientRpcService",
                "findByName",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// 用户注册：创建新用户账号，返回创建后的用户实体（不含密码）
        pub async fn register(
            &mut self,
            request: impl tonic::IntoRequest<super::RegisterUserReq>,
        ) -> std::result::Result<tonic::Response<super::ClientEntity>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path =
                http::uri::PathAndQuery::from_static("/client_service.ClientRpcService/Register");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "client_service.ClientRpcService",
                "Register",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// 修改密码：更新用户登录密码，返回操作结果
        pub async fn change_password(
            &mut self,
            request: impl tonic::IntoRequest<super::ChangePasswordReq>,
        ) -> std::result::Result<tonic::Response<super::ChangeResponse>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/client_service.ClientRpcService/ChangePassword",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "client_service.ClientRpcService",
                "ChangePassword",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// 更换手机号：更新或清除用户手机号，返回更新后的用户实体
        pub async fn change_phone(
            &mut self,
            request: impl tonic::IntoRequest<super::ChangePhoneReq>,
        ) -> std::result::Result<tonic::Response<super::ClientEntity>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/client_service.ClientRpcService/ChangePhone",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "client_service.ClientRpcService",
                "ChangePhone",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// 更换邮箱：更新或清除用户邮箱，返回更新后的用户实体
        pub async fn change_email(
            &mut self,
            request: impl tonic::IntoRequest<super::ChangeEmailReq>,
        ) -> std::result::Result<tonic::Response<super::ClientEntity>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/client_service.ClientRpcService/ChangeEmail",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "client_service.ClientRpcService",
                "ChangeEmail",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// 通用信息更新：支持部分字段更新，返回更新后的用户实体
        pub async fn update_client(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateClientReq>,
        ) -> std::result::Result<tonic::Response<super::ClientEntity>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/client_service.ClientRpcService/UpdateClient",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "client_service.ClientRpcService",
                "UpdateClient",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// 查询用户信息：根据用户ID查询详细信息
        pub async fn get_client(
            &mut self,
            request: impl tonic::IntoRequest<super::GetClientReq>,
        ) -> std::result::Result<tonic::Response<super::ClientEntity>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path =
                http::uri::PathAndQuery::from_static("/client_service.ClientRpcService/GetClient");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "client_service.ClientRpcService",
                "GetClient",
            ));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod client_rpc_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with ClientRpcServiceServer.
    #[async_trait]
    pub trait ClientRpcService: std::marker::Send + std::marker::Sync + 'static {
        /// 通过邮箱查询用户
        async fn find_by_email(
            &self,
            request: tonic::Request<super::FindByContentReq>,
        ) -> std::result::Result<tonic::Response<super::FindClientDto>, tonic::Status>;
        /// 通过手机查询用户
        async fn find_by_phone(
            &self,
            request: tonic::Request<super::FindByContentReq>,
        ) -> std::result::Result<tonic::Response<super::FindClientDto>, tonic::Status>;
        /// 通过用户名查询用户
        async fn find_by_name(
            &self,
            request: tonic::Request<super::FindByContentReq>,
        ) -> std::result::Result<tonic::Response<super::FindClientDto>, tonic::Status>;
        /// 用户注册：创建新用户账号，返回创建后的用户实体（不含密码）
        async fn register(
            &self,
            request: tonic::Request<super::RegisterUserReq>,
        ) -> std::result::Result<tonic::Response<super::ClientEntity>, tonic::Status>;
        /// 修改密码：更新用户登录密码，返回操作结果
        async fn change_password(
            &self,
            request: tonic::Request<super::ChangePasswordReq>,
        ) -> std::result::Result<tonic::Response<super::ChangeResponse>, tonic::Status>;
        /// 更换手机号：更新或清除用户手机号，返回更新后的用户实体
        async fn change_phone(
            &self,
            request: tonic::Request<super::ChangePhoneReq>,
        ) -> std::result::Result<tonic::Response<super::ClientEntity>, tonic::Status>;
        /// 更换邮箱：更新或清除用户邮箱，返回更新后的用户实体
        async fn change_email(
            &self,
            request: tonic::Request<super::ChangeEmailReq>,
        ) -> std::result::Result<tonic::Response<super::ClientEntity>, tonic::Status>;
        /// 通用信息更新：支持部分字段更新，返回更新后的用户实体
        async fn update_client(
            &self,
            request: tonic::Request<super::UpdateClientReq>,
        ) -> std::result::Result<tonic::Response<super::ClientEntity>, tonic::Status>;
        /// 查询用户信息：根据用户ID查询详细信息
        async fn get_client(
            &self,
            request: tonic::Request<super::GetClientReq>,
        ) -> std::result::Result<tonic::Response<super::ClientEntity>, tonic::Status>;
    }
    /// / 用户实体服务
    /// / 提供用户注册、信息查询、修改等核心功能
    #[derive(Debug)]
    pub struct ClientRpcServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> ClientRpcServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(inner: T, interceptor: F) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for ClientRpcServiceServer<T>
    where
        T: ClientRpcService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/client_service.ClientRpcService/findByEmail" => {
                    #[allow(non_camel_case_types)]
                    struct findByEmailSvc<T: ClientRpcService>(pub Arc<T>);
                    impl<T: ClientRpcService> tonic::server::UnaryService<super::FindByContentReq>
                        for findByEmailSvc<T>
                    {
                        type Response = super::FindClientDto;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindByContentReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ClientRpcService>::find_by_email(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = findByEmailSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/client_service.ClientRpcService/findByPhone" => {
                    #[allow(non_camel_case_types)]
                    struct findByPhoneSvc<T: ClientRpcService>(pub Arc<T>);
                    impl<T: ClientRpcService> tonic::server::UnaryService<super::FindByContentReq>
                        for findByPhoneSvc<T>
                    {
                        type Response = super::FindClientDto;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindByContentReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ClientRpcService>::find_by_phone(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = findByPhoneSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/client_service.ClientRpcService/findByName" => {
                    #[allow(non_camel_case_types)]
                    struct findByNameSvc<T: ClientRpcService>(pub Arc<T>);
                    impl<T: ClientRpcService> tonic::server::UnaryService<super::FindByContentReq>
                        for findByNameSvc<T>
                    {
                        type Response = super::FindClientDto;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindByContentReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ClientRpcService>::find_by_name(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = findByNameSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/client_service.ClientRpcService/Register" => {
                    #[allow(non_camel_case_types)]
                    struct RegisterSvc<T: ClientRpcService>(pub Arc<T>);
                    impl<T: ClientRpcService> tonic::server::UnaryService<super::RegisterUserReq> for RegisterSvc<T> {
                        type Response = super::ClientEntity;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RegisterUserReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ClientRpcService>::register(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RegisterSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/client_service.ClientRpcService/ChangePassword" => {
                    #[allow(non_camel_case_types)]
                    struct ChangePasswordSvc<T: ClientRpcService>(pub Arc<T>);
                    impl<T: ClientRpcService> tonic::server::UnaryService<super::ChangePasswordReq>
                        for ChangePasswordSvc<T>
                    {
                        type Response = super::ChangeResponse;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ChangePasswordReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ClientRpcService>::change_password(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ChangePasswordSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/client_service.ClientRpcService/ChangePhone" => {
                    #[allow(non_camel_case_types)]
                    struct ChangePhoneSvc<T: ClientRpcService>(pub Arc<T>);
                    impl<T: ClientRpcService> tonic::server::UnaryService<super::ChangePhoneReq> for ChangePhoneSvc<T> {
                        type Response = super::ClientEntity;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ChangePhoneReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ClientRpcService>::change_phone(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ChangePhoneSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/client_service.ClientRpcService/ChangeEmail" => {
                    #[allow(non_camel_case_types)]
                    struct ChangeEmailSvc<T: ClientRpcService>(pub Arc<T>);
                    impl<T: ClientRpcService> tonic::server::UnaryService<super::ChangeEmailReq> for ChangeEmailSvc<T> {
                        type Response = super::ClientEntity;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ChangeEmailReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ClientRpcService>::change_email(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ChangeEmailSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/client_service.ClientRpcService/UpdateClient" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateClientSvc<T: ClientRpcService>(pub Arc<T>);
                    impl<T: ClientRpcService> tonic::server::UnaryService<super::UpdateClientReq>
                        for UpdateClientSvc<T>
                    {
                        type Response = super::ClientEntity;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpdateClientReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ClientRpcService>::update_client(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateClientSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/client_service.ClientRpcService/GetClient" => {
                    #[allow(non_camel_case_types)]
                    struct GetClientSvc<T: ClientRpcService>(pub Arc<T>);
                    impl<T: ClientRpcService> tonic::server::UnaryService<super::GetClientReq> for GetClientSvc<T> {
                        type Response = super::ClientEntity;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetClientReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ClientRpcService>::get_client(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetClientSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => Box::pin(async move {
                    let mut response = http::Response::new(tonic::body::Body::default());
                    let headers = response.headers_mut();
                    headers.insert(
                        tonic::Status::GRPC_STATUS,
                        (tonic::Code::Unimplemented as i32).into(),
                    );
                    headers.insert(
                        http::header::CONTENT_TYPE,
                        tonic::metadata::GRPC_CONTENT_TYPE,
                    );
                    Ok(response)
                }),
            }
        }
    }
    impl<T> Clone for ClientRpcServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "client_service.ClientRpcService";
    impl<T> tonic::server::NamedService for ClientRpcServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
